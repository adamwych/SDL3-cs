
//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/lithiumtoast/c2cs (v1.4.1.0)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

using C2CS;

#nullable enable
#pragma warning disable 1591

public static unsafe partial class SDL
{
    private const string LibraryName = "SDL2";

    // Function @ SDL_platform.h:223:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_platform.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetPlatform();

    // Function @ SDL_stdinc.h:406:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_malloc(ulong size);

    // Function @ SDL_stdinc.h:409:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void SDL_free(void* mem);

    // Function @ SDL_stdinc.h:515:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_memcpy(void* dst, void* src, ulong len);

    // Function @ SDL_main.h:135:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_main.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetMainReady();

    // Function @ SDL_error.h:64:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_error.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetError(CString8U fmt);

    // Function @ SDL_error.h:99:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_error.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetError();

    // Function @ SDL_error.h:114:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_error.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetErrorMsg(CString8U errstr, int maxlen);

    // Function @ SDL_error.h:122:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_error.h)
    [DllImport(LibraryName)]
    public static extern void SDL_ClearError();

    // Function @ SDL_rwops.h:159:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern SDL_RWops* SDL_RWFromFile(CString8U file, CString8U mode);

    // Function @ SDL_rwops.h:166:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern SDL_RWops* SDL_RWFromFP(void* fp, CBool autoclose);

    // Function @ SDL_rwops.h:170:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern SDL_RWops* SDL_RWFromMem(void* mem, int size);

    // Function @ SDL_rwops.h:171:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern SDL_RWops* SDL_RWFromConstMem(void* mem, int size);

    // Function @ SDL_rwops.h:177:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern SDL_RWops* SDL_AllocRW();

    // Function @ SDL_rwops.h:178:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeRW(SDL_RWops* area);

    // Function @ SDL_rwops.h:194:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern long SDL_RWsize(SDL_RWops* context);

    // Function @ SDL_rwops.h:227:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern long SDL_RWseek(SDL_RWops* context, long offset, int whence);

    // Function @ SDL_rwops.h:251:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern long SDL_RWtell(SDL_RWops* context);

    // Function @ SDL_rwops.h:279:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_RWread(SDL_RWops* context, void* ptr, ulong size, ulong maxnum);

    // Function @ SDL_rwops.h:309:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_RWwrite(SDL_RWops* context, void* ptr, ulong size, ulong num);

    // Function @ SDL_rwops.h:339:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RWclose(SDL_RWops* context);

    // Function @ SDL_rwops.h:372:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_LoadFile(CString8U file, ulong* datasize);

    // Function @ SDL_rwops.h:380:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern byte SDL_ReadU8(SDL_RWops* src);

    // Function @ SDL_rwops.h:381:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_ReadLE16(SDL_RWops* src);

    // Function @ SDL_rwops.h:382:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_ReadBE16(SDL_RWops* src);

    // Function @ SDL_rwops.h:383:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_ReadLE32(SDL_RWops* src);

    // Function @ SDL_rwops.h:384:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_ReadBE32(SDL_RWops* src);

    // Function @ SDL_rwops.h:385:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_ReadLE64(SDL_RWops* src);

    // Function @ SDL_rwops.h:386:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_ReadBE64(SDL_RWops* src);

    // Function @ SDL_rwops.h:395:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteU8(SDL_RWops* dst, byte value);

    // Function @ SDL_rwops.h:396:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteLE16(SDL_RWops* dst, ushort value);

    // Function @ SDL_rwops.h:397:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteBE16(SDL_RWops* dst, ushort value);

    // Function @ SDL_rwops.h:398:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteLE32(SDL_RWops* dst, uint value);

    // Function @ SDL_rwops.h:399:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteBE32(SDL_RWops* dst, uint value);

    // Function @ SDL_rwops.h:400:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteLE64(SDL_RWops* dst, ulong value);

    // Function @ SDL_rwops.h:401:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteBE64(SDL_RWops* dst, ulong value);

    // Function @ SDL_audio.h:256:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumAudioDrivers();

    // Function @ SDL_audio.h:257:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetAudioDriver(int index);

    // Function @ SDL_audio.h:268:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AudioInit(CString8U driver_name);

    // Function @ SDL_audio.h:269:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_AudioQuit();

    // Function @ SDL_audio.h:288:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetCurrentAudioDriver();

    // Function @ SDL_audio.h:335:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_OpenAudio(SDL_AudioSpec* desired, SDL_AudioSpec* obtained);

    // Function @ SDL_audio.h:393:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumAudioDevices(int iscapture);

    // Function @ SDL_audio.h:417:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetAudioDeviceName(int index, int iscapture);

    // Function @ SDL_audio.h:552:43 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern SDL_AudioDeviceID SDL_OpenAudioDevice(CString8U device, int iscapture, SDL_AudioSpec* desired, SDL_AudioSpec* obtained, int allowed_changes);

    // Function @ SDL_audio.h:573:41 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern SDL_AudioStatus SDL_GetAudioStatus();

    // Function @ SDL_audio.h:574:41 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern SDL_AudioStatus SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev);

    // Function @ SDL_audio.h:587:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_PauseAudio(int pause_on);

    // Function @ SDL_audio.h:588:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_PauseAudioDevice(SDL_AudioDeviceID dev, int pause_on);

    // Function @ SDL_audio.h:697:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeWAV(byte* audio_buf);

    // Function @ SDL_audio.h:804:43 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern SDL_AudioStream* SDL_NewAudioStream(SDL_AudioFormat src_format, byte src_channels, int src_rate, SDL_AudioFormat dst_format, byte dst_channels, int dst_rate);

    // Function @ SDL_audio.h:826:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AudioStreamPut(SDL_AudioStream* stream, void* buf, int len);

    // Function @ SDL_audio.h:843:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AudioStreamGet(SDL_AudioStream* stream, void* buf, int len);

    // Function @ SDL_audio.h:859:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AudioStreamAvailable(SDL_AudioStream* stream);

    // Function @ SDL_audio.h:888:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_AudioStreamClear(SDL_AudioStream* stream);

    // Function @ SDL_audio.h:900:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeAudioStream(SDL_AudioStream* stream);

    // Function @ SDL_audio.h:923:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_MixAudio(byte* dst, byte* src, uint len, int volume);

    // Function @ SDL_audio.h:954:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_MixAudioFormat(byte* dst, byte* src, SDL_AudioFormat format, uint len, int volume);

    // Function @ SDL_audio.h:1006:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_QueueAudio(SDL_AudioDeviceID dev, void* data, uint len);

    // Function @ SDL_audio.h:1054:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_DequeueAudio(SDL_AudioDeviceID dev, void* data, uint len);

    // Function @ SDL_audio.h:1088:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetQueuedAudioSize(SDL_AudioDeviceID dev);

    // Function @ SDL_audio.h:1122:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_ClearQueuedAudio(SDL_AudioDeviceID dev);

    // Function @ SDL_audio.h:1134:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LockAudio();

    // Function @ SDL_audio.h:1135:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LockAudioDevice(SDL_AudioDeviceID dev);

    // Function @ SDL_audio.h:1136:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockAudio();

    // Function @ SDL_audio.h:1137:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);

    // Function @ SDL_audio.h:1153:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_CloseAudio();

    // Function @ SDL_audio.h:1175:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_CloseAudioDevice(SDL_AudioDeviceID dev);

    // Function @ SDL_clipboard.h:51:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_clipboard.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetClipboardText(CString8U text);

    // Function @ SDL_clipboard.h:66:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_clipboard.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetClipboardText();

    // Function @ SDL_clipboard.h:78:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_clipboard.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasClipboardText();

    // Function @ SDL_cpuinfo.h:140:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetCPUCount();

    // Function @ SDL_cpuinfo.h:152:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetCPUCacheLineSize();

    // Function @ SDL_cpuinfo.h:172:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasRDTSC();

    // Function @ SDL_cpuinfo.h:193:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasAltiVec();

    // Function @ SDL_cpuinfo.h:213:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasMMX();

    // Function @ SDL_cpuinfo.h:233:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_Has3DNow();

    // Function @ SDL_cpuinfo.h:253:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSSE();

    // Function @ SDL_cpuinfo.h:273:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSSE2();

    // Function @ SDL_cpuinfo.h:293:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSSE3();

    // Function @ SDL_cpuinfo.h:313:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSSE41();

    // Function @ SDL_cpuinfo.h:333:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSSE42();

    // Function @ SDL_cpuinfo.h:355:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasAVX();

    // Function @ SDL_cpuinfo.h:377:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasAVX2();

    // Function @ SDL_cpuinfo.h:388:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasAVX512F();

    // Function @ SDL_cpuinfo.h:401:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasARMSIMD();

    // Function @ SDL_cpuinfo.h:410:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasNEON();

    // Function @ SDL_cpuinfo.h:419:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetSystemRAM();

    // Function @ SDL_cpuinfo.h:436:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_SIMDGetAlignment();

    // Function @ SDL_cpuinfo.h:473:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_SIMDAlloc(ulong len);

    // Function @ SDL_cpuinfo.h:495:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_SIMDRealloc(void* mem, ulong len);

    // Function @ SDL_cpuinfo.h:517:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SIMDFree(void* ptr);

    // Function @ SDL_pixels.h:356:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetPixelFormatName(uint format);

    // Function @ SDL_pixels.h:372:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_PixelFormatEnumToMasks(uint format, long* bpp, uint* Rmask, uint* Gmask, uint* Bmask, uint* Amask);

    // Function @ SDL_pixels.h:394:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_MasksToPixelFormatEnum(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask);

    // Function @ SDL_pixels.h:413:43 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern SDL_PixelFormat* SDL_AllocFormat(uint pixel_format);

    // Function @ SDL_pixels.h:422:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeFormat(SDL_PixelFormat* format);

    // Function @ SDL_pixels.h:436:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern SDL_Palette* SDL_AllocPalette(int ncolors);

    // Function @ SDL_pixels.h:449:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetPixelFormatPalette(SDL_PixelFormat* format, SDL_Palette* palette);

    // Function @ SDL_pixels.h:465:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetPaletteColors(SDL_Palette* palette, SDL_Color* colors, int firstcolor, int ncolors);

    // Function @ SDL_pixels.h:476:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreePalette(SDL_Palette* palette);

    // Function @ SDL_pixels.h:506:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_MapRGB(SDL_PixelFormat* format, byte r, byte g, byte b);

    // Function @ SDL_pixels.h:539:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_MapRGBA(SDL_PixelFormat* format, byte r, byte g, byte b, byte a);

    // Function @ SDL_pixels.h:562:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetRGB(uint pixel, SDL_PixelFormat* format, byte* r, byte* g, byte* b);

    // Function @ SDL_pixels.h:589:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetRGBA(uint pixel, SDL_PixelFormat* format, byte* r, byte* g, byte* b, byte* a);

    // Function @ SDL_pixels.h:602:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern void SDL_CalculateGammaRamp(float gamma, ushort* ramp);

    // Function @ SDL_rect.h:135:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasIntersection(SDL_Rect* A, SDL_Rect* B);

    // Function @ SDL_rect.h:153:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IntersectRect(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

    // Function @ SDL_rect.h:165:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnionRect(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

    // Function @ SDL_rect.h:184:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_EnclosePoints(SDL_Point* points, int count, SDL_Rect* clip, SDL_Rect* result);

    // Function @ SDL_rect.h:205:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IntersectRectAndLine(SDL_Rect* rect, long* X1, long* Y1, long* X2, long* Y2);

    // Function @ SDL_blendmode.h:185:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_blendmode.h)
    [DllImport(LibraryName)]
    public static extern SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);

    // Function @ SDL_surface.h:156:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_CreateRGBSurface(uint flags, int width, int height, int depth, uint Rmask, uint Gmask, uint Bmask, uint Amask);

    // Function @ SDL_surface.h:181:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_CreateRGBSurfaceWithFormat(uint flags, int width, int height, int depth, uint format);

    // Function @ SDL_surface.h:210:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_CreateRGBSurfaceFrom(void* pixels, int width, int height, int depth, int pitch, uint Rmask, uint Gmask, uint Bmask, uint Amask);

    // Function @ SDL_surface.h:245:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_CreateRGBSurfaceWithFormatFrom(void* pixels, int width, int height, int depth, int pitch, uint format);

    // Function @ SDL_surface.h:260:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeSurface(SDL_Surface* surface);

    // Function @ SDL_surface.h:272:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetSurfacePalette(SDL_Surface* surface, SDL_Palette* palette);

    // Function @ SDL_surface.h:294:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LockSurface(SDL_Surface* surface);

    // Function @ SDL_surface.h:303:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockSurface(SDL_Surface* surface);

    // Function @ SDL_surface.h:373:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetSurfaceRLE(SDL_Surface* surface, int flag);

    // Function @ SDL_surface.h:386:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSurfaceRLE(SDL_Surface* surface);

    // Function @ SDL_surface.h:410:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetColorKey(SDL_Surface* surface, int flag, uint key);

    // Function @ SDL_surface.h:424:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasColorKey(SDL_Surface* surface);

    // Function @ SDL_surface.h:442:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetColorKey(SDL_Surface* surface, uint* key);

    // Function @ SDL_surface.h:464:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetSurfaceColorMod(SDL_Surface* surface, byte r, byte g, byte b);

    // Function @ SDL_surface.h:481:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetSurfaceColorMod(SDL_Surface* surface, byte* r, byte* g, byte* b);

    // Function @ SDL_surface.h:501:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetSurfaceAlphaMod(SDL_Surface* surface, byte alpha);

    // Function @ SDL_surface.h:515:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetSurfaceAlphaMod(SDL_Surface* surface, byte* alpha);

    // Function @ SDL_surface.h:532:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode);

    // Function @ SDL_surface.h:545:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode);

    // Function @ SDL_surface.h:566:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_SetClipRect(SDL_Surface* surface, SDL_Rect* rect);

    // Function @ SDL_surface.h:583:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetClipRect(SDL_Surface* surface, SDL_Rect* rect);

    // Function @ SDL_surface.h:595:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_DuplicateSurface(SDL_Surface* surface);

    // Function @ SDL_surface.h:617:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_ConvertSurface(SDL_Surface* src, SDL_PixelFormat* fmt, uint flags);

    // Function @ SDL_surface.h:640:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_ConvertSurfaceFormat(SDL_Surface* src, uint pixel_format, uint flags);

    // Function @ SDL_surface.h:657:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_ConvertPixels(int width, int height, uint src_format, void* src, int src_pitch, uint dst_format, void* dst, int dst_pitch);

    // Function @ SDL_surface.h:684:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_FillRect(SDL_Surface* dst, SDL_Rect* rect, uint color);

    // Function @ SDL_surface.h:708:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_FillRects(SDL_Surface* dst, SDL_Rect* rects, int count, uint color);

    // Function @ SDL_surface.h:779:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpperBlit(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    // Function @ SDL_surface.h:803:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LowerBlit(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    // Function @ SDL_surface.h:814:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SoftStretch(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    // Function @ SDL_surface.h:838:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpperBlitScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    // Function @ SDL_surface.h:859:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LowerBlitScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    // Function @ SDL_video.h:289:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumVideoDrivers();

    // Function @ SDL_video.h:302:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetVideoDriver(int index);

    // Function @ SDL_video.h:331:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_VideoInit(CString8U driver_name);

    // Function @ SDL_video.h:340:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_VideoQuit();

    // Function @ SDL_video.h:353:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetCurrentVideoDriver();

    // Function @ SDL_video.h:365:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumVideoDisplays();

    // Function @ SDL_video.h:379:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetDisplayName(int displayIndex);

    // Function @ SDL_video.h:393:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetDisplayBounds(int displayIndex, SDL_Rect* rect);

    // Function @ SDL_video.h:424:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetDisplayUsableBounds(int displayIndex, SDL_Rect* rect);

    // Function @ SDL_video.h:450:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetDisplayDPI(int displayIndex, float* ddpi, float* hdpi, float* vdpi);

    // Function @ SDL_video.h:461:48 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_DisplayOrientation SDL_GetDisplayOrientation(int displayIndex);

    // Function @ SDL_video.h:478:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumDisplayModes(int displayIndex);

    // Function @ SDL_video.h:500:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetDisplayMode(int displayIndex, int modeIndex, SDL_DisplayMode* mode);

    // Function @ SDL_video.h:521:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode* mode);

    // Function @ SDL_video.h:542:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode* mode);

    // Function @ SDL_video.h:566:43 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_DisplayMode* SDL_GetClosestDisplayMode(int displayIndex, SDL_DisplayMode* mode, SDL_DisplayMode* closest);

    // Function @ SDL_video.h:579:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetWindowDisplayIndex(SDL_Window* window);

    // Function @ SDL_video.h:598:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowDisplayMode(SDL_Window* window, SDL_DisplayMode* mode);

    // Function @ SDL_video.h:613:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetWindowDisplayMode(SDL_Window* window, SDL_DisplayMode* mode);

    // Function @ SDL_video.h:624:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetWindowPixelFormat(SDL_Window* window);

    // Function @ SDL_video.h:694:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_CreateWindow(CString8U title, int x, int y, int w, int h, uint flags);

    // Function @ SDL_video.h:713:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_CreateWindowFrom(void* data);

    // Function @ SDL_video.h:729:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetWindowID(SDL_Window* window);

    // Function @ SDL_video.h:743:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_GetWindowFromID(uint id);

    // Function @ SDL_video.h:759:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetWindowFlags(SDL_Window* window);

    // Function @ SDL_video.h:771:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowTitle(SDL_Window* window, CString8U title);

    // Function @ SDL_video.h:783:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetWindowTitle(SDL_Window* window);

    // Function @ SDL_video.h:791:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowIcon(SDL_Window* window, SDL_Surface* icon);

    // Function @ SDL_video.h:806:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_SetWindowData(SDL_Window* window, CString8U name, void* userdata);

    // Function @ SDL_video.h:819:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_GetWindowData(SDL_Window* window, CString8U name);

    // Function @ SDL_video.h:835:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowPosition(SDL_Window* window, int x, int y);

    // Function @ SDL_video.h:852:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetWindowPosition(SDL_Window* window, long* x, long* y);

    // Function @ SDL_video.h:875:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowSize(SDL_Window* window, int w, int h);

    // Function @ SDL_video.h:900:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetWindowSize(SDL_Window* window, long* w, long* h);

    // Function @ SDL_video.h:935:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetWindowBordersSize(SDL_Window* window, long* top, long* left, long* bottom, long* right);

    // Function @ SDL_video.h:949:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h);

    // Function @ SDL_video.h:964:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetWindowMinimumSize(SDL_Window* window, long* w, long* h);

    // Function @ SDL_video.h:977:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h);

    // Function @ SDL_video.h:992:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetWindowMaximumSize(SDL_Window* window, long* w, long* h);

    // Function @ SDL_video.h:1011:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowBordered(SDL_Window* window, CBool bordered);

    // Function @ SDL_video.h:1030:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowResizable(SDL_Window* window, CBool resizable);

    // Function @ SDL_video.h:1056:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_ShowWindow(SDL_Window* window);

    // Function @ SDL_video.h:1065:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_HideWindow(SDL_Window* window);

    // Function @ SDL_video.h:1072:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RaiseWindow(SDL_Window* window);

    // Function @ SDL_video.h:1082:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_MaximizeWindow(SDL_Window* window);

    // Function @ SDL_video.h:1092:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_MinimizeWindow(SDL_Window* window);

    // Function @ SDL_video.h:1102:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RestoreWindow(SDL_Window* window);

    // Function @ SDL_video.h:1121:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowFullscreen(SDL_Window* window, uint flags);

    // Function @ SDL_video.h:1145:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_GetWindowSurface(SDL_Window* window);

    // Function @ SDL_video.h:1162:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpdateWindowSurface(SDL_Window* window);

    // Function @ SDL_video.h:1182:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpdateWindowSurfaceRects(SDL_Window* window, SDL_Rect* rects, int numrects);

    // Function @ SDL_video.h:1200:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowGrab(SDL_Window* window, CBool grabbed);

    // Function @ SDL_video.h:1239:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GetWindowGrab(SDL_Window* window);

    // Function @ SDL_video.h:1273:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_GetGrabbedWindow();

    // Function @ SDL_video.h:1299:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowBrightness(SDL_Window* window, float brightness);

    // Function @ SDL_video.h:1316:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern float SDL_GetWindowBrightness(SDL_Window* window);

    // Function @ SDL_video.h:1335:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowOpacity(SDL_Window* window, float opacity);

    // Function @ SDL_video.h:1356:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetWindowOpacity(SDL_Window* window, float* out_opacity);

    // Function @ SDL_video.h:1368:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowModalFor(SDL_Window* modal_window, SDL_Window* parent_window);

    // Function @ SDL_video.h:1385:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowInputFocus(SDL_Window* window);

    // Function @ SDL_video.h:1415:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowGammaRamp(SDL_Window* window, ushort* red, ushort* green, ushort* blue);

    // Function @ SDL_video.h:1441:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetWindowGammaRamp(SDL_Window* window, ushort* red, ushort* green, ushort* blue);

    // Function @ SDL_video.h:1519:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowHitTest(SDL_Window* window, SDL_HitTest callback, void* callback_data);

    // Function @ SDL_video.h:1544:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DestroyWindow(SDL_Window* window);

    // Function @ SDL_video.h:1563:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IsScreenSaverEnabled();

    // Function @ SDL_video.h:1573:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_EnableScreenSaver();

    // Function @ SDL_video.h:1586:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DisableScreenSaver();

    // Function @ SDL_video.h:1612:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_LoadLibrary(CString8U path);

    // Function @ SDL_video.h:1663:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_GL_GetProcAddress(CString8U proc);

    // Function @ SDL_video.h:1670:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GL_UnloadLibrary();

    // Function @ SDL_video.h:1691:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GL_ExtensionSupported(CString8U extension);

    // Function @ SDL_video.h:1702:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GL_ResetAttributes();

    // Function @ SDL_video.h:1720:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_SetAttribute(SDL_GLattr attr, int value);

    // Function @ SDL_video.h:1733:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_GetAttribute(SDL_GLattr attr, long* value);

    // Function @ SDL_video.h:1753:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_GLContext SDL_GL_CreateContext(SDL_Window* window);

    // Function @ SDL_video.h:1768:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_MakeCurrent(SDL_Window* window, SDL_GLContext context);

    // Function @ SDL_video.h:1779:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_GL_GetCurrentWindow();

    // Function @ SDL_video.h:1791:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_GLContext SDL_GL_GetCurrentContext();

    // Function @ SDL_video.h:1813:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GL_GetDrawableSize(SDL_Window* window, long* w, long* h);

    // Function @ SDL_video.h:1848:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_SetSwapInterval(int interval);

    // Function @ SDL_video.h:1865:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_GetSwapInterval();

    // Function @ SDL_video.h:1879:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GL_SwapWindow(SDL_Window* window);

    // Function @ SDL_video.h:1888:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GL_DeleteContext(SDL_GLContext context);

    // Function @ SDL_keyboard.h:62:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_GetKeyboardFocus();

    // Function @ SDL_keyboard.h:90:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern byte* SDL_GetKeyboardState(long* numkeys);

    // Function @ SDL_keyboard.h:101:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Keymod SDL_GetModState();

    // Function @ SDL_keyboard.h:118:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetModState(SDL_Keymod modstate);

    // Function @ SDL_keyboard.h:132:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode);

    // Function @ SDL_keyboard.h:146:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key);

    // Function @ SDL_keyboard.h:171:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetScancodeName(SDL_Scancode scancode);

    // Function @ SDL_keyboard.h:186:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Scancode SDL_GetScancodeFromName(CString8U name);

    // Function @ SDL_keyboard.h:203:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetKeyName(SDL_Keycode key);

    // Function @ SDL_keyboard.h:216:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Keycode SDL_GetKeyFromName(CString8U name);

    // Function @ SDL_keyboard.h:231:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern void SDL_StartTextInput();

    // Function @ SDL_keyboard.h:242:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IsTextInputActive();

    // Function @ SDL_keyboard.h:249:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern void SDL_StopTextInput();

    // Function @ SDL_keyboard.h:259:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetTextInputRect(SDL_Rect* rect);

    // Function @ SDL_keyboard.h:272:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasScreenKeyboardSupport();

    // Function @ SDL_keyboard.h:284:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IsScreenKeyboardShown(SDL_Window* window);

    // Function @ SDL_mouse.h:79:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_GetMouseFocus();

    // Function @ SDL_mouse.h:100:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetMouseState(long* x, long* y);

    // Function @ SDL_mouse.h:129:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetGlobalMouseState(long* x, long* y);

    // Function @ SDL_mouse.h:146:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetRelativeMouseState(long* x, long* y);

    // Function @ SDL_mouse.h:163:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern void SDL_WarpMouseInWindow(SDL_Window* window, int x, int y);

    // Function @ SDL_mouse.h:186:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern int SDL_WarpMouseGlobal(int x, int y);

    // Function @ SDL_mouse.h:209:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetRelativeMouseMode(CBool enabled);

    // Function @ SDL_mouse.h:246:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern int SDL_CaptureMouse(CBool enabled);

    // Function @ SDL_mouse.h:255:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GetRelativeMouseMode();

    // Function @ SDL_mouse.h:296:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern SDL_Cursor* SDL_CreateCursor(byte* data, byte* mask, int w, int h, int hot_x, int hot_y);

    // Function @ SDL_mouse.h:315:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern SDL_Cursor* SDL_CreateColorCursor(SDL_Surface* surface, int hot_x, int hot_y);

    // Function @ SDL_mouse.h:330:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern SDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor id);

    // Function @ SDL_mouse.h:346:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetCursor(SDL_Cursor* cursor);

    // Function @ SDL_mouse.h:358:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern SDL_Cursor* SDL_GetCursor();

    // Function @ SDL_mouse.h:383:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeCursor(SDL_Cursor* cursor);

    // Function @ SDL_mouse.h:403:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern int SDL_ShowCursor(int toggle);

    // Function @ SDL_joystick.h:128:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LockJoysticks();

    // Function @ SDL_joystick.h:141:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockJoysticks();

    // Function @ SDL_joystick.h:152:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_NumJoysticks();

    // Function @ SDL_joystick.h:167:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_JoystickNameForIndex(int device_index);

    // Function @ SDL_joystick.h:189:42 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickGUID SDL_JoystickGetDeviceGUID(int device_index);

    // Function @ SDL_joystick.h:202:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetDeviceVendor(int device_index);

    // Function @ SDL_joystick.h:215:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetDeviceProduct(int device_index);

    // Function @ SDL_joystick.h:228:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetDeviceProductVersion(int device_index);

    // Function @ SDL_joystick.h:240:42 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickType SDL_JoystickGetDeviceType(int device_index);

    // Function @ SDL_joystick.h:253:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickID SDL_JoystickGetDeviceInstanceID(int device_index);

    // Function @ SDL_joystick.h:273:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_Joystick* SDL_JoystickOpen(int device_index);

    // Function @ SDL_joystick.h:284:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_Joystick* SDL_JoystickFromInstanceID(SDL_JoystickID instance_id);

    // Function @ SDL_joystick.h:293:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_Joystick* SDL_JoystickFromPlayerIndex(int player_index);

    // Function @ SDL_joystick.h:300:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickAttachVirtual(SDL_JoystickType type, int naxes, int nbuttons, int nhats);

    // Function @ SDL_joystick.h:312:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickDetachVirtual(int device_index);

    // Function @ SDL_joystick.h:320:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_JoystickIsVirtual(int device_index);

    // Function @ SDL_joystick.h:336:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickSetVirtualAxis(SDL_Joystick* joystick, int axis, short value);

    // Function @ SDL_joystick.h:352:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickSetVirtualButton(SDL_Joystick* joystick, int button, byte value);

    // Function @ SDL_joystick.h:368:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickSetVirtualHat(SDL_Joystick* joystick, int hat, byte value);

    // Function @ SDL_joystick.h:382:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_JoystickName(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:401:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_JoystickSetPlayerIndex(SDL_Joystick* joystick, int player_index);

    // Function @ SDL_joystick.h:416:42 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickGUID SDL_JoystickGetGUID(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:426:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetVendor(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:436:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetProduct(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:446:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetProductVersion(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:457:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_JoystickGetSerial(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:465:42 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickType SDL_JoystickGetType(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:480:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, CString8U pszGUID, int cbGUID);

    // Function @ SDL_joystick.h:494:42 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickGUID SDL_JoystickGetGUIDFromString(CString8U pchGUID);

    // Function @ SDL_joystick.h:506:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_JoystickGetAttached(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:517:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickID SDL_JoystickInstanceID(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:534:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickNumAxes(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:550:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickNumBalls(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:562:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickNumHats(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:574:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickNumButtons(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:584:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_JoystickUpdate();

    // Function @ SDL_joystick.h:607:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickEventState(int state);

    // Function @ SDL_joystick.h:631:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern short SDL_JoystickGetAxis(SDL_Joystick* joystick, int axis);

    // Function @ SDL_joystick.h:646:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_JoystickGetAxisInitialState(SDL_Joystick* joystick, int axis, short* state);

    // Function @ SDL_joystick.h:685:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern byte SDL_JoystickGetHat(SDL_Joystick* joystick, int hat);

    // Function @ SDL_joystick.h:705:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickGetBall(SDL_Joystick* joystick, int ball, long* dx, long* dy);

    // Function @ SDL_joystick.h:718:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern byte SDL_JoystickGetButton(SDL_Joystick* joystick, int button);

    // Function @ SDL_joystick.h:735:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickRumble(SDL_Joystick* joystick, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

    // Function @ SDL_joystick.h:756:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickRumbleTriggers(SDL_Joystick* joystick, ushort left_rumble, ushort right_rumble, uint duration_ms);

    // Function @ SDL_joystick.h:767:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_JoystickHasLED(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:781:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickSetLED(SDL_Joystick* joystick, byte red, byte green, byte blue);

    // Function @ SDL_joystick.h:800:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_JoystickClose(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:811:48 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel(SDL_Joystick* joystick);

    // Function @ SDL_sensor.h:137:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LockSensors();

    // Function @ SDL_sensor.h:138:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockSensors();

    // Function @ SDL_sensor.h:145:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern int SDL_NumSensors();

    // Function @ SDL_sensor.h:153:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_SensorGetDeviceName(int device_index);

    // Function @ SDL_sensor.h:162:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_SensorType SDL_SensorGetDeviceType(int device_index);

    // Function @ SDL_sensor.h:171:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SensorGetDeviceNonPortableType(int device_index);

    // Function @ SDL_sensor.h:179:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_SensorID SDL_SensorGetDeviceInstanceID(int device_index);

    // Function @ SDL_sensor.h:187:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_Sensor* SDL_SensorOpen(int device_index);

    // Function @ SDL_sensor.h:195:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_Sensor* SDL_SensorFromInstanceID(SDL_SensorID instance_id);

    // Function @ SDL_sensor.h:203:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_SensorGetName(SDL_Sensor* sensor);

    // Function @ SDL_sensor.h:212:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_SensorType SDL_SensorGetType(SDL_Sensor* sensor);

    // Function @ SDL_sensor.h:220:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SensorGetNonPortableType(SDL_Sensor* sensor);

    // Function @ SDL_sensor.h:228:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_SensorID SDL_SensorGetInstanceID(SDL_Sensor* sensor);

    // Function @ SDL_sensor.h:240:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SensorGetData(SDL_Sensor* sensor, float* data, int num_values);

    // Function @ SDL_sensor.h:247:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SensorClose(SDL_Sensor* sensor);

    // Function @ SDL_sensor.h:258:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SensorUpdate();

    // Function @ SDL_gamecontroller.h:195:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerAddMapping(CString8U mappingString);

    // Function @ SDL_gamecontroller.h:202:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerNumMappings();

    // Function @ SDL_gamecontroller.h:210:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GameControllerMappingForIndex(int mapping_index);

    // Function @ SDL_gamecontroller.h:224:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GameControllerMappingForGUID(SDL_JoystickGUID guid);

    // Function @ SDL_gamecontroller.h:243:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GameControllerMapping(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:261:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IsGameController(int joystick_index);

    // Function @ SDL_gamecontroller.h:282:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GameControllerNameForIndex(int joystick_index);

    // Function @ SDL_gamecontroller.h:293:48 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerType SDL_GameControllerTypeForIndex(int joystick_index);

    // Function @ SDL_gamecontroller.h:305:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GameControllerMappingForDeviceIndex(int joystick_index);

    // Function @ SDL_gamecontroller.h:329:45 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameController* SDL_GameControllerOpen(int joystick_index);

    // Function @ SDL_gamecontroller.h:340:45 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameController* SDL_GameControllerFromInstanceID(SDL_JoystickID joyid);

    // Function @ SDL_gamecontroller.h:355:45 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameController* SDL_GameControllerFromPlayerIndex(int player_index);

    // Function @ SDL_gamecontroller.h:373:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GameControllerName(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:384:48 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerType SDL_GameControllerGetType(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:402:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GameControllerSetPlayerIndex(SDL_GameController* gamecontroller, int player_index);

    // Function @ SDL_gamecontroller.h:412:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_GameControllerGetVendor(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:422:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_GameControllerGetProduct(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:432:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_GameControllerGetProductVersion(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:443:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GameControllerGetSerial(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:456:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerGetAttached(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:475:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_Joystick* SDL_GameControllerGetJoystick(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:495:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerEventState(int state);

    // Function @ SDL_gamecontroller.h:504:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GameControllerUpdate();

    // Function @ SDL_gamecontroller.h:546:48 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerAxis SDL_GameControllerGetAxisFromString(CString8U str);

    // Function @ SDL_gamecontroller.h:560:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);

    // Function @ SDL_gamecontroller.h:576:1 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);

    // Function @ SDL_gamecontroller.h:590:1 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerHasAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);

    // Function @ SDL_gamecontroller.h:610:1 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern short SDL_GameControllerGetAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);

    // Function @ SDL_gamecontroller.h:654:50 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerButton SDL_GameControllerGetButtonFromString(CString8U str);

    // Function @ SDL_gamecontroller.h:670:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);

    // Function @ SDL_gamecontroller.h:686:1 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);

    // Function @ SDL_gamecontroller.h:699:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerHasButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);

    // Function @ SDL_gamecontroller.h:714:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern byte SDL_GameControllerGetButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);

    // Function @ SDL_gamecontroller.h:720:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerGetNumTouchpads(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:726:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerGetNumTouchpadFingers(SDL_GameController* gamecontroller, int touchpad);

    // Function @ SDL_gamecontroller.h:731:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerGetTouchpadFinger(SDL_GameController* gamecontroller, int touchpad, int finger, byte* state, float* x, float* y, float* pressure);

    // Function @ SDL_gamecontroller.h:740:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerHasSensor(SDL_GameController* gamecontroller, SDL_SensorType type);

    // Function @ SDL_gamecontroller.h:750:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerSetSensorEnabled(SDL_GameController* gamecontroller, SDL_SensorType type, CBool enabled);

    // Function @ SDL_gamecontroller.h:759:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerIsSensorEnabled(SDL_GameController* gamecontroller, SDL_SensorType type);

    // Function @ SDL_gamecontroller.h:783:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerGetSensorData(SDL_GameController* gamecontroller, SDL_SensorType type, float* data, int num_values);

    // Function @ SDL_gamecontroller.h:799:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerRumble(SDL_GameController* gamecontroller, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

    // Function @ SDL_gamecontroller.h:819:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerRumbleTriggers(SDL_GameController* gamecontroller, ushort left_rumble, ushort right_rumble, uint duration_ms);

    // Function @ SDL_gamecontroller.h:828:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerHasLED(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:839:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerSetLED(SDL_GameController* gamecontroller, byte red, byte green, byte blue);

    // Function @ SDL_gamecontroller.h:860:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GameControllerClose(SDL_GameController* gamecontroller);

    // Function @ SDL_touch.h:83:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumTouchDevices();

    // Function @ SDL_touch.h:96:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [DllImport(LibraryName)]
    public static extern SDL_TouchID SDL_GetTouchDevice(int index);

    // Function @ SDL_touch.h:101:45 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [DllImport(LibraryName)]
    public static extern SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);

    // Function @ SDL_touch.h:114:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumTouchFingers(SDL_TouchID touchID);

    // Function @ SDL_touch.h:128:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [DllImport(LibraryName)]
    public static extern SDL_Finger* SDL_GetTouchFinger(SDL_TouchID touchID, int index);

    // Function @ SDL_events.h:665:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_PumpEvents();

    // Function @ SDL_events.h:711:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern int SDL_PeepEvents(SDL_Event* events, int numevents, SDL_eventaction action, uint minType, uint maxType);

    // Function @ SDL_events.h:728:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasEvent(uint type);

    // Function @ SDL_events.h:745:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasEvents(uint minType, uint maxType);

    // Function @ SDL_events.h:765:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FlushEvent(uint type);

    // Function @ SDL_events.h:788:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FlushEvents(uint minType, uint maxType);

    // Function @ SDL_events.h:833:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern int SDL_PollEvent(SDL_Event* @event);

    // Function @ SDL_events.h:853:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern int SDL_WaitEvent(SDL_Event* @event);

    // Function @ SDL_events.h:877:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern int SDL_WaitEventTimeout(SDL_Event* @event, int timeout);

    // Function @ SDL_events.h:910:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern int SDL_PushEvent(SDL_Event* @event);

    // Function @ SDL_events.h:966:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetEventFilter(SDL_EventFilter filter, void* userdata);

    // Function @ SDL_events.h:982:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GetEventFilter(SDL_EventFilter* filter, void** userdata);

    // Function @ SDL_events.h:1009:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_AddEventWatch(SDL_EventFilter filter, void* userdata);

    // Function @ SDL_events.h:1023:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DelEventWatch(SDL_EventFilter filter, void* userdata);

    // Function @ SDL_events.h:1040:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FilterEvents(SDL_EventFilter filter, void* userdata);

    // Function @ SDL_events.h:1066:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern byte SDL_EventState(uint type, int state);

    // Function @ SDL_events.h:1088:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_RegisterEvents(int numevents);

    // Function @ SDL_filesystem.h:78:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_filesystem.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetBasePath();

    // Function @ SDL_filesystem.h:135:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_filesystem.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetPrefPath(CString8U org, CString8U app);

    // Function @ SDL_haptic.h:833:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_NumHaptics();

    // Function @ SDL_haptic.h:849:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_HapticName(int device_index);

    // Function @ SDL_haptic.h:876:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern SDL_Haptic* SDL_HapticOpen(int device_index);

    // Function @ SDL_haptic.h:890:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticOpened(int device_index);

    // Function @ SDL_haptic.h:904:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticIndex(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:915:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_MouseIsHaptic();

    // Function @ SDL_haptic.h:928:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern SDL_Haptic* SDL_HapticOpenFromMouse();

    // Function @ SDL_haptic.h:942:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickIsHaptic(SDL_Joystick* joystick);

    // Function @ SDL_haptic.h:965:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern SDL_Haptic* SDL_HapticOpenFromJoystick(SDL_Joystick* joystick);

    // Function @ SDL_haptic.h:975:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern void SDL_HapticClose(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:993:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticNumEffects(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1010:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticNumEffectsPlaying(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1024:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_HapticQuery(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1037:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticNumAxes(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1053:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticEffectSupported(SDL_Haptic* haptic, SDL_HapticEffect* effect);

    // Function @ SDL_haptic.h:1070:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticNewEffect(SDL_Haptic* haptic, SDL_HapticEffect* effect);

    // Function @ SDL_haptic.h:1094:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticUpdateEffect(SDL_Haptic* haptic, int effect, SDL_HapticEffect* data);

    // Function @ SDL_haptic.h:1120:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticRunEffect(SDL_Haptic* haptic, int effect, uint iterations);

    // Function @ SDL_haptic.h:1139:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticStopEffect(SDL_Haptic* haptic, int effect);

    // Function @ SDL_haptic.h:1155:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern void SDL_HapticDestroyEffect(SDL_Haptic* haptic, int effect);

    // Function @ SDL_haptic.h:1173:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticGetEffectStatus(SDL_Haptic* haptic, int effect);

    // Function @ SDL_haptic.h:1195:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticSetGain(SDL_Haptic* haptic, int gain);

    // Function @ SDL_haptic.h:1212:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticSetAutocenter(SDL_Haptic* haptic, int autocenter);

    // Function @ SDL_haptic.h:1230:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticPause(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1243:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticUnpause(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1252:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticStopAll(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1266:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticRumbleSupported(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1282:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticRumbleInit(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1297:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticRumblePlay(SDL_Haptic* haptic, float strength, uint length);

    // Function @ SDL_haptic.h:1310:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticRumbleStop(SDL_Haptic* haptic);

    // Function @ SDL_hints.h:1748:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_SetHintWithPriority(CString8U name, CString8U value, SDL_HintPriority priority);

    // Function @ SDL_hints.h:1766:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_SetHint(CString8U name, CString8U value);

    // Function @ SDL_hints.h:1778:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetHint(CString8U name);

    // Function @ SDL_hints.h:1793:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GetHintBoolean(CString8U name, CBool default_value);

    // Function @ SDL_hints.h:1842:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern void SDL_ClearHints();

    // Function @ SDL_log.h:121:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogSetAllPriority(SDL_LogPriority priority);

    // Function @ SDL_log.h:132:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogSetPriority(int category, SDL_LogPriority priority);

    // Function @ SDL_log.h:143:41 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern SDL_LogPriority SDL_LogGetPriority(int category);

    // Function @ SDL_log.h:153:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogResetPriorities();

    // Function @ SDL_log.h:172:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_Log(CString8U fmt);

    // Function @ SDL_log.h:191:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogVerbose(int category, CString8U fmt);

    // Function @ SDL_log.h:210:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogDebug(int category, CString8U fmt);

    // Function @ SDL_log.h:229:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogInfo(int category, CString8U fmt);

    // Function @ SDL_log.h:248:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogWarn(int category, CString8U fmt);

    // Function @ SDL_log.h:267:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogError(int category, CString8U fmt);

    // Function @ SDL_log.h:286:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogCritical(int category, CString8U fmt);

    // Function @ SDL_log.h:306:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogMessage(int category, SDL_LogPriority priority, CString8U fmt);

    // Function @ SDL_log.h:329:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogMessageV(int category, SDL_LogPriority priority, CString8U fmt, IntPtr ap);

    // Function @ SDL_log.h:355:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogGetOutputFunction(SDL_LogOutputFunction* callback, void** userdata);

    // Function @ SDL_log.h:365:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void* userdata);

    // Function @ SDL_messagebox.h:140:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [DllImport(LibraryName)]
    public static extern int SDL_ShowMessageBox(SDL_MessageBoxData* messageboxdata, long* buttonid);

    // Function @ SDL_messagebox.h:180:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [DllImport(LibraryName)]
    public static extern int SDL_ShowSimpleMessageBox(uint flags, CString8U title, CString8U message, SDL_Window* window);

    // Function @ SDL_power.h:76:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_power.h)
    [DllImport(LibraryName)]
    public static extern SDL_PowerState SDL_GetPowerInfo(long* secs, long* pct);

    // Function @ SDL_render.h:169:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumRenderDrivers();

    // Function @ SDL_render.h:183:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRenderDriverInfo(int index, SDL_RendererInfo* info);

    // Function @ SDL_render.h:201:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_CreateWindowAndRenderer(int width, int height, uint window_flags, SDL_Window** window, SDL_Renderer** renderer);

    // Function @ SDL_render.h:221:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Renderer* SDL_CreateRenderer(SDL_Window* window, int index, uint flags);

    // Function @ SDL_render.h:241:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Renderer* SDL_CreateSoftwareRenderer(SDL_Surface* surface);

    // Function @ SDL_render.h:252:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Renderer* SDL_GetRenderer(SDL_Window* window);

    // Function @ SDL_render.h:265:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRendererInfo(SDL_Renderer* renderer, SDL_RendererInfo* info);

    // Function @ SDL_render.h:285:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRendererOutputSize(SDL_Renderer* renderer, long* w, long* h);

    // Function @ SDL_render.h:308:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Texture* SDL_CreateTexture(SDL_Renderer* renderer, uint format, int access, int w, int h);

    // Function @ SDL_render.h:335:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Texture* SDL_CreateTextureFromSurface(SDL_Renderer* renderer, SDL_Surface* surface);

    // Function @ SDL_render.h:353:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_QueryTexture(SDL_Texture* texture, uint* format, long* access, long* w, long* h);

    // Function @ SDL_render.h:379:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetTextureColorMod(SDL_Texture* texture, byte r, byte g, byte b);

    // Function @ SDL_render.h:396:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetTextureColorMod(SDL_Texture* texture, byte* r, byte* g, byte* b);

    // Function @ SDL_render.h:419:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetTextureAlphaMod(SDL_Texture* texture, byte alpha);

    // Function @ SDL_render.h:433:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetTextureAlphaMod(SDL_Texture* texture, byte* alpha);

    // Function @ SDL_render.h:450:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode blendMode);

    // Function @ SDL_render.h:463:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode* blendMode);

    // Function @ SDL_render.h:477:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode scaleMode);

    // Function @ SDL_render.h:489:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode* scaleMode);

    // Function @ SDL_render.h:542:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpdateTexture(SDL_Texture* texture, SDL_Rect* rect, void* pixels, int pitch);

    // Function @ SDL_render.h:573:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpdateYUVTexture(SDL_Texture* texture, SDL_Rect* rect, byte* Yplane, int Ypitch, byte* Uplane, int Upitch, byte* Vplane, int Vpitch);

    // Function @ SDL_render.h:627:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LockTexture(SDL_Texture* texture, SDL_Rect* rect, void** pixels, long* pitch);

    // Function @ SDL_render.h:661:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LockTextureToSurface(SDL_Texture* texture, SDL_Rect* rect, SDL_Surface** surface);

    // Function @ SDL_render.h:680:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockTexture(SDL_Texture* texture);

    // Function @ SDL_render.h:692:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_RenderTargetSupported(SDL_Renderer* renderer);

    // Function @ SDL_render.h:716:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture);

    // Function @ SDL_render.h:732:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Texture* SDL_GetRenderTarget(SDL_Renderer* renderer);

    // Function @ SDL_render.h:760:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderSetLogicalSize(SDL_Renderer* renderer, int w, int h);

    // Function @ SDL_render.h:777:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RenderGetLogicalSize(SDL_Renderer* renderer, long* w, long* h);

    // Function @ SDL_render.h:796:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderSetIntegerScale(SDL_Renderer* renderer, CBool enable);

    // Function @ SDL_render.h:826:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderSetViewport(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:837:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RenderGetViewport(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:853:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderSetClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:867:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RenderGetClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:882:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_RenderIsClipEnabled(SDL_Renderer* renderer);

    // Function @ SDL_render.h:907:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderSetScale(SDL_Renderer* renderer, float scaleX, float scaleY);

    // Function @ SDL_render.h:921:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RenderGetScale(SDL_Renderer* renderer, float* scaleX, float* scaleY);

    // Function @ SDL_render.h:951:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetRenderDrawColor(SDL_Renderer* renderer, byte r, byte g, byte b, byte a);

    // Function @ SDL_render.h:972:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRenderDrawColor(SDL_Renderer* renderer, byte* r, byte* g, byte* b, byte* a);

    // Function @ SDL_render.h:996:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode blendMode);

    // Function @ SDL_render.h:1009:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode* blendMode);

    // Function @ SDL_render.h:1026:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderClear(SDL_Renderer* renderer);

    // Function @ SDL_render.h:1051:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawPoint(SDL_Renderer* renderer, int x, int y);

    // Function @ SDL_render.h:1075:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawPoints(SDL_Renderer* renderer, SDL_Point* points, int count);

    // Function @ SDL_render.h:1106:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawLine(SDL_Renderer* renderer, int x1, int y1, int x2, int y2);

    // Function @ SDL_render.h:1132:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawLines(SDL_Renderer* renderer, SDL_Point* points, int count);

    // Function @ SDL_render.h:1156:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawRect(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:1180:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawRects(SDL_Renderer* renderer, SDL_Rect* rects, int count);

    // Function @ SDL_render.h:1208:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderFillRect(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:1231:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderFillRects(SDL_Renderer* renderer, SDL_Rect* rects, int count);

    // Function @ SDL_render.h:1261:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderCopy(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_Rect* dstrect);

    // Function @ SDL_render.h:1303:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderCopyEx(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_Rect* dstrect, double angle, SDL_Point* center, SDL_RendererFlip flip);

    // Function @ SDL_render.h:1320:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawPointF(SDL_Renderer* renderer, float x, float y);

    // Function @ SDL_render.h:1331:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawPointsF(SDL_Renderer* renderer, SDL_FPoint* points, int count);

    // Function @ SDL_render.h:1345:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawLineF(SDL_Renderer* renderer, float x1, float y1, float x2, float y2);

    // Function @ SDL_render.h:1357:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawLinesF(SDL_Renderer* renderer, SDL_FPoint* points, int count);

    // Function @ SDL_render.h:1369:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawRectF(SDL_Renderer* renderer, SDL_FRect* rect);

    // Function @ SDL_render.h:1381:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawRectsF(SDL_Renderer* renderer, SDL_FRect* rects, int count);

    // Function @ SDL_render.h:1394:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderFillRectF(SDL_Renderer* renderer, SDL_FRect* rect);

    // Function @ SDL_render.h:1406:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderFillRectsF(SDL_Renderer* renderer, SDL_FRect* rects, int count);

    // Function @ SDL_render.h:1422:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderCopyF(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_FRect* dstrect);

    // Function @ SDL_render.h:1446:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderCopyExF(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_FRect* dstrect, double angle, SDL_FPoint* center, SDL_RendererFlip flip);

    // Function @ SDL_render.h:1525:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderReadPixels(SDL_Renderer* renderer, SDL_Rect* rect, uint format, void* pixels, int pitch);

    // Function @ SDL_render.h:1563:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RenderPresent(SDL_Renderer* renderer);

    // Function @ SDL_render.h:1576:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DestroyTexture(SDL_Texture* texture);

    // Function @ SDL_render.h:1585:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DestroyRenderer(SDL_Renderer* renderer);

    // Function @ SDL_render.h:1616:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderFlush(SDL_Renderer* renderer);

    // Function @ SDL_render.h:1654:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_BindTexture(SDL_Texture* texture, float* texw, float* texh);

    // Function @ SDL_render.h:1667:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_UnbindTexture(SDL_Texture* texture);

    // Function @ SDL_system.h:454:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_system.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IsTablet();

    // Function @ SDL_timer.h:50:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetTicks();

    // Function @ SDL_timer.h:79:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_GetPerformanceCounter();

    // Function @ SDL_timer.h:90:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_GetPerformanceFrequency();

    // Function @ SDL_timer.h:101:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern void SDL_Delay(uint ms);

    // Function @ SDL_timer.h:148:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern SDL_TimerID SDL_AddTimer(uint interval, SDL_TimerCallback callback, void* param);

    // Function @ SDL_timer.h:161:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_RemoveTimer(SDL_TimerID id);

    // Function @ SDL_version.h:123:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_version.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetVersion(SDL_version* ver);

    // Function @ SDL_version.h:150:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_version.h)
    [DllImport(LibraryName)]
    public static extern CString8U SDL_GetRevision();

    // Function @ SDL_version.h:161:44 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_version.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRevisionNumber();

    // Function @ SDL_locale.h:89:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_locale.h)
    [DllImport(LibraryName)]
    public static extern SDL_Locale* SDL_GetPreferredLocales();

    // Function @ SDL_misc.h:69:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_misc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_OpenURL(CString8U url);

    // Function @ SDL.h:140:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL.h)
    [DllImport(LibraryName)]
    public static extern int SDL_Init(uint flags);

    // Function @ SDL.h:155:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL.h)
    [DllImport(LibraryName)]
    public static extern int SDL_InitSubSystem(uint flags);

    // Function @ SDL.h:175:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL.h)
    [DllImport(LibraryName)]
    public static extern void SDL_QuitSubSystem(uint flags);

    // Function @ SDL.h:189:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_WasInit(uint flags);

    // Function @ SDL.h:211:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL.h)
    [DllImport(LibraryName)]
    public static extern void SDL_Quit();

    // FunctionPointer @ SDL_video.h:1475:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_HitTest
    {
        public delegate* unmanaged<SDL_Window*, SDL_Point*, void*, SDL_HitTestResult> Pointer;
    }

    // FunctionPointer @ SDL_events.h:924:24 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_EventFilter
    {
        public delegate* unmanaged<void*, SDL_Event*, int> Pointer;
    }

    // FunctionPointer @ SDL_log.h:343:24 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_LogOutputFunction
    {
        public delegate* unmanaged<void*, int, SDL_LogPriority, CString8U, void> Pointer;
    }

    // FunctionPointer @ SDL_timer.h:111:27 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_TimerCallback
    {
        public delegate* unmanaged<uint, void*, uint> Pointer;
    }

    // FunctionPointer @ SDL_rwops.h:60:23 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDL_SDL_RWopsPtr_Long
    {
        public delegate* unmanaged<SDL_RWops*, long> Pointer;
    }

    // FunctionPointer @ SDL_rwops.h:68:23 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDL_SDL_RWopsPtr_Long_Int_Long
    {
        public delegate* unmanaged<SDL_RWops*, long, int, long> Pointer;
    }

    // FunctionPointer @ SDL_rwops.h:77:23 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDL_SDL_RWopsPtr_VoidPtr_Ulong_Ulong_Ulong
    {
        public delegate* unmanaged<SDL_RWops*, void*, ulong, ulong, ulong> Pointer;
    }

    // FunctionPointer @ SDL_rwops.h:94:20 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDL_SDL_RWopsPtr_Int
    {
        public delegate* unmanaged<SDL_RWops*, int> Pointer;
    }

    // FunctionPointer @ SDL_audio.h:165:25 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AudioCallback
    {
        public delegate* unmanaged<void*, byte*, int, void> Pointer;
    }

    // Struct @ SDL_rwops.h:149:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
    public struct SDL_RWops
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public FnPtr_SDL_SDL_RWopsPtr_Long size;

        [FieldOffset(8)] // size = 8, padding = 0
        public FnPtr_SDL_SDL_RWopsPtr_Long_Int_Long seek;

        [FieldOffset(16)] // size = 8, padding = 0
        public FnPtr_SDL_SDL_RWopsPtr_VoidPtr_Ulong_Ulong_Ulong read;

        [FieldOffset(24)] // size = 8, padding = 0
        public FnPtr_SDL_SDL_RWopsPtr_VoidPtr_Ulong_Ulong_Ulong write;

        [FieldOffset(32)] // size = 8, padding = 0
        public FnPtr_SDL_SDL_RWopsPtr_Int close;

        [FieldOffset(40)] // size = 4, padding = 4
        public uint type;

        [FieldOffset(48)] // size = 24, padding = 0
        public SDL_RWops_hidden hidden;

        // Union @ SDL_rwops.h:97:5 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct SDL_RWops_hidden
        {
            [FieldOffset(0)] // size = 24, padding = 0
            public SDL_RWops_hidden_mem mem;

            [FieldOffset(0)] // size = 16, padding = 8
            public SDL_RWops_hidden_unknown unknown;

            // Struct @ SDL_rwops.h:136:9 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
            [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
            public struct SDL_RWops_hidden_mem
            {
                [FieldOffset(0)] // size = 8, padding = 0
                public byte* @base;

                [FieldOffset(8)] // size = 8, padding = 0
                public byte* here;

                [FieldOffset(16)] // size = 8, padding = 0
                public byte* stop;
            }

            // Struct @ SDL_rwops.h:142:9 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
            [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
            public struct SDL_RWops_hidden_unknown
            {
                [FieldOffset(0)] // size = 8, padding = 0
                public void* data1;

                [FieldOffset(8)] // size = 8, padding = 0
                public void* data2;
            }
        }
    }

    // Struct @ SDL_audio.h:191:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_AudioSpec
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int freq;

        [FieldOffset(4)] // size = 2, padding = 0
        public SDL_AudioFormat format;

        [FieldOffset(6)] // size = 1, padding = 0
        public byte channels;

        [FieldOffset(7)] // size = 1, padding = 0
        public byte silence;

        [FieldOffset(8)] // size = 2, padding = 0
        public ushort samples;

        [FieldOffset(10)] // size = 2, padding = 0
        public ushort padding;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint size;

        [FieldOffset(16)] // size = 8, padding = 0
        public SDL_AudioCallback callback;

        [FieldOffset(24)] // size = 8, padding = 0
        public void* userdata;
    }

    // Struct @ SDL_pixels.h:345:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_PixelFormat
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint format;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_Palette* palette;

        [FieldOffset(16)] // size = 1, padding = 0
        public byte BitsPerPixel;

        [FieldOffset(17)] // size = 1, padding = 0
        public byte BytesPerPixel;

        [FieldOffset(18)] // size = 2, padding = 0
        public fixed byte _padding[2 / 1]; // Uint8[2]

        public Span<byte> padding
        {
            get
            {
                fixed (SDL_PixelFormat* @this = &this)
                {
                    var pointer = &@this->_padding[0];
                    var span = new Span<byte>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(20)] // size = 4, padding = 0
        public uint Rmask;

        [FieldOffset(24)] // size = 4, padding = 0
        public uint Gmask;

        [FieldOffset(28)] // size = 4, padding = 0
        public uint Bmask;

        [FieldOffset(32)] // size = 4, padding = 0
        public uint Amask;

        [FieldOffset(36)] // size = 1, padding = 0
        public byte Rloss;

        [FieldOffset(37)] // size = 1, padding = 0
        public byte Gloss;

        [FieldOffset(38)] // size = 1, padding = 0
        public byte Bloss;

        [FieldOffset(39)] // size = 1, padding = 0
        public byte Aloss;

        [FieldOffset(40)] // size = 1, padding = 0
        public byte Rshift;

        [FieldOffset(41)] // size = 1, padding = 0
        public byte Gshift;

        [FieldOffset(42)] // size = 1, padding = 0
        public byte Bshift;

        [FieldOffset(43)] // size = 1, padding = 0
        public byte Ashift;

        [FieldOffset(44)] // size = 4, padding = 0
        public int refcount;

        [FieldOffset(48)] // size = 8, padding = 0
        public SDL_PixelFormat* next;
    }

    // Struct @ SDL_pixels.h:319:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_Palette
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int ncolors;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_Color* colors;

        [FieldOffset(16)] // size = 4, padding = 0
        public uint version;

        [FieldOffset(20)] // size = 4, padding = 0
        public int refcount;
    }

    // Struct @ SDL_pixels.h:310:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
    public struct SDL_Color
    {
        [FieldOffset(0)] // size = 1, padding = 0
        public byte r;

        [FieldOffset(1)] // size = 1, padding = 0
        public byte g;

        [FieldOffset(2)] // size = 1, padding = 0
        public byte b;

        [FieldOffset(3)] // size = 1, padding = 0
        public byte a;
    }

    // Struct @ SDL_rect.h:81:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_Rect
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int x;

        [FieldOffset(4)] // size = 4, padding = 0
        public int y;

        [FieldOffset(8)] // size = 4, padding = 0
        public int w;

        [FieldOffset(12)] // size = 4, padding = 0
        public int h;
    }

    // Struct @ SDL_rect.h:52:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_Point
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int x;

        [FieldOffset(4)] // size = 4, padding = 0
        public int y;
    }

    // Struct @ SDL_surface.h:95:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public struct SDL_Surface
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint flags;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_PixelFormat* format;

        [FieldOffset(16)] // size = 4, padding = 0
        public int w;

        [FieldOffset(20)] // size = 4, padding = 0
        public int h;

        [FieldOffset(24)] // size = 4, padding = 4
        public int pitch;

        [FieldOffset(32)] // size = 8, padding = 0
        public void* pixels;

        [FieldOffset(40)] // size = 8, padding = 0
        public void* userdata;

        [FieldOffset(48)] // size = 4, padding = 4
        public int locked;

        [FieldOffset(56)] // size = 8, padding = 0
        public void* list_blitmap;

        [FieldOffset(64)] // size = 16, padding = 0
        public SDL_Rect clip_rect;

        [FieldOffset(80)] // size = 8, padding = 0
        public SDL_BlitMap* map;

        [FieldOffset(88)] // size = 4, padding = 4
        public int refcount;
    }

    // Struct @ SDL_video.h:60:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_DisplayMode
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint format;

        [FieldOffset(4)] // size = 4, padding = 0
        public int w;

        [FieldOffset(8)] // size = 4, padding = 0
        public int h;

        [FieldOffset(12)] // size = 4, padding = 0
        public int refresh_rate;

        [FieldOffset(16)] // size = 8, padding = 0
        public void* driverdata;
    }

    // Struct @ SDL_joystick.h:74:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
    public struct SDL_JoystickGUID
    {
        [FieldOffset(0)] // size = 16, padding = 0
        public fixed byte _data[16 / 1]; // Uint8[16]

        public Span<byte> data
        {
            get
            {
                fixed (SDL_JoystickGUID* @this = &this)
                {
                    var pointer = &@this->_data[0];
                    var span = new Span<byte>(pointer, 16);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_gamecontroller.h:99:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_GameControllerButtonBind
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public SDL_GameControllerBindType bindType;

        [FieldOffset(4)] // size = 8, padding = 0
        public SDL_GameControllerButtonBind_value value;

        // Union @ SDL_gamecontroller.h:89:5 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct SDL_GameControllerButtonBind_value
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int button;

            [FieldOffset(0)] // size = 4, padding = 0
            public int axis;

            [FieldOffset(0)] // size = 8, padding = 0
            public SDL_GameControllerButtonBind_value_hat hat;

            // Struct @ SDL_gamecontroller.h:93:9 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
            [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
            public struct SDL_GameControllerButtonBind_value_hat
            {
                [FieldOffset(0)] // size = 4, padding = 0
                public int hat;

                [FieldOffset(4)] // size = 4, padding = 0
                public int hat_mask;
            }
        }
    }

    // Struct @ SDL_touch.h:58:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_Finger
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public SDL_FingerID id;

        [FieldOffset(8)] // size = 4, padding = 0
        public float x;

        [FieldOffset(12)] // size = 4, padding = 0
        public float y;

        [FieldOffset(16)] // size = 4, padding = 4
        public float pressure;
    }

    // Struct @ SDL_events.h:637:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_Event
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(0)] // size = 8, padding = 0
        public SDL_CommonEvent common;

        [FieldOffset(0)] // size = 20, padding = 0
        public SDL_DisplayEvent display;

        [FieldOffset(0)] // size = 24, padding = 0
        public SDL_WindowEvent window;

        [FieldOffset(0)] // size = 32, padding = 0
        public SDL_KeyboardEvent key;

        [FieldOffset(0)] // size = 52, padding = 0
        public SDL_TextEditingEvent edit;

        [FieldOffset(0)] // size = 44, padding = 0
        public SDL_TextInputEvent text;

        [FieldOffset(0)] // size = 36, padding = 0
        public SDL_MouseMotionEvent motion;

        [FieldOffset(0)] // size = 28, padding = 0
        public SDL_MouseButtonEvent button;

        [FieldOffset(0)] // size = 28, padding = 0
        public SDL_MouseWheelEvent wheel;

        [FieldOffset(0)] // size = 20, padding = 0
        public SDL_JoyAxisEvent jaxis;

        [FieldOffset(0)] // size = 20, padding = 0
        public SDL_JoyBallEvent jball;

        [FieldOffset(0)] // size = 16, padding = 0
        public SDL_JoyHatEvent jhat;

        [FieldOffset(0)] // size = 16, padding = 0
        public SDL_JoyButtonEvent jbutton;

        [FieldOffset(0)] // size = 12, padding = 0
        public SDL_JoyDeviceEvent jdevice;

        [FieldOffset(0)] // size = 20, padding = 0
        public SDL_ControllerAxisEvent caxis;

        [FieldOffset(0)] // size = 16, padding = 0
        public SDL_ControllerButtonEvent cbutton;

        [FieldOffset(0)] // size = 12, padding = 0
        public SDL_ControllerDeviceEvent cdevice;

        [FieldOffset(0)] // size = 32, padding = 0
        public SDL_ControllerTouchpadEvent ctouchpad;

        [FieldOffset(0)] // size = 28, padding = 0
        public SDL_ControllerSensorEvent csensor;

        [FieldOffset(0)] // size = 16, padding = 0
        public SDL_AudioDeviceEvent adevice;

        [FieldOffset(0)] // size = 36, padding = 0
        public SDL_SensorEvent sensor;

        [FieldOffset(0)] // size = 8, padding = 0
        public SDL_QuitEvent quit;

        [FieldOffset(0)] // size = 32, padding = 0
        public SDL_UserEvent user;

        [FieldOffset(0)] // size = 16, padding = 0
        public SDL_SysWMEvent syswm;

        [FieldOffset(0)] // size = 48, padding = 0
        public SDL_TouchFingerEvent tfinger;

        [FieldOffset(0)] // size = 40, padding = 0
        public SDL_MultiGestureEvent mgesture;

        [FieldOffset(0)] // size = 40, padding = 0
        public SDL_DollarGestureEvent dgesture;

        [FieldOffset(0)] // size = 24, padding = 0
        public SDL_DropEvent drop;

        [FieldOffset(0)] // size = 56, padding = 0
        public fixed byte _padding[56 / 1]; // Uint8[56]

        public Span<byte> padding
        {
            get
            {
                fixed (SDL_Event* @this = &this)
                {
                    var pointer = &@this->_padding[0];
                    var span = new Span<byte>(pointer, 56);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_haptic.h:819:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
    public struct SDL_HapticEffect
    {
        [FieldOffset(0)] // size = 2, padding = 0
        public ushort type;

        [FieldOffset(0)] // size = 40, padding = 0
        public SDL_HapticConstant constant;

        [FieldOffset(0)] // size = 48, padding = 0
        public SDL_HapticPeriodic periodic;

        [FieldOffset(0)] // size = 68, padding = 0
        public SDL_HapticCondition condition;

        [FieldOffset(0)] // size = 44, padding = 0
        public SDL_HapticRamp ramp;

        [FieldOffset(0)] // size = 12, padding = 0
        public SDL_HapticLeftRight leftright;

        [FieldOffset(0)] // size = 56, padding = 16
        public SDL_HapticCustom custom;
    }

    // Struct @ SDL_messagebox.h:105:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_MessageBoxData
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint flags;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_Window* window;

        [FieldOffset(16)] // size = 8, padding = 0
        public CString8U title;

        [FieldOffset(24)] // size = 8, padding = 0
        public CString8U message;

        [FieldOffset(32)] // size = 4, padding = 4
        public int numbuttons;

        [FieldOffset(40)] // size = 8, padding = 0
        public SDL_MessageBoxButtonData* buttons;

        [FieldOffset(48)] // size = 8, padding = 0
        public SDL_MessageBoxColorScheme* colorScheme;
    }

    // Struct @ SDL_render.h:86:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
    public struct SDL_RendererInfo
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint flags;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint num_texture_formats;

        [FieldOffset(16)] // size = 64, padding = 0
        public fixed uint _texture_formats[64 / 4]; // Uint32[16]

        public Span<uint> texture_formats
        {
            get
            {
                fixed (SDL_RendererInfo* @this = &this)
                {
                    var pointer = &@this->_texture_formats[0];
                    var span = new Span<uint>(pointer, 16);
                    return span;
                }
            }
        }

        [FieldOffset(80)] // size = 4, padding = 0
        public int max_texture_width;

        [FieldOffset(84)] // size = 4, padding = 0
        public int max_texture_height;
    }

    // Struct @ SDL_rect.h:64:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_FPoint
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public float x;

        [FieldOffset(4)] // size = 4, padding = 0
        public float y;
    }

    // Struct @ SDL_rect.h:93:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_FRect
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public float x;

        [FieldOffset(4)] // size = 4, padding = 0
        public float y;

        [FieldOffset(8)] // size = 4, padding = 0
        public float w;

        [FieldOffset(12)] // size = 4, padding = 0
        public float h;
    }

    // Struct @ SDL_version.h:56:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_version.h)
    [StructLayout(LayoutKind.Explicit, Size = 3, Pack = 1)]
    public struct SDL_version
    {
        [FieldOffset(0)] // size = 1, padding = 0
        public byte major;

        [FieldOffset(1)] // size = 1, padding = 0
        public byte minor;

        [FieldOffset(2)] // size = 1, padding = 0
        public byte patch;
    }

    // Struct @ SDL_locale.h:47:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_locale.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_Locale
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U language;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U country;
    }

    // Struct @ SDL_events.h:181:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_CommonEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;
    }

    // Struct @ SDL_events.h:196:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct SDL_DisplayEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint display;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte @event;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 4, padding = 0
        public int data1;
    }

    // Struct @ SDL_events.h:212:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
    public struct SDL_WindowEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte @event;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 4, padding = 0
        public int data1;

        [FieldOffset(20)] // size = 4, padding = 0
        public int data2;
    }

    // Struct @ SDL_events.h:227:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public struct SDL_KeyboardEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte state;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte repeat;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 16, padding = 0
        public SDL_Keysym keysym;
    }

    // Struct @ SDL_events.h:241:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 52, Pack = 4)]
    public struct SDL_TextEditingEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 32, padding = 0
        public fixed byte _text[32 / 1]; // char[32]

        public string text
        {
            get
            {
                fixed (SDL_TextEditingEvent* @this = &this)
                {
                    var pointer = &@this->_text[0];
                    var cString = new CString8U(pointer);
                    return Runtime.String8U(cString);
                }
            }
        }

        [FieldOffset(44)] // size = 4, padding = 0
        public int start;

        [FieldOffset(48)] // size = 4, padding = 0
        public int length;
    }

    // Struct @ SDL_events.h:254:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 44, Pack = 4)]
    public struct SDL_TextInputEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 32, padding = 0
        public fixed byte _text[32 / 1]; // char[32]

        public string text
        {
            get
            {
                fixed (SDL_TextInputEvent* @this = &this)
                {
                    var pointer = &@this->_text[0];
                    var cString = new CString8U(pointer);
                    return Runtime.String8U(cString);
                }
            }
        }
    }

    // Struct @ SDL_events.h:270:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public struct SDL_MouseMotionEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint which;

        [FieldOffset(16)] // size = 4, padding = 0
        public uint state;

        [FieldOffset(20)] // size = 4, padding = 0
        public int x;

        [FieldOffset(24)] // size = 4, padding = 0
        public int y;

        [FieldOffset(28)] // size = 4, padding = 0
        public int xrel;

        [FieldOffset(32)] // size = 4, padding = 0
        public int yrel;
    }

    // Struct @ SDL_events.h:287:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct SDL_MouseButtonEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint which;

        [FieldOffset(16)] // size = 1, padding = 0
        public byte button;

        [FieldOffset(17)] // size = 1, padding = 0
        public byte state;

        [FieldOffset(18)] // size = 1, padding = 0
        public byte clicks;

        [FieldOffset(19)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(20)] // size = 4, padding = 0
        public int x;

        [FieldOffset(24)] // size = 4, padding = 0
        public int y;
    }

    // Struct @ SDL_events.h:301:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct SDL_MouseWheelEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint which;

        [FieldOffset(16)] // size = 4, padding = 0
        public int x;

        [FieldOffset(20)] // size = 4, padding = 0
        public int y;

        [FieldOffset(24)] // size = 4, padding = 0
        public uint direction;
    }

    // Struct @ SDL_events.h:317:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct SDL_JoyAxisEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte axis;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 2, padding = 0
        public short value;

        [FieldOffset(18)] // size = 2, padding = 0
        public ushort padding4;
    }

    // Struct @ SDL_events.h:333:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct SDL_JoyBallEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte ball;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 2, padding = 0
        public short xrel;

        [FieldOffset(18)] // size = 2, padding = 0
        public short yrel;
    }

    // Struct @ SDL_events.h:353:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_JoyHatEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte hat;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte value;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding2;
    }

    // Struct @ SDL_events.h:367:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_JoyButtonEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte button;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte state;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding2;
    }

    // Struct @ SDL_events.h:377:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_JoyDeviceEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public int which;
    }

    // Struct @ SDL_events.h:394:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct SDL_ControllerAxisEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte axis;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 2, padding = 0
        public short value;

        [FieldOffset(18)] // size = 2, padding = 0
        public ushort padding4;
    }

    // Struct @ SDL_events.h:409:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_ControllerButtonEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte button;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte state;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding2;
    }

    // Struct @ SDL_events.h:420:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_ControllerDeviceEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public int which;
    }

    // Struct @ SDL_events.h:435:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public struct SDL_ControllerTouchpadEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 4, padding = 0
        public int touchpad;

        [FieldOffset(16)] // size = 4, padding = 0
        public int finger;

        [FieldOffset(20)] // size = 4, padding = 0
        public float x;

        [FieldOffset(24)] // size = 4, padding = 0
        public float y;

        [FieldOffset(28)] // size = 4, padding = 0
        public float pressure;
    }

    // Struct @ SDL_events.h:447:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct SDL_ControllerSensorEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 4, padding = 0
        public int sensor;

        [FieldOffset(16)] // size = 12, padding = 0
        public fixed uint _data[12 / 4]; // float[3]

        public Span<float> data
        {
            get
            {
                fixed (SDL_ControllerSensorEvent* @this = &this)
                {
                    var pointer = &@this->_data[0];
                    var span = new Span<float>(pointer, 3);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_events.h:461:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_AudioDeviceEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte iscapture;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;
    }

    // Struct @ SDL_events.h:538:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public struct SDL_SensorEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public int which;

        [FieldOffset(12)] // size = 24, padding = 0
        public fixed uint _data[24 / 4]; // float[6]

        public Span<float> data
        {
            get
            {
                fixed (SDL_SensorEvent* @this = &this)
                {
                    var pointer = &@this->_data[0];
                    var span = new Span<float>(pointer, 6);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_events.h:547:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_QuitEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;
    }

    // Struct @ SDL_events.h:569:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_UserEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 4, padding = 0
        public int code;

        [FieldOffset(16)] // size = 8, padding = 0
        public void* data1;

        [FieldOffset(24)] // size = 8, padding = 0
        public void* data2;
    }

    // Struct @ SDL_events.h:586:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_SysWMEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_SysWMmsg* msg;
    }

    // Struct @ SDL_events.h:479:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_TouchFingerEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_TouchID touchId;

        [FieldOffset(16)] // size = 8, padding = 0
        public SDL_FingerID fingerId;

        [FieldOffset(24)] // size = 4, padding = 0
        public float x;

        [FieldOffset(28)] // size = 4, padding = 0
        public float y;

        [FieldOffset(32)] // size = 4, padding = 0
        public float dx;

        [FieldOffset(36)] // size = 4, padding = 0
        public float dy;

        [FieldOffset(40)] // size = 4, padding = 0
        public float pressure;

        [FieldOffset(44)] // size = 4, padding = 0
        public uint windowID;
    }

    // Struct @ SDL_events.h:496:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_MultiGestureEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_TouchID touchId;

        [FieldOffset(16)] // size = 4, padding = 0
        public float dTheta;

        [FieldOffset(20)] // size = 4, padding = 0
        public float dDist;

        [FieldOffset(24)] // size = 4, padding = 0
        public float x;

        [FieldOffset(28)] // size = 4, padding = 0
        public float y;

        [FieldOffset(32)] // size = 2, padding = 0
        public ushort numFingers;

        [FieldOffset(34)] // size = 2, padding = 4
        public ushort padding;
    }

    // Struct @ SDL_events.h:512:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_DollarGestureEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_TouchID touchId;

        [FieldOffset(16)] // size = 8, padding = 0
        public SDL_GestureID gestureId;

        [FieldOffset(24)] // size = 4, padding = 0
        public uint numFingers;

        [FieldOffset(28)] // size = 4, padding = 0
        public float error;

        [FieldOffset(32)] // size = 4, padding = 0
        public float x;

        [FieldOffset(36)] // size = 4, padding = 0
        public float y;
    }

    // Struct @ SDL_events.h:526:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_DropEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U file;

        [FieldOffset(16)] // size = 4, padding = 4
        public uint windowID;
    }

    // Struct @ SDL_haptic.h:499:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
    public struct SDL_HapticConstant
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 16, padding = 0
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(24)] // size = 2, padding = 0
        public ushort delay;

        [FieldOffset(26)] // size = 2, padding = 0
        public ushort button;

        [FieldOffset(28)] // size = 2, padding = 0
        public ushort interval;

        [FieldOffset(30)] // size = 2, padding = 0
        public short level;

        [FieldOffset(32)] // size = 2, padding = 0
        public ushort attack_length;

        [FieldOffset(34)] // size = 2, padding = 0
        public ushort attack_level;

        [FieldOffset(36)] // size = 2, padding = 0
        public ushort fade_length;

        [FieldOffset(38)] // size = 2, padding = 0
        public ushort fade_level;
    }

    // Struct @ SDL_haptic.h:585:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 4)]
    public struct SDL_HapticPeriodic
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 16, padding = 0
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(24)] // size = 2, padding = 0
        public ushort delay;

        [FieldOffset(26)] // size = 2, padding = 0
        public ushort button;

        [FieldOffset(28)] // size = 2, padding = 0
        public ushort interval;

        [FieldOffset(30)] // size = 2, padding = 0
        public ushort period;

        [FieldOffset(32)] // size = 2, padding = 0
        public short magnitude;

        [FieldOffset(34)] // size = 2, padding = 0
        public short offset;

        [FieldOffset(36)] // size = 2, padding = 0
        public ushort phase;

        [FieldOffset(38)] // size = 2, padding = 0
        public ushort attack_length;

        [FieldOffset(40)] // size = 2, padding = 0
        public ushort attack_level;

        [FieldOffset(42)] // size = 2, padding = 0
        public ushort fade_length;

        [FieldOffset(44)] // size = 2, padding = 2
        public ushort fade_level;
    }

    // Struct @ SDL_haptic.h:633:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 68, Pack = 4)]
    public struct SDL_HapticCondition
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 16, padding = 0
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(24)] // size = 2, padding = 0
        public ushort delay;

        [FieldOffset(26)] // size = 2, padding = 0
        public ushort button;

        [FieldOffset(28)] // size = 2, padding = 0
        public ushort interval;

        [FieldOffset(30)] // size = 6, padding = 0
        public fixed ushort _right_sat[6 / 2]; // Uint16[3]

        public Span<ushort> right_sat
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_right_sat[0];
                    var span = new Span<ushort>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(36)] // size = 6, padding = 0
        public fixed ushort _left_sat[6 / 2]; // Uint16[3]

        public Span<ushort> left_sat
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_left_sat[0];
                    var span = new Span<ushort>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(42)] // size = 6, padding = 0
        public fixed ushort _right_coeff[6 / 2]; // Sint16[3]

        public Span<short> right_coeff
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_right_coeff[0];
                    var span = new Span<short>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(48)] // size = 6, padding = 0
        public fixed ushort _left_coeff[6 / 2]; // Sint16[3]

        public Span<short> left_coeff
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_left_coeff[0];
                    var span = new Span<short>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(54)] // size = 6, padding = 0
        public fixed ushort _deadband[6 / 2]; // Uint16[3]

        public Span<ushort> deadband
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_deadband[0];
                    var span = new Span<ushort>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(60)] // size = 6, padding = 2
        public fixed ushort _center[6 / 2]; // Sint16[3]

        public Span<short> center
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_center[0];
                    var span = new Span<short>(pointer, 3);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_haptic.h:671:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 44, Pack = 4)]
    public struct SDL_HapticRamp
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 16, padding = 0
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(24)] // size = 2, padding = 0
        public ushort delay;

        [FieldOffset(26)] // size = 2, padding = 0
        public ushort button;

        [FieldOffset(28)] // size = 2, padding = 0
        public ushort interval;

        [FieldOffset(30)] // size = 2, padding = 0
        public short start;

        [FieldOffset(32)] // size = 2, padding = 0
        public short end;

        [FieldOffset(34)] // size = 2, padding = 0
        public ushort attack_length;

        [FieldOffset(36)] // size = 2, padding = 0
        public ushort attack_level;

        [FieldOffset(38)] // size = 2, padding = 0
        public ushort fade_length;

        [FieldOffset(40)] // size = 2, padding = 2
        public ushort fade_level;
    }

    // Struct @ SDL_haptic.h:696:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_HapticLeftRight
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(8)] // size = 2, padding = 0
        public ushort large_magnitude;

        [FieldOffset(10)] // size = 2, padding = 0
        public ushort small_magnitude;
    }

    // Struct @ SDL_haptic.h:738:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_HapticCustom
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 16, padding = 0
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(24)] // size = 2, padding = 0
        public ushort delay;

        [FieldOffset(26)] // size = 2, padding = 0
        public ushort button;

        [FieldOffset(28)] // size = 2, padding = 0
        public ushort interval;

        [FieldOffset(30)] // size = 1, padding = 1
        public byte channels;

        [FieldOffset(32)] // size = 2, padding = 0
        public ushort period;

        [FieldOffset(34)] // size = 2, padding = 4
        public ushort samples;

        [FieldOffset(40)] // size = 8, padding = 0
        public ushort* data;

        [FieldOffset(48)] // size = 2, padding = 0
        public ushort attack_length;

        [FieldOffset(50)] // size = 2, padding = 0
        public ushort attack_level;

        [FieldOffset(52)] // size = 2, padding = 0
        public ushort fade_length;

        [FieldOffset(54)] // size = 2, padding = 0
        public ushort fade_level;
    }

    // Struct @ SDL_messagebox.h:63:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_MessageBoxButtonData
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint flags;

        [FieldOffset(4)] // size = 4, padding = 0
        public int buttonid;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U text;
    }

    // Struct @ SDL_messagebox.h:89:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [StructLayout(LayoutKind.Explicit, Size = 15, Pack = 1)]
    public struct SDL_MessageBoxColorScheme
    {
        [FieldOffset(0)] // size = 15, padding = 0
        public fixed byte _colors[15 / 1]; // SDL_MessageBoxColor[5]

        public Span<SDL_MessageBoxColor> colors
        {
            get
            {
                fixed (SDL_MessageBoxColorScheme* @this = &this)
                {
                    var pointer = &@this->_colors[0];
                    var span = new Span<SDL_MessageBoxColor>(pointer, 5);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_keyboard.h:53:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_Keysym
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public SDL_Scancode scancode;

        [FieldOffset(4)] // size = 4, padding = 0
        public SDL_Keycode sym;

        [FieldOffset(8)] // size = 2, padding = 2
        public ushort mod;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint unused;
    }

    // Struct @ SDL_haptic.h:463:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_HapticDirection
    {
        [FieldOffset(0)] // size = 1, padding = 3
        public byte type;

        [FieldOffset(4)] // size = 12, padding = 0
        public fixed uint _dir[12 / 4]; // Sint32[3]

        public Span<int> dir
        {
            get
            {
                fixed (SDL_HapticDirection* @this = &this)
                {
                    var pointer = &@this->_dir[0];
                    var span = new Span<int>(pointer, 3);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_messagebox.h:71:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [StructLayout(LayoutKind.Explicit, Size = 3, Pack = 1)]
    public struct SDL_MessageBoxColor
    {
        [FieldOffset(0)] // size = 1, padding = 0
        public byte r;

        [FieldOffset(1)] // size = 1, padding = 0
        public byte g;

        [FieldOffset(2)] // size = 1, padding = 0
        public byte b;
    }

    // OpaqueType @ SDL_audio.h:784:33 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AudioStream
    {
    }

    // OpaqueType @ SDL_video.h:95:27 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Window
    {
    }

    // OpaqueType @ SDL_mouse.h:41:27 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Cursor
    {
    }

    // OpaqueType @ SDL_joystick.h:69:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Joystick
    {
    }

    // OpaqueType @ SDL_sensor.h:52:28 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Sensor
    {
    }

    // OpaqueType @ SDL_gamecontroller.h:59:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GameController
    {
    }

    // OpaqueType @ SDL_haptic.h:141:28 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Haptic
    {
    }

    // OpaqueType @ SDL_render.h:142:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Renderer
    {
    }

    // OpaqueType @ SDL_render.h:148:28 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Texture
    {
    }

    // OpaqueType @ SDL_surface.h:91:12 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_BlitMap
    {
    }

    // OpaqueType @ SDL_events.h:573:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_SysWMmsg
    {
    }

    // Typedef @ SDL_audio.h:347:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_AudioDeviceID
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint Data;

        public static implicit operator uint(SDL_AudioDeviceID data) => data.Data;
        public static implicit operator SDL_AudioDeviceID(uint data) => new() { Data = data };
    }

    // Typedef @ SDL_audio.h:66:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 2)]
    public struct SDL_AudioFormat
    {
        [FieldOffset(0)] // size = 2, padding = 0
        public ushort Data;

        public static implicit operator ushort(SDL_AudioFormat data) => data.Data;
        public static implicit operator SDL_AudioFormat(ushort data) => new() { Data = data };
    }

    // Typedef @ SDL_video.h:216:15 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_GLContext
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public void* Data;

        public static implicit operator void*(SDL_GLContext data) => data.Data;
        public static implicit operator SDL_GLContext(void* data) => new() { Data = data };
    }

    // Typedef @ SDL_keycode.h:45:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keycode.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_Keycode
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(SDL_Keycode data) => data.Data;
        public static implicit operator SDL_Keycode(int data) => new() { Data = data };
    }

    // Typedef @ SDL_joystick.h:83:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_JoystickID
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(SDL_JoystickID data) => data.Data;
        public static implicit operator SDL_JoystickID(int data) => new() { Data = data };
    }

    // Typedef @ SDL_sensor.h:60:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_SensorID
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(SDL_SensorID data) => data.Data;
        public static implicit operator SDL_SensorID(int data) => new() { Data = data };
    }

    // Typedef @ SDL_touch.h:41:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_TouchID
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public long Data;

        public static implicit operator long(SDL_TouchID data) => data.Data;
        public static implicit operator SDL_TouchID(long data) => new() { Data = data };
    }

    // Typedef @ SDL_timer.h:116:13 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_TimerID
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(SDL_TimerID data) => data.Data;
        public static implicit operator SDL_TimerID(int data) => new() { Data = data };
    }

    // Typedef @ SDL_touch.h:42:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_FingerID
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public long Data;

        public static implicit operator long(SDL_FingerID data) => data.Data;
        public static implicit operator SDL_FingerID(long data) => new() { Data = data };
    }

    // Typedef @ SDL_gesture.h:44:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gesture.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_GestureID
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public long Data;

        public static implicit operator long(SDL_GestureID data) => data.Data;
        public static implicit operator SDL_GestureID(long data) => new() { Data = data };
    }

    // Enum @ SDL_audio.h:572:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    public enum SDL_AudioStatus : int
    {
        SDL_AUDIO_STOPPED = 0,
        SDL_AUDIO_PLAYING = 1,
        SDL_AUDIO_PAUSED = 2
    }

    // Enum @ SDL_blendmode.h:60:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_blendmode.h)
    public enum SDL_BlendMode : int
    {
        SDL_BLENDMODE_NONE = 0,
        SDL_BLENDMODE_BLEND = 1,
        SDL_BLENDMODE_ADD = 2,
        SDL_BLENDMODE_MOD = 4,
        SDL_BLENDMODE_MUL = 8,
        SDL_BLENDMODE_INVALID = 2147483647
    }

    // Enum @ SDL_blendmode.h:91:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_blendmode.h)
    public enum SDL_BlendFactor : int
    {
        SDL_BLENDFACTOR_ZERO = 1,
        SDL_BLENDFACTOR_ONE = 2,
        SDL_BLENDFACTOR_SRC_COLOR = 3,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
        SDL_BLENDFACTOR_SRC_ALPHA = 5,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
        SDL_BLENDFACTOR_DST_COLOR = 7,
        SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
        SDL_BLENDFACTOR_DST_ALPHA = 9,
        SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
    }

    // Enum @ SDL_blendmode.h:73:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_blendmode.h)
    public enum SDL_BlendOperation : int
    {
        SDL_BLENDOPERATION_ADD = 1,
        SDL_BLENDOPERATION_SUBTRACT = 2,
        SDL_BLENDOPERATION_REV_SUBTRACT = 3,
        SDL_BLENDOPERATION_MINIMUM = 4,
        SDL_BLENDOPERATION_MAXIMUM = 5
    }

    // Enum @ SDL_video.h:201:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    public enum SDL_DisplayOrientation : int
    {
        SDL_ORIENTATION_UNKNOWN = 0,
        SDL_ORIENTATION_LANDSCAPE = 1,
        SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2,
        SDL_ORIENTATION_PORTRAIT = 3,
        SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
    }

    // Enum @ SDL_video.h:250:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    public enum SDL_GLattr : int
    {
        SDL_GL_RED_SIZE = 0,
        SDL_GL_GREEN_SIZE = 1,
        SDL_GL_BLUE_SIZE = 2,
        SDL_GL_ALPHA_SIZE = 3,
        SDL_GL_BUFFER_SIZE = 4,
        SDL_GL_DOUBLEBUFFER = 5,
        SDL_GL_DEPTH_SIZE = 6,
        SDL_GL_STENCIL_SIZE = 7,
        SDL_GL_ACCUM_RED_SIZE = 8,
        SDL_GL_ACCUM_GREEN_SIZE = 9,
        SDL_GL_ACCUM_BLUE_SIZE = 10,
        SDL_GL_ACCUM_ALPHA_SIZE = 11,
        SDL_GL_STEREO = 12,
        SDL_GL_MULTISAMPLEBUFFERS = 13,
        SDL_GL_MULTISAMPLESAMPLES = 14,
        SDL_GL_ACCELERATED_VISUAL = 15,
        SDL_GL_RETAINED_BACKING = 16,
        SDL_GL_CONTEXT_MAJOR_VERSION = 17,
        SDL_GL_CONTEXT_MINOR_VERSION = 18,
        SDL_GL_CONTEXT_EGL = 19,
        SDL_GL_CONTEXT_FLAGS = 20,
        SDL_GL_CONTEXT_PROFILE_MASK = 21,
        SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22,
        SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23,
        SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24,
        SDL_GL_CONTEXT_RESET_NOTIFICATION = 25,
        SDL_GL_CONTEXT_NO_ERROR = 26
    }

    // Enum @ SDL_keycode.h:349:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keycode.h)
    public enum SDL_Keymod : int
    {
        KMOD_NONE = 0,
        KMOD_LSHIFT = 1,
        KMOD_RSHIFT = 2,
        KMOD_LCTRL = 64,
        KMOD_RCTRL = 128,
        KMOD_LALT = 256,
        KMOD_RALT = 512,
        KMOD_LGUI = 1024,
        KMOD_RGUI = 2048,
        KMOD_NUM = 4096,
        KMOD_CAPS = 8192,
        KMOD_MODE = 16384,
        KMOD_SCROLL = 32768,
        KMOD_CTRL = 192,
        KMOD_SHIFT = 3,
        KMOD_ALT = 768,
        KMOD_GUI = 3072,
        KMOD_RESERVED = 32768
    }

    // Enum @ SDL_scancode.h:409:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_scancode.h)
    public enum SDL_Scancode : int
    {
        SDL_SCANCODE_UNKNOWN = 0,
        SDL_SCANCODE_A = 4,
        SDL_SCANCODE_B = 5,
        SDL_SCANCODE_C = 6,
        SDL_SCANCODE_D = 7,
        SDL_SCANCODE_E = 8,
        SDL_SCANCODE_F = 9,
        SDL_SCANCODE_G = 10,
        SDL_SCANCODE_H = 11,
        SDL_SCANCODE_I = 12,
        SDL_SCANCODE_J = 13,
        SDL_SCANCODE_K = 14,
        SDL_SCANCODE_L = 15,
        SDL_SCANCODE_M = 16,
        SDL_SCANCODE_N = 17,
        SDL_SCANCODE_O = 18,
        SDL_SCANCODE_P = 19,
        SDL_SCANCODE_Q = 20,
        SDL_SCANCODE_R = 21,
        SDL_SCANCODE_S = 22,
        SDL_SCANCODE_T = 23,
        SDL_SCANCODE_U = 24,
        SDL_SCANCODE_V = 25,
        SDL_SCANCODE_W = 26,
        SDL_SCANCODE_X = 27,
        SDL_SCANCODE_Y = 28,
        SDL_SCANCODE_Z = 29,
        SDL_SCANCODE_1 = 30,
        SDL_SCANCODE_2 = 31,
        SDL_SCANCODE_3 = 32,
        SDL_SCANCODE_4 = 33,
        SDL_SCANCODE_5 = 34,
        SDL_SCANCODE_6 = 35,
        SDL_SCANCODE_7 = 36,
        SDL_SCANCODE_8 = 37,
        SDL_SCANCODE_9 = 38,
        SDL_SCANCODE_0 = 39,
        SDL_SCANCODE_RETURN = 40,
        SDL_SCANCODE_ESCAPE = 41,
        SDL_SCANCODE_BACKSPACE = 42,
        SDL_SCANCODE_TAB = 43,
        SDL_SCANCODE_SPACE = 44,
        SDL_SCANCODE_MINUS = 45,
        SDL_SCANCODE_EQUALS = 46,
        SDL_SCANCODE_LEFTBRACKET = 47,
        SDL_SCANCODE_RIGHTBRACKET = 48,
        SDL_SCANCODE_BACKSLASH = 49,
        SDL_SCANCODE_NONUSHASH = 50,
        SDL_SCANCODE_SEMICOLON = 51,
        SDL_SCANCODE_APOSTROPHE = 52,
        SDL_SCANCODE_GRAVE = 53,
        SDL_SCANCODE_COMMA = 54,
        SDL_SCANCODE_PERIOD = 55,
        SDL_SCANCODE_SLASH = 56,
        SDL_SCANCODE_CAPSLOCK = 57,
        SDL_SCANCODE_F1 = 58,
        SDL_SCANCODE_F2 = 59,
        SDL_SCANCODE_F3 = 60,
        SDL_SCANCODE_F4 = 61,
        SDL_SCANCODE_F5 = 62,
        SDL_SCANCODE_F6 = 63,
        SDL_SCANCODE_F7 = 64,
        SDL_SCANCODE_F8 = 65,
        SDL_SCANCODE_F9 = 66,
        SDL_SCANCODE_F10 = 67,
        SDL_SCANCODE_F11 = 68,
        SDL_SCANCODE_F12 = 69,
        SDL_SCANCODE_PRINTSCREEN = 70,
        SDL_SCANCODE_SCROLLLOCK = 71,
        SDL_SCANCODE_PAUSE = 72,
        SDL_SCANCODE_INSERT = 73,
        SDL_SCANCODE_HOME = 74,
        SDL_SCANCODE_PAGEUP = 75,
        SDL_SCANCODE_DELETE = 76,
        SDL_SCANCODE_END = 77,
        SDL_SCANCODE_PAGEDOWN = 78,
        SDL_SCANCODE_RIGHT = 79,
        SDL_SCANCODE_LEFT = 80,
        SDL_SCANCODE_DOWN = 81,
        SDL_SCANCODE_UP = 82,
        SDL_SCANCODE_NUMLOCKCLEAR = 83,
        SDL_SCANCODE_KP_DIVIDE = 84,
        SDL_SCANCODE_KP_MULTIPLY = 85,
        SDL_SCANCODE_KP_MINUS = 86,
        SDL_SCANCODE_KP_PLUS = 87,
        SDL_SCANCODE_KP_ENTER = 88,
        SDL_SCANCODE_KP_1 = 89,
        SDL_SCANCODE_KP_2 = 90,
        SDL_SCANCODE_KP_3 = 91,
        SDL_SCANCODE_KP_4 = 92,
        SDL_SCANCODE_KP_5 = 93,
        SDL_SCANCODE_KP_6 = 94,
        SDL_SCANCODE_KP_7 = 95,
        SDL_SCANCODE_KP_8 = 96,
        SDL_SCANCODE_KP_9 = 97,
        SDL_SCANCODE_KP_0 = 98,
        SDL_SCANCODE_KP_PERIOD = 99,
        SDL_SCANCODE_NONUSBACKSLASH = 100,
        SDL_SCANCODE_APPLICATION = 101,
        SDL_SCANCODE_POWER = 102,
        SDL_SCANCODE_KP_EQUALS = 103,
        SDL_SCANCODE_F13 = 104,
        SDL_SCANCODE_F14 = 105,
        SDL_SCANCODE_F15 = 106,
        SDL_SCANCODE_F16 = 107,
        SDL_SCANCODE_F17 = 108,
        SDL_SCANCODE_F18 = 109,
        SDL_SCANCODE_F19 = 110,
        SDL_SCANCODE_F20 = 111,
        SDL_SCANCODE_F21 = 112,
        SDL_SCANCODE_F22 = 113,
        SDL_SCANCODE_F23 = 114,
        SDL_SCANCODE_F24 = 115,
        SDL_SCANCODE_EXECUTE = 116,
        SDL_SCANCODE_HELP = 117,
        SDL_SCANCODE_MENU = 118,
        SDL_SCANCODE_SELECT = 119,
        SDL_SCANCODE_STOP = 120,
        SDL_SCANCODE_AGAIN = 121,
        SDL_SCANCODE_UNDO = 122,
        SDL_SCANCODE_CUT = 123,
        SDL_SCANCODE_COPY = 124,
        SDL_SCANCODE_PASTE = 125,
        SDL_SCANCODE_FIND = 126,
        SDL_SCANCODE_MUTE = 127,
        SDL_SCANCODE_VOLUMEUP = 128,
        SDL_SCANCODE_VOLUMEDOWN = 129,
        SDL_SCANCODE_KP_COMMA = 133,
        SDL_SCANCODE_KP_EQUALSAS400 = 134,
        SDL_SCANCODE_INTERNATIONAL1 = 135,
        SDL_SCANCODE_INTERNATIONAL2 = 136,
        SDL_SCANCODE_INTERNATIONAL3 = 137,
        SDL_SCANCODE_INTERNATIONAL4 = 138,
        SDL_SCANCODE_INTERNATIONAL5 = 139,
        SDL_SCANCODE_INTERNATIONAL6 = 140,
        SDL_SCANCODE_INTERNATIONAL7 = 141,
        SDL_SCANCODE_INTERNATIONAL8 = 142,
        SDL_SCANCODE_INTERNATIONAL9 = 143,
        SDL_SCANCODE_LANG1 = 144,
        SDL_SCANCODE_LANG2 = 145,
        SDL_SCANCODE_LANG3 = 146,
        SDL_SCANCODE_LANG4 = 147,
        SDL_SCANCODE_LANG5 = 148,
        SDL_SCANCODE_LANG6 = 149,
        SDL_SCANCODE_LANG7 = 150,
        SDL_SCANCODE_LANG8 = 151,
        SDL_SCANCODE_LANG9 = 152,
        SDL_SCANCODE_ALTERASE = 153,
        SDL_SCANCODE_SYSREQ = 154,
        SDL_SCANCODE_CANCEL = 155,
        SDL_SCANCODE_CLEAR = 156,
        SDL_SCANCODE_PRIOR = 157,
        SDL_SCANCODE_RETURN2 = 158,
        SDL_SCANCODE_SEPARATOR = 159,
        SDL_SCANCODE_OUT = 160,
        SDL_SCANCODE_OPER = 161,
        SDL_SCANCODE_CLEARAGAIN = 162,
        SDL_SCANCODE_CRSEL = 163,
        SDL_SCANCODE_EXSEL = 164,
        SDL_SCANCODE_KP_00 = 176,
        SDL_SCANCODE_KP_000 = 177,
        SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
        SDL_SCANCODE_DECIMALSEPARATOR = 179,
        SDL_SCANCODE_CURRENCYUNIT = 180,
        SDL_SCANCODE_CURRENCYSUBUNIT = 181,
        SDL_SCANCODE_KP_LEFTPAREN = 182,
        SDL_SCANCODE_KP_RIGHTPAREN = 183,
        SDL_SCANCODE_KP_LEFTBRACE = 184,
        SDL_SCANCODE_KP_RIGHTBRACE = 185,
        SDL_SCANCODE_KP_TAB = 186,
        SDL_SCANCODE_KP_BACKSPACE = 187,
        SDL_SCANCODE_KP_A = 188,
        SDL_SCANCODE_KP_B = 189,
        SDL_SCANCODE_KP_C = 190,
        SDL_SCANCODE_KP_D = 191,
        SDL_SCANCODE_KP_E = 192,
        SDL_SCANCODE_KP_F = 193,
        SDL_SCANCODE_KP_XOR = 194,
        SDL_SCANCODE_KP_POWER = 195,
        SDL_SCANCODE_KP_PERCENT = 196,
        SDL_SCANCODE_KP_LESS = 197,
        SDL_SCANCODE_KP_GREATER = 198,
        SDL_SCANCODE_KP_AMPERSAND = 199,
        SDL_SCANCODE_KP_DBLAMPERSAND = 200,
        SDL_SCANCODE_KP_VERTICALBAR = 201,
        SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
        SDL_SCANCODE_KP_COLON = 203,
        SDL_SCANCODE_KP_HASH = 204,
        SDL_SCANCODE_KP_SPACE = 205,
        SDL_SCANCODE_KP_AT = 206,
        SDL_SCANCODE_KP_EXCLAM = 207,
        SDL_SCANCODE_KP_MEMSTORE = 208,
        SDL_SCANCODE_KP_MEMRECALL = 209,
        SDL_SCANCODE_KP_MEMCLEAR = 210,
        SDL_SCANCODE_KP_MEMADD = 211,
        SDL_SCANCODE_KP_MEMSUBTRACT = 212,
        SDL_SCANCODE_KP_MEMMULTIPLY = 213,
        SDL_SCANCODE_KP_MEMDIVIDE = 214,
        SDL_SCANCODE_KP_PLUSMINUS = 215,
        SDL_SCANCODE_KP_CLEAR = 216,
        SDL_SCANCODE_KP_CLEARENTRY = 217,
        SDL_SCANCODE_KP_BINARY = 218,
        SDL_SCANCODE_KP_OCTAL = 219,
        SDL_SCANCODE_KP_DECIMAL = 220,
        SDL_SCANCODE_KP_HEXADECIMAL = 221,
        SDL_SCANCODE_LCTRL = 224,
        SDL_SCANCODE_LSHIFT = 225,
        SDL_SCANCODE_LALT = 226,
        SDL_SCANCODE_LGUI = 227,
        SDL_SCANCODE_RCTRL = 228,
        SDL_SCANCODE_RSHIFT = 229,
        SDL_SCANCODE_RALT = 230,
        SDL_SCANCODE_RGUI = 231,
        SDL_SCANCODE_MODE = 257,
        SDL_SCANCODE_AUDIONEXT = 258,
        SDL_SCANCODE_AUDIOPREV = 259,
        SDL_SCANCODE_AUDIOSTOP = 260,
        SDL_SCANCODE_AUDIOPLAY = 261,
        SDL_SCANCODE_AUDIOMUTE = 262,
        SDL_SCANCODE_MEDIASELECT = 263,
        SDL_SCANCODE_WWW = 264,
        SDL_SCANCODE_MAIL = 265,
        SDL_SCANCODE_CALCULATOR = 266,
        SDL_SCANCODE_COMPUTER = 267,
        SDL_SCANCODE_AC_SEARCH = 268,
        SDL_SCANCODE_AC_HOME = 269,
        SDL_SCANCODE_AC_BACK = 270,
        SDL_SCANCODE_AC_FORWARD = 271,
        SDL_SCANCODE_AC_STOP = 272,
        SDL_SCANCODE_AC_REFRESH = 273,
        SDL_SCANCODE_AC_BOOKMARKS = 274,
        SDL_SCANCODE_BRIGHTNESSDOWN = 275,
        SDL_SCANCODE_BRIGHTNESSUP = 276,
        SDL_SCANCODE_DISPLAYSWITCH = 277,
        SDL_SCANCODE_KBDILLUMTOGGLE = 278,
        SDL_SCANCODE_KBDILLUMDOWN = 279,
        SDL_SCANCODE_KBDILLUMUP = 280,
        SDL_SCANCODE_EJECT = 281,
        SDL_SCANCODE_SLEEP = 282,
        SDL_SCANCODE_APP1 = 283,
        SDL_SCANCODE_APP2 = 284,
        SDL_SCANCODE_AUDIOREWIND = 285,
        SDL_SCANCODE_AUDIOFASTFORWARD = 286,
        SDL_NUM_SCANCODES = 512
    }

    // Enum @ SDL_mouse.h:61:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    public enum SDL_SystemCursor : int
    {
        SDL_SYSTEM_CURSOR_ARROW = 0,
        SDL_SYSTEM_CURSOR_IBEAM = 1,
        SDL_SYSTEM_CURSOR_WAIT = 2,
        SDL_SYSTEM_CURSOR_CROSSHAIR = 3,
        SDL_SYSTEM_CURSOR_WAITARROW = 4,
        SDL_SYSTEM_CURSOR_SIZENWSE = 5,
        SDL_SYSTEM_CURSOR_SIZENESW = 6,
        SDL_SYSTEM_CURSOR_SIZEWE = 7,
        SDL_SYSTEM_CURSOR_SIZENS = 8,
        SDL_SYSTEM_CURSOR_SIZEALL = 9,
        SDL_SYSTEM_CURSOR_NO = 10,
        SDL_SYSTEM_CURSOR_HAND = 11,
        SDL_NUM_SYSTEM_CURSORS = 12
    }

    // Enum @ SDL_joystick.h:97:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    public enum SDL_JoystickType : int
    {
        SDL_JOYSTICK_TYPE_UNKNOWN = 0,
        SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1,
        SDL_JOYSTICK_TYPE_WHEEL = 2,
        SDL_JOYSTICK_TYPE_ARCADE_STICK = 3,
        SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4,
        SDL_JOYSTICK_TYPE_DANCE_PAD = 5,
        SDL_JOYSTICK_TYPE_GUITAR = 6,
        SDL_JOYSTICK_TYPE_DRUM_KIT = 7,
        SDL_JOYSTICK_TYPE_ARCADE_PAD = 8,
        SDL_JOYSTICK_TYPE_THROTTLE = 9
    }

    // Enum @ SDL_joystick.h:108:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    public enum SDL_JoystickPowerLevel : int
    {
        SDL_JOYSTICK_POWER_UNKNOWN = -1,
        SDL_JOYSTICK_POWER_EMPTY = 0,
        SDL_JOYSTICK_POWER_LOW = 1,
        SDL_JOYSTICK_POWER_MEDIUM = 2,
        SDL_JOYSTICK_POWER_FULL = 3,
        SDL_JOYSTICK_POWER_WIRED = 4,
        SDL_JOYSTICK_POWER_MAX = 5
    }

    // Enum @ SDL_sensor.h:75:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    public enum SDL_SensorType : int
    {
        SDL_SENSOR_INVALID = -1,
        SDL_SENSOR_UNKNOWN = 0,
        SDL_SENSOR_ACCEL = 1,
        SDL_SENSOR_GYRO = 2
    }

    // Enum @ SDL_gamecontroller.h:73:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    public enum SDL_GameControllerType : int
    {
        SDL_CONTROLLER_TYPE_UNKNOWN = 0,
        SDL_CONTROLLER_TYPE_XBOX360 = 1,
        SDL_CONTROLLER_TYPE_XBOXONE = 2,
        SDL_CONTROLLER_TYPE_PS3 = 3,
        SDL_CONTROLLER_TYPE_PS4 = 4,
        SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5,
        SDL_CONTROLLER_TYPE_VIRTUAL = 6,
        SDL_CONTROLLER_TYPE_PS5 = 7,
        SDL_CONTROLLER_TYPE_AMAZON_LUNA = 8,
        SDL_CONTROLLER_TYPE_GOOGLE_STADIA = 9
    }

    // Enum @ SDL_gamecontroller.h:526:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    public enum SDL_GameControllerAxis : int
    {
        SDL_CONTROLLER_AXIS_INVALID = -1,
        SDL_CONTROLLER_AXIS_LEFTX = 0,
        SDL_CONTROLLER_AXIS_LEFTY = 1,
        SDL_CONTROLLER_AXIS_RIGHTX = 2,
        SDL_CONTROLLER_AXIS_RIGHTY = 3,
        SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4,
        SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5,
        SDL_CONTROLLER_AXIS_MAX = 6
    }

    // Enum @ SDL_gamecontroller.h:640:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    public enum SDL_GameControllerButton : int
    {
        SDL_CONTROLLER_BUTTON_INVALID = -1,
        SDL_CONTROLLER_BUTTON_A = 0,
        SDL_CONTROLLER_BUTTON_B = 1,
        SDL_CONTROLLER_BUTTON_X = 2,
        SDL_CONTROLLER_BUTTON_Y = 3,
        SDL_CONTROLLER_BUTTON_BACK = 4,
        SDL_CONTROLLER_BUTTON_GUIDE = 5,
        SDL_CONTROLLER_BUTTON_START = 6,
        SDL_CONTROLLER_BUTTON_LEFTSTICK = 7,
        SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8,
        SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9,
        SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10,
        SDL_CONTROLLER_BUTTON_DPAD_UP = 11,
        SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12,
        SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13,
        SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14,
        SDL_CONTROLLER_BUTTON_MISC1 = 15,
        SDL_CONTROLLER_BUTTON_PADDLE1 = 16,
        SDL_CONTROLLER_BUTTON_PADDLE2 = 17,
        SDL_CONTROLLER_BUTTON_PADDLE3 = 18,
        SDL_CONTROLLER_BUTTON_PADDLE4 = 19,
        SDL_CONTROLLER_BUTTON_TOUCHPAD = 20,
        SDL_CONTROLLER_BUTTON_MAX = 21
    }

    // Enum @ SDL_touch.h:50:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    public enum SDL_TouchDeviceType : int
    {
        SDL_TOUCH_DEVICE_INVALID = -1,
        SDL_TOUCH_DEVICE_DIRECT = 0,
        SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1,
        SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2
    }

    // Enum @ SDL_events.h:673:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    public enum SDL_eventaction : int
    {
        SDL_ADDEVENT = 0,
        SDL_PEEKEVENT = 1,
        SDL_GETEVENT = 2
    }

    // Enum @ SDL_hints.h:1730:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    public enum SDL_HintPriority : int
    {
        SDL_HINT_DEFAULT = 0,
        SDL_HINT_NORMAL = 1,
        SDL_HINT_OVERRIDE = 2
    }

    // Enum @ SDL_log.h:111:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    public enum SDL_LogPriority : int
    {
        SDL_LOG_PRIORITY_VERBOSE = 1,
        SDL_LOG_PRIORITY_DEBUG = 2,
        SDL_LOG_PRIORITY_INFO = 3,
        SDL_LOG_PRIORITY_WARN = 4,
        SDL_LOG_PRIORITY_ERROR = 5,
        SDL_LOG_PRIORITY_CRITICAL = 6,
        SDL_NUM_LOG_PRIORITIES = 7
    }

    // Enum @ SDL_power.h:49:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_power.h)
    public enum SDL_PowerState : int
    {
        SDL_POWERSTATE_UNKNOWN = 0,
        SDL_POWERSTATE_ON_BATTERY = 1,
        SDL_POWERSTATE_NO_BATTERY = 2,
        SDL_POWERSTATE_CHARGING = 3,
        SDL_POWERSTATE_CHARGED = 4
    }

    // Enum @ SDL_render.h:106:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    public enum SDL_ScaleMode : int
    {
        SDL_ScaleModeNearest = 0,
        SDL_ScaleModeLinear = 1,
        SDL_ScaleModeBest = 2
    }

    // Enum @ SDL_render.h:136:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    public enum SDL_RendererFlip : int
    {
        SDL_FLIP_NONE = 0,
        SDL_FLIP_HORIZONTAL = 1,
        SDL_FLIP_VERTICAL = 2
    }

    // Enum @ SDL_video.h:1463:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    public enum SDL_HitTestResult : int
    {
        SDL_HITTEST_NORMAL = 0,
        SDL_HITTEST_DRAGGABLE = 1,
        SDL_HITTEST_RESIZE_TOPLEFT = 2,
        SDL_HITTEST_RESIZE_TOP = 3,
        SDL_HITTEST_RESIZE_TOPRIGHT = 4,
        SDL_HITTEST_RESIZE_RIGHT = 5,
        SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6,
        SDL_HITTEST_RESIZE_BOTTOM = 7,
        SDL_HITTEST_RESIZE_BOTTOMLEFT = 8,
        SDL_HITTEST_RESIZE_LEFT = 9
    }

    // Enum @ SDL_gamecontroller.h:81:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    public enum SDL_GameControllerBindType : int
    {
        SDL_CONTROLLER_BINDTYPE_NONE = 0,
        SDL_CONTROLLER_BINDTYPE_BUTTON = 1,
        SDL_CONTROLLER_BINDTYPE_AXIS = 2,
        SDL_CONTROLLER_BINDTYPE_HAT = 3
    }
}
