
//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/lithiumtoast/c2cs (v1.2.23.0)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using C2CS;

#nullable enable
#pragma warning disable 1591

public static unsafe partial class SDL
{
    private const string LibraryName = "SDL2";

    // Function @ SDL.h:211:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL.h)
    [DllImport(LibraryName)]
    public static extern void SDL_Quit();

    // Function @ SDL.h:189:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_WasInit(uint flags);

    // Function @ SDL.h:175:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL.h)
    [DllImport(LibraryName)]
    public static extern void SDL_QuitSubSystem(uint flags);

    // Function @ SDL.h:155:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL.h)
    [DllImport(LibraryName)]
    public static extern int SDL_InitSubSystem(uint flags);

    // Function @ SDL.h:140:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL.h)
    [DllImport(LibraryName)]
    public static extern int SDL_Init(uint flags);

    // Function @ SDL_misc.h:69:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_misc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_OpenURL(CString url);

    // Function @ SDL_locale.h:89:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_locale.h)
    [DllImport(LibraryName)]
    public static extern SDL_Locale* SDL_GetPreferredLocales();

    // Function @ SDL_version.h:161:44 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_version.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRevisionNumber();

    // Function @ SDL_version.h:150:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_version.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetRevision();

    // Function @ SDL_version.h:123:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_version.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetVersion(SDL_version* ver);

    // Function @ SDL_timer.h:161:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_RemoveTimer(SDL_TimerID id);

    // Function @ SDL_timer.h:148:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern SDL_TimerID SDL_AddTimer(uint interval, SDL_TimerCallback callback, void* param);

    // Function @ SDL_timer.h:101:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern void SDL_Delay(uint ms);

    // Function @ SDL_timer.h:90:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_GetPerformanceFrequency();

    // Function @ SDL_timer.h:79:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_GetPerformanceCounter();

    // Function @ SDL_timer.h:50:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetTicks();

    // Function @ SDL_system.h:462:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_system.h)
    [DllImport(LibraryName)]
    public static extern void SDL_OnApplicationDidBecomeActive();

    // Function @ SDL_system.h:461:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_system.h)
    [DllImport(LibraryName)]
    public static extern void SDL_OnApplicationWillEnterForeground();

    // Function @ SDL_system.h:460:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_system.h)
    [DllImport(LibraryName)]
    public static extern void SDL_OnApplicationDidEnterBackground();

    // Function @ SDL_system.h:459:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_system.h)
    [DllImport(LibraryName)]
    public static extern void SDL_OnApplicationWillResignActive();

    // Function @ SDL_system.h:458:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_system.h)
    [DllImport(LibraryName)]
    public static extern void SDL_OnApplicationDidReceiveMemoryWarning();

    // Function @ SDL_system.h:457:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_system.h)
    [DllImport(LibraryName)]
    public static extern void SDL_OnApplicationWillTerminate();

    // Function @ SDL_system.h:454:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_system.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IsTablet();

    // Function @ SDL_system.h:136:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_system.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LinuxSetThreadPriority(long threadID, int priority);

    // Function @ SDL_shape.h:139:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_shape.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetShapedWindowMode(SDL_Window* window, SDL_WindowShapeMode* shape_mode);

    // Function @ SDL_shape.h:122:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_shape.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowShape(SDL_Window* window, SDL_Surface* shape, SDL_WindowShapeMode* shape_mode);

    // Function @ SDL_shape.h:78:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_shape.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IsShapedWindow(SDL_Window* window);

    // Function @ SDL_shape.h:67:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_shape.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_CreateShapedWindow(CString title, uint x, uint y, uint w, uint h, uint flags);

    // Function @ SDL_render.h:1615:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_RenderGetMetalCommandEncoder(SDL_Renderer* renderer);

    // Function @ SDL_render.h:1601:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_RenderGetMetalLayer(SDL_Renderer* renderer);

    // Function @ SDL_render.h:1587:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_UnbindTexture(SDL_Texture* texture);

    // Function @ SDL_render.h:1574:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_BindTexture(SDL_Texture* texture, float* texw, float* texh);

    // Function @ SDL_render.h:1536:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderFlush(SDL_Renderer* renderer);

    // Function @ SDL_render.h:1505:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DestroyRenderer(SDL_Renderer* renderer);

    // Function @ SDL_render.h:1496:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DestroyTexture(SDL_Texture* texture);

    // Function @ SDL_render.h:1483:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RenderPresent(SDL_Renderer* renderer);

    // Function @ SDL_render.h:1445:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderReadPixels(SDL_Renderer* renderer, SDL_Rect* rect, uint format, void* pixels, int pitch);

    // Function @ SDL_render.h:1414:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderCopyExF(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_FRect* dstrect, double angle, SDL_FPoint* center, SDL_RendererFlip flip);

    // Function @ SDL_render.h:1390:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderCopyF(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_FRect* dstrect);

    // Function @ SDL_render.h:1374:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderFillRectsF(SDL_Renderer* renderer, SDL_FRect* rects, int count);

    // Function @ SDL_render.h:1362:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderFillRectF(SDL_Renderer* renderer, SDL_FRect* rect);

    // Function @ SDL_render.h:1349:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawRectsF(SDL_Renderer* renderer, SDL_FRect* rects, int count);

    // Function @ SDL_render.h:1337:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawRectF(SDL_Renderer* renderer, SDL_FRect* rect);

    // Function @ SDL_render.h:1325:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawLinesF(SDL_Renderer* renderer, SDL_FPoint* points, int count);

    // Function @ SDL_render.h:1313:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawLineF(SDL_Renderer* renderer, float x1, float y1, float x2, float y2);

    // Function @ SDL_render.h:1299:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawPointsF(SDL_Renderer* renderer, SDL_FPoint* points, int count);

    // Function @ SDL_render.h:1288:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawPointF(SDL_Renderer* renderer, float x, float y);

    // Function @ SDL_render.h:1271:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderCopyEx(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_Rect* dstrect, double angle, SDL_Point* center, SDL_RendererFlip flip);

    // Function @ SDL_render.h:1229:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderCopy(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Rect* srcrect, SDL_Rect* dstrect);

    // Function @ SDL_render.h:1199:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderFillRects(SDL_Renderer* renderer, SDL_Rect* rects, int count);

    // Function @ SDL_render.h:1176:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderFillRect(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:1148:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawRects(SDL_Renderer* renderer, SDL_Rect* rects, int count);

    // Function @ SDL_render.h:1124:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawRect(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:1100:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawLines(SDL_Renderer* renderer, SDL_Point* points, int count);

    // Function @ SDL_render.h:1074:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawLine(SDL_Renderer* renderer, int x1, int y1, int x2, int y2);

    // Function @ SDL_render.h:1043:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawPoints(SDL_Renderer* renderer, SDL_Point* points, int count);

    // Function @ SDL_render.h:1019:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderDrawPoint(SDL_Renderer* renderer, int x, int y);

    // Function @ SDL_render.h:994:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderClear(SDL_Renderer* renderer);

    // Function @ SDL_render.h:977:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode* blendMode);

    // Function @ SDL_render.h:964:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode blendMode);

    // Function @ SDL_render.h:940:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRenderDrawColor(SDL_Renderer* renderer, byte* r, byte* g, byte* b, byte* a);

    // Function @ SDL_render.h:919:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetRenderDrawColor(SDL_Renderer* renderer, byte r, byte g, byte b, byte a);

    // Function @ SDL_render.h:889:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RenderGetScale(SDL_Renderer* renderer, float* scaleX, float* scaleY);

    // Function @ SDL_render.h:875:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderSetScale(SDL_Renderer* renderer, float scaleX, float scaleY);

    // Function @ SDL_render.h:850:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_RenderIsClipEnabled(SDL_Renderer* renderer);

    // Function @ SDL_render.h:835:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RenderGetClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:821:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderSetClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:805:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RenderGetViewport(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:794:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderSetViewport(SDL_Renderer* renderer, SDL_Rect* rect);

    // Function @ SDL_render.h:778:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_RenderGetIntegerScale(SDL_Renderer* renderer);

    // Function @ SDL_render.h:764:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderSetIntegerScale(SDL_Renderer* renderer, CBool enable);

    // Function @ SDL_render.h:745:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RenderGetLogicalSize(SDL_Renderer* renderer, long* w, long* h);

    // Function @ SDL_render.h:728:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RenderSetLogicalSize(SDL_Renderer* renderer, int w, int h);

    // Function @ SDL_render.h:700:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Texture* SDL_GetRenderTarget(SDL_Renderer* renderer);

    // Function @ SDL_render.h:684:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture);

    // Function @ SDL_render.h:660:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_RenderTargetSupported(SDL_Renderer* renderer);

    // Function @ SDL_render.h:648:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockTexture(SDL_Texture* texture);

    // Function @ SDL_render.h:629:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LockTextureToSurface(SDL_Texture* texture, SDL_Rect* rect, SDL_Surface** surface);

    // Function @ SDL_render.h:595:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LockTexture(SDL_Texture* texture, SDL_Rect* rect, void** pixels, long* pitch);

    // Function @ SDL_render.h:565:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpdateNVTexture(SDL_Texture* texture, SDL_Rect* rect, byte* Yplane, int Ypitch, byte* UVplane, int UVpitch);

    // Function @ SDL_render.h:541:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpdateYUVTexture(SDL_Texture* texture, SDL_Rect* rect, byte* Yplane, int Ypitch, byte* Uplane, int Upitch, byte* Vplane, int Vpitch);

    // Function @ SDL_render.h:510:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpdateTexture(SDL_Texture* texture, SDL_Rect* rect, void* pixels, int pitch);

    // Function @ SDL_render.h:480:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode* scaleMode);

    // Function @ SDL_render.h:468:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode scaleMode);

    // Function @ SDL_render.h:454:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode* blendMode);

    // Function @ SDL_render.h:441:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode blendMode);

    // Function @ SDL_render.h:424:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetTextureAlphaMod(SDL_Texture* texture, byte* alpha);

    // Function @ SDL_render.h:410:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetTextureAlphaMod(SDL_Texture* texture, byte alpha);

    // Function @ SDL_render.h:387:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetTextureColorMod(SDL_Texture* texture, byte* r, byte* g, byte* b);

    // Function @ SDL_render.h:370:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetTextureColorMod(SDL_Texture* texture, byte r, byte g, byte b);

    // Function @ SDL_render.h:344:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_QueryTexture(SDL_Texture* texture, uint* format, long* access, long* w, long* h);

    // Function @ SDL_render.h:326:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Texture* SDL_CreateTextureFromSurface(SDL_Renderer* renderer, SDL_Surface* surface);

    // Function @ SDL_render.h:299:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Texture* SDL_CreateTexture(SDL_Renderer* renderer, uint format, int access, int w, int h);

    // Function @ SDL_render.h:276:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRendererOutputSize(SDL_Renderer* renderer, long* w, long* h);

    // Function @ SDL_render.h:256:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRendererInfo(SDL_Renderer* renderer, SDL_RendererInfo* info);

    // Function @ SDL_render.h:243:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Renderer* SDL_GetRenderer(SDL_Window* window);

    // Function @ SDL_render.h:232:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Renderer* SDL_CreateSoftwareRenderer(SDL_Surface* surface);

    // Function @ SDL_render.h:212:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern SDL_Renderer* SDL_CreateRenderer(SDL_Window* window, int index, uint flags);

    // Function @ SDL_render.h:192:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_CreateWindowAndRenderer(int width, int height, uint window_flags, SDL_Window** window, SDL_Renderer** renderer);

    // Function @ SDL_render.h:174:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetRenderDriverInfo(int index, SDL_RendererInfo* info);

    // Function @ SDL_render.h:160:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumRenderDrivers();

    // Function @ SDL_power.h:76:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_power.h)
    [DllImport(LibraryName)]
    public static extern SDL_PowerState SDL_GetPowerInfo(long* secs, long* pct);

    // Function @ SDL_metal.h:93:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_metal.h)
    [DllImport(LibraryName)]
    public static extern void SDL_Metal_GetDrawableSize(SDL_Window* window, long* w, long* h);

    // Function @ SDL_metal.h:81:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_metal.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_Metal_GetLayer(SDL_MetalView view);

    // Function @ SDL_metal.h:74:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_metal.h)
    [DllImport(LibraryName)]
    public static extern void SDL_Metal_DestroyView(SDL_MetalView view);

    // Function @ SDL_metal.h:64:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_metal.h)
    [DllImport(LibraryName)]
    public static extern SDL_MetalView SDL_Metal_CreateView(SDL_Window* window);

    // Function @ SDL_messagebox.h:180:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [DllImport(LibraryName)]
    public static extern int SDL_ShowSimpleMessageBox(uint flags, CString title, CString message, SDL_Window* window);

    // Function @ SDL_messagebox.h:140:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [DllImport(LibraryName)]
    public static extern int SDL_ShowMessageBox(SDL_MessageBoxData* messageboxdata, long* buttonid);

    // Function @ SDL_log.h:365:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void* userdata);

    // Function @ SDL_log.h:355:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogGetOutputFunction(SDL_LogOutputFunction* callback, void** userdata);

    // Function @ SDL_log.h:329:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogMessageV(int category, SDL_LogPriority priority, CString fmt, IntPtr ap);

    // Function @ SDL_log.h:306:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogMessage(int category, SDL_LogPriority priority, CString fmt);

    // Function @ SDL_log.h:286:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogCritical(int category, CString fmt);

    // Function @ SDL_log.h:267:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogError(int category, CString fmt);

    // Function @ SDL_log.h:248:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogWarn(int category, CString fmt);

    // Function @ SDL_log.h:229:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogInfo(int category, CString fmt);

    // Function @ SDL_log.h:210:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogDebug(int category, CString fmt);

    // Function @ SDL_log.h:191:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogVerbose(int category, CString fmt);

    // Function @ SDL_log.h:172:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_Log(CString fmt);

    // Function @ SDL_log.h:153:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogResetPriorities();

    // Function @ SDL_log.h:143:41 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern SDL_LogPriority SDL_LogGetPriority(int category);

    // Function @ SDL_log.h:132:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogSetPriority(int category, SDL_LogPriority priority);

    // Function @ SDL_log.h:121:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LogSetAllPriority(SDL_LogPriority priority);

    // Function @ SDL_loadso.h:99:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_loadso.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnloadObject(void* handle);

    // Function @ SDL_loadso.h:88:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_loadso.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_LoadFunction(void* handle, CString name);

    // Function @ SDL_loadso.h:63:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_loadso.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_LoadObject(CString sofile);

    // Function @ SDL_hints.h:1818:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern void SDL_ClearHints();

    // Function @ SDL_hints.h:1809:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DelHintCallback(CString name, SDL_HintCallback callback, void* userdata);

    // Function @ SDL_hints.h:1793:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern void SDL_AddHintCallback(CString name, SDL_HintCallback callback, void* userdata);

    // Function @ SDL_hints.h:1769:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GetHintBoolean(CString name, CBool default_value);

    // Function @ SDL_hints.h:1754:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetHint(CString name);

    // Function @ SDL_hints.h:1742:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_SetHint(CString name, CString value);

    // Function @ SDL_hints.h:1724:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_SetHintWithPriority(CString name, CString value, SDL_HintPriority priority);

    // Function @ SDL_haptic.h:1310:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticRumbleStop(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1297:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticRumblePlay(SDL_Haptic* haptic, float strength, uint length);

    // Function @ SDL_haptic.h:1282:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticRumbleInit(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1266:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticRumbleSupported(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1252:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticStopAll(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1243:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticUnpause(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1230:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticPause(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1212:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticSetAutocenter(SDL_Haptic* haptic, int autocenter);

    // Function @ SDL_haptic.h:1195:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticSetGain(SDL_Haptic* haptic, int gain);

    // Function @ SDL_haptic.h:1173:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticGetEffectStatus(SDL_Haptic* haptic, int effect);

    // Function @ SDL_haptic.h:1155:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern void SDL_HapticDestroyEffect(SDL_Haptic* haptic, int effect);

    // Function @ SDL_haptic.h:1139:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticStopEffect(SDL_Haptic* haptic, int effect);

    // Function @ SDL_haptic.h:1120:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticRunEffect(SDL_Haptic* haptic, int effect, uint iterations);

    // Function @ SDL_haptic.h:1094:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticUpdateEffect(SDL_Haptic* haptic, int effect, SDL_HapticEffect* data);

    // Function @ SDL_haptic.h:1070:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticNewEffect(SDL_Haptic* haptic, SDL_HapticEffect* effect);

    // Function @ SDL_haptic.h:1053:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticEffectSupported(SDL_Haptic* haptic, SDL_HapticEffect* effect);

    // Function @ SDL_haptic.h:1037:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticNumAxes(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1024:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_HapticQuery(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:1010:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticNumEffectsPlaying(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:993:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticNumEffects(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:975:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern void SDL_HapticClose(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:965:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern SDL_Haptic* SDL_HapticOpenFromJoystick(SDL_Joystick* joystick);

    // Function @ SDL_haptic.h:942:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickIsHaptic(SDL_Joystick* joystick);

    // Function @ SDL_haptic.h:928:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern SDL_Haptic* SDL_HapticOpenFromMouse();

    // Function @ SDL_haptic.h:915:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_MouseIsHaptic();

    // Function @ SDL_haptic.h:904:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticIndex(SDL_Haptic* haptic);

    // Function @ SDL_haptic.h:890:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_HapticOpened(int device_index);

    // Function @ SDL_haptic.h:876:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern SDL_Haptic* SDL_HapticOpen(int device_index);

    // Function @ SDL_haptic.h:849:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_HapticName(int device_index);

    // Function @ SDL_haptic.h:833:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_NumHaptics();

    // Function @ SDL_filesystem.h:135:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_filesystem.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetPrefPath(CString org, CString app);

    // Function @ SDL_filesystem.h:78:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_filesystem.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetBasePath();

    // Function @ SDL_events.h:1082:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_RegisterEvents(int numevents);

    // Function @ SDL_events.h:1060:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern byte SDL_EventState(uint type, int state);

    // Function @ SDL_events.h:1034:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FilterEvents(SDL_EventFilter filter, void* userdata);

    // Function @ SDL_events.h:1017:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DelEventWatch(SDL_EventFilter filter, void* userdata);

    // Function @ SDL_events.h:1003:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_AddEventWatch(SDL_EventFilter filter, void* userdata);

    // Function @ SDL_events.h:976:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GetEventFilter(SDL_EventFilter* filter, void** userdata);

    // Function @ SDL_events.h:960:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetEventFilter(SDL_EventFilter filter, void* userdata);

    // Function @ SDL_events.h:904:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern int SDL_PushEvent(SDL_Event* @event);

    // Function @ SDL_events.h:871:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern int SDL_WaitEventTimeout(SDL_Event* @event, int timeout);

    // Function @ SDL_events.h:847:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern int SDL_WaitEvent(SDL_Event* @event);

    // Function @ SDL_events.h:827:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern int SDL_PollEvent(SDL_Event* @event);

    // Function @ SDL_events.h:782:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FlushEvents(uint minType, uint maxType);

    // Function @ SDL_events.h:759:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FlushEvent(uint type);

    // Function @ SDL_events.h:739:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasEvents(uint minType, uint maxType);

    // Function @ SDL_events.h:722:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasEvent(uint type);

    // Function @ SDL_events.h:705:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern int SDL_PeepEvents(SDL_Event* events, int numevents, SDL_eventaction action, uint minType, uint maxType);

    // Function @ SDL_events.h:659:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [DllImport(LibraryName)]
    public static extern void SDL_PumpEvents();

    // Function @ SDL_gesture.h:107:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gesture.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LoadDollarTemplates(SDL_TouchID touchId, SDL_RWops* src);

    // Function @ SDL_gesture.h:91:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gesture.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SaveDollarTemplate(SDL_GestureID gestureId, SDL_RWops* dst);

    // Function @ SDL_gesture.h:76:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gesture.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SaveAllDollarTemplates(SDL_RWops* dst);

    // Function @ SDL_gesture.h:61:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gesture.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RecordGesture(SDL_TouchID touchId);

    // Function @ SDL_touch.h:128:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [DllImport(LibraryName)]
    public static extern SDL_Finger* SDL_GetTouchFinger(SDL_TouchID touchID, int index);

    // Function @ SDL_touch.h:114:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumTouchFingers(SDL_TouchID touchID);

    // Function @ SDL_touch.h:101:45 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [DllImport(LibraryName)]
    public static extern SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);

    // Function @ SDL_touch.h:96:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [DllImport(LibraryName)]
    public static extern SDL_TouchID SDL_GetTouchDevice(int index);

    // Function @ SDL_touch.h:83:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumTouchDevices();

    // Function @ SDL_gamecontroller.h:850:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GameControllerClose(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:840:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerSendEffect(SDL_GameController* gamecontroller, void* data, int size);

    // Function @ SDL_gamecontroller.h:829:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerSetLED(SDL_GameController* gamecontroller, byte red, byte green, byte blue);

    // Function @ SDL_gamecontroller.h:818:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerHasLED(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:809:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerRumbleTriggers(SDL_GameController* gamecontroller, ushort left_rumble, ushort right_rumble, uint duration_ms);

    // Function @ SDL_gamecontroller.h:789:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerRumble(SDL_GameController* gamecontroller, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

    // Function @ SDL_gamecontroller.h:773:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerGetSensorData(SDL_GameController* gamecontroller, SDL_SensorType type, float* data, int num_values);

    // Function @ SDL_gamecontroller.h:759:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerIsSensorEnabled(SDL_GameController* gamecontroller, SDL_SensorType type);

    // Function @ SDL_gamecontroller.h:750:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerSetSensorEnabled(SDL_GameController* gamecontroller, SDL_SensorType type, CBool enabled);

    // Function @ SDL_gamecontroller.h:740:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerHasSensor(SDL_GameController* gamecontroller, SDL_SensorType type);

    // Function @ SDL_gamecontroller.h:731:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerGetTouchpadFinger(SDL_GameController* gamecontroller, int touchpad, int finger, byte* state, float* x, float* y, float* pressure);

    // Function @ SDL_gamecontroller.h:726:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerGetNumTouchpadFingers(SDL_GameController* gamecontroller, int touchpad);

    // Function @ SDL_gamecontroller.h:720:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerGetNumTouchpads(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:714:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern byte SDL_GameControllerGetButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);

    // Function @ SDL_gamecontroller.h:699:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerHasButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);

    // Function @ SDL_gamecontroller.h:686:1 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton(SDL_GameController* gamecontroller, SDL_GameControllerButton button);

    // Function @ SDL_gamecontroller.h:670:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);

    // Function @ SDL_gamecontroller.h:654:50 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerButton SDL_GameControllerGetButtonFromString(CString str);

    // Function @ SDL_gamecontroller.h:610:1 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern short SDL_GameControllerGetAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);

    // Function @ SDL_gamecontroller.h:590:1 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerHasAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);

    // Function @ SDL_gamecontroller.h:576:1 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis(SDL_GameController* gamecontroller, SDL_GameControllerAxis axis);

    // Function @ SDL_gamecontroller.h:560:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);

    // Function @ SDL_gamecontroller.h:546:48 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerAxis SDL_GameControllerGetAxisFromString(CString str);

    // Function @ SDL_gamecontroller.h:504:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GameControllerUpdate();

    // Function @ SDL_gamecontroller.h:495:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerEventState(int state);

    // Function @ SDL_gamecontroller.h:475:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_Joystick* SDL_GameControllerGetJoystick(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:456:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GameControllerGetAttached(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:443:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GameControllerGetSerial(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:432:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_GameControllerGetProductVersion(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:422:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_GameControllerGetProduct(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:412:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_GameControllerGetVendor(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:402:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GameControllerSetPlayerIndex(SDL_GameController* gamecontroller, int player_index);

    // Function @ SDL_gamecontroller.h:394:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerGetPlayerIndex(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:384:48 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerType SDL_GameControllerGetType(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:373:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GameControllerName(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:355:45 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameController* SDL_GameControllerFromPlayerIndex(int player_index);

    // Function @ SDL_gamecontroller.h:340:45 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameController* SDL_GameControllerFromInstanceID(SDL_JoystickID joyid);

    // Function @ SDL_gamecontroller.h:329:45 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameController* SDL_GameControllerOpen(int joystick_index);

    // Function @ SDL_gamecontroller.h:305:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GameControllerMappingForDeviceIndex(int joystick_index);

    // Function @ SDL_gamecontroller.h:293:48 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern SDL_GameControllerType SDL_GameControllerTypeForIndex(int joystick_index);

    // Function @ SDL_gamecontroller.h:282:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GameControllerNameForIndex(int joystick_index);

    // Function @ SDL_gamecontroller.h:261:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IsGameController(int joystick_index);

    // Function @ SDL_gamecontroller.h:243:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GameControllerMapping(SDL_GameController* gamecontroller);

    // Function @ SDL_gamecontroller.h:224:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GameControllerMappingForGUID(SDL_JoystickGUID guid);

    // Function @ SDL_gamecontroller.h:210:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GameControllerMappingForIndex(int mapping_index);

    // Function @ SDL_gamecontroller.h:202:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerNumMappings();

    // Function @ SDL_gamecontroller.h:195:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerAddMapping(CString mappingString);

    // Function @ SDL_gamecontroller.h:161:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GameControllerAddMappingsFromRW(SDL_RWops* rw, int freerw);

    // Function @ SDL_sensor.h:258:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SensorUpdate();

    // Function @ SDL_sensor.h:247:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SensorClose(SDL_Sensor* sensor);

    // Function @ SDL_sensor.h:240:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SensorGetData(SDL_Sensor* sensor, float* data, int num_values);

    // Function @ SDL_sensor.h:228:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_SensorID SDL_SensorGetInstanceID(SDL_Sensor* sensor);

    // Function @ SDL_sensor.h:220:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SensorGetNonPortableType(SDL_Sensor* sensor);

    // Function @ SDL_sensor.h:212:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_SensorType SDL_SensorGetType(SDL_Sensor* sensor);

    // Function @ SDL_sensor.h:203:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_SensorGetName(SDL_Sensor* sensor);

    // Function @ SDL_sensor.h:195:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_Sensor* SDL_SensorFromInstanceID(SDL_SensorID instance_id);

    // Function @ SDL_sensor.h:187:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_Sensor* SDL_SensorOpen(int device_index);

    // Function @ SDL_sensor.h:179:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_SensorID SDL_SensorGetDeviceInstanceID(int device_index);

    // Function @ SDL_sensor.h:171:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SensorGetDeviceNonPortableType(int device_index);

    // Function @ SDL_sensor.h:162:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern SDL_SensorType SDL_SensorGetDeviceType(int device_index);

    // Function @ SDL_sensor.h:153:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_SensorGetDeviceName(int device_index);

    // Function @ SDL_sensor.h:145:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern int SDL_NumSensors();

    // Function @ SDL_sensor.h:138:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockSensors();

    // Function @ SDL_sensor.h:137:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LockSensors();

    // Function @ SDL_joystick.h:811:48 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:800:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_JoystickClose(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:791:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickSendEffect(SDL_Joystick* joystick, void* data, int size);

    // Function @ SDL_joystick.h:781:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickSetLED(SDL_Joystick* joystick, byte red, byte green, byte blue);

    // Function @ SDL_joystick.h:767:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_JoystickHasLED(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:756:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickRumbleTriggers(SDL_Joystick* joystick, ushort left_rumble, ushort right_rumble, uint duration_ms);

    // Function @ SDL_joystick.h:735:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickRumble(SDL_Joystick* joystick, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

    // Function @ SDL_joystick.h:718:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern byte SDL_JoystickGetButton(SDL_Joystick* joystick, int button);

    // Function @ SDL_joystick.h:705:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickGetBall(SDL_Joystick* joystick, int ball, long* dx, long* dy);

    // Function @ SDL_joystick.h:685:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern byte SDL_JoystickGetHat(SDL_Joystick* joystick, int hat);

    // Function @ SDL_joystick.h:646:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_JoystickGetAxisInitialState(SDL_Joystick* joystick, int axis, short* state);

    // Function @ SDL_joystick.h:631:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern short SDL_JoystickGetAxis(SDL_Joystick* joystick, int axis);

    // Function @ SDL_joystick.h:607:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickEventState(int state);

    // Function @ SDL_joystick.h:584:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_JoystickUpdate();

    // Function @ SDL_joystick.h:574:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickNumButtons(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:562:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickNumHats(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:550:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickNumBalls(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:534:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickNumAxes(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:517:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickID SDL_JoystickInstanceID(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:506:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_JoystickGetAttached(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:494:42 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickGUID SDL_JoystickGetGUIDFromString(CString pchGUID);

    // Function @ SDL_joystick.h:480:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, CString pszGUID, int cbGUID);

    // Function @ SDL_joystick.h:465:42 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickType SDL_JoystickGetType(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:457:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_JoystickGetSerial(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:446:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetProductVersion(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:436:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetProduct(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:426:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetVendor(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:416:42 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickGUID SDL_JoystickGetGUID(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:401:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_JoystickSetPlayerIndex(SDL_Joystick* joystick, int player_index);

    // Function @ SDL_joystick.h:393:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickGetPlayerIndex(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:382:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_JoystickName(SDL_Joystick* joystick);

    // Function @ SDL_joystick.h:368:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickSetVirtualHat(SDL_Joystick* joystick, int hat, byte value);

    // Function @ SDL_joystick.h:352:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickSetVirtualButton(SDL_Joystick* joystick, int button, byte value);

    // Function @ SDL_joystick.h:336:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickSetVirtualAxis(SDL_Joystick* joystick, int axis, short value);

    // Function @ SDL_joystick.h:320:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_JoystickIsVirtual(int device_index);

    // Function @ SDL_joystick.h:312:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickDetachVirtual(int device_index);

    // Function @ SDL_joystick.h:300:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickAttachVirtual(SDL_JoystickType type, int naxes, int nbuttons, int nhats);

    // Function @ SDL_joystick.h:293:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_Joystick* SDL_JoystickFromPlayerIndex(int player_index);

    // Function @ SDL_joystick.h:284:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_Joystick* SDL_JoystickFromInstanceID(SDL_JoystickID instance_id);

    // Function @ SDL_joystick.h:273:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_Joystick* SDL_JoystickOpen(int device_index);

    // Function @ SDL_joystick.h:253:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickID SDL_JoystickGetDeviceInstanceID(int device_index);

    // Function @ SDL_joystick.h:240:42 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickType SDL_JoystickGetDeviceType(int device_index);

    // Function @ SDL_joystick.h:228:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetDeviceProductVersion(int device_index);

    // Function @ SDL_joystick.h:215:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetDeviceProduct(int device_index);

    // Function @ SDL_joystick.h:202:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_JoystickGetDeviceVendor(int device_index);

    // Function @ SDL_joystick.h:189:42 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern SDL_JoystickGUID SDL_JoystickGetDeviceGUID(int device_index);

    // Function @ SDL_joystick.h:173:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_JoystickGetDevicePlayerIndex(int device_index);

    // Function @ SDL_joystick.h:167:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_JoystickNameForIndex(int device_index);

    // Function @ SDL_joystick.h:152:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern int SDL_NumJoysticks();

    // Function @ SDL_joystick.h:141:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockJoysticks();

    // Function @ SDL_joystick.h:128:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LockJoysticks();

    // Function @ SDL_mouse.h:403:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern int SDL_ShowCursor(int toggle);

    // Function @ SDL_mouse.h:383:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeCursor(SDL_Cursor* cursor);

    // Function @ SDL_mouse.h:369:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern SDL_Cursor* SDL_GetDefaultCursor();

    // Function @ SDL_mouse.h:358:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern SDL_Cursor* SDL_GetCursor();

    // Function @ SDL_mouse.h:346:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetCursor(SDL_Cursor* cursor);

    // Function @ SDL_mouse.h:330:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern SDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor id);

    // Function @ SDL_mouse.h:315:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern SDL_Cursor* SDL_CreateColorCursor(SDL_Surface* surface, int hot_x, int hot_y);

    // Function @ SDL_mouse.h:296:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern SDL_Cursor* SDL_CreateCursor(byte* data, byte* mask, int w, int h, int hot_x, int hot_y);

    // Function @ SDL_mouse.h:255:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GetRelativeMouseMode();

    // Function @ SDL_mouse.h:246:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern int SDL_CaptureMouse(CBool enabled);

    // Function @ SDL_mouse.h:209:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetRelativeMouseMode(CBool enabled);

    // Function @ SDL_mouse.h:186:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern int SDL_WarpMouseGlobal(int x, int y);

    // Function @ SDL_mouse.h:163:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern void SDL_WarpMouseInWindow(SDL_Window* window, int x, int y);

    // Function @ SDL_mouse.h:146:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetRelativeMouseState(long* x, long* y);

    // Function @ SDL_mouse.h:129:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetGlobalMouseState(long* x, long* y);

    // Function @ SDL_mouse.h:100:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetMouseState(long* x, long* y);

    // Function @ SDL_mouse.h:79:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_GetMouseFocus();

    // Function @ SDL_keyboard.h:284:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IsScreenKeyboardShown(SDL_Window* window);

    // Function @ SDL_keyboard.h:272:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasScreenKeyboardSupport();

    // Function @ SDL_keyboard.h:259:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetTextInputRect(SDL_Rect* rect);

    // Function @ SDL_keyboard.h:249:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern void SDL_StopTextInput();

    // Function @ SDL_keyboard.h:242:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IsTextInputActive();

    // Function @ SDL_keyboard.h:231:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern void SDL_StartTextInput();

    // Function @ SDL_keyboard.h:216:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Keycode SDL_GetKeyFromName(CString name);

    // Function @ SDL_keyboard.h:203:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetKeyName(SDL_Keycode key);

    // Function @ SDL_keyboard.h:186:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Scancode SDL_GetScancodeFromName(CString name);

    // Function @ SDL_keyboard.h:171:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetScancodeName(SDL_Scancode scancode);

    // Function @ SDL_keyboard.h:146:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key);

    // Function @ SDL_keyboard.h:132:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode);

    // Function @ SDL_keyboard.h:118:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetModState(SDL_Keymod modstate);

    // Function @ SDL_keyboard.h:101:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Keymod SDL_GetModState();

    // Function @ SDL_keyboard.h:90:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern byte* SDL_GetKeyboardState(long* numkeys);

    // Function @ SDL_keyboard.h:62:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_GetKeyboardFocus();

    // Function @ SDL_video.h:1888:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GL_DeleteContext(SDL_GLContext context);

    // Function @ SDL_video.h:1879:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GL_SwapWindow(SDL_Window* window);

    // Function @ SDL_video.h:1865:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_GetSwapInterval();

    // Function @ SDL_video.h:1848:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_SetSwapInterval(int interval);

    // Function @ SDL_video.h:1813:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GL_GetDrawableSize(SDL_Window* window, long* w, long* h);

    // Function @ SDL_video.h:1791:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_GLContext SDL_GL_GetCurrentContext();

    // Function @ SDL_video.h:1779:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_GL_GetCurrentWindow();

    // Function @ SDL_video.h:1768:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_MakeCurrent(SDL_Window* window, SDL_GLContext context);

    // Function @ SDL_video.h:1753:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_GLContext SDL_GL_CreateContext(SDL_Window* window);

    // Function @ SDL_video.h:1733:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_GetAttribute(SDL_GLattr attr, long* value);

    // Function @ SDL_video.h:1720:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_SetAttribute(SDL_GLattr attr, int value);

    // Function @ SDL_video.h:1702:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GL_ResetAttributes();

    // Function @ SDL_video.h:1691:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GL_ExtensionSupported(CString extension);

    // Function @ SDL_video.h:1670:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GL_UnloadLibrary();

    // Function @ SDL_video.h:1663:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_GL_GetProcAddress(CString proc);

    // Function @ SDL_video.h:1612:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GL_LoadLibrary(CString path);

    // Function @ SDL_video.h:1586:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DisableScreenSaver();

    // Function @ SDL_video.h:1573:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_EnableScreenSaver();

    // Function @ SDL_video.h:1563:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IsScreenSaverEnabled();

    // Function @ SDL_video.h:1544:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DestroyWindow(SDL_Window* window);

    // Function @ SDL_video.h:1531:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_FlashWindow(SDL_Window* window, SDL_FlashOperation operation);

    // Function @ SDL_video.h:1519:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowHitTest(SDL_Window* window, SDL_HitTest callback, void* callback_data);

    // Function @ SDL_video.h:1441:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetWindowGammaRamp(SDL_Window* window, ushort* red, ushort* green, ushort* blue);

    // Function @ SDL_video.h:1415:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowGammaRamp(SDL_Window* window, ushort* red, ushort* green, ushort* blue);

    // Function @ SDL_video.h:1385:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowInputFocus(SDL_Window* window);

    // Function @ SDL_video.h:1368:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowModalFor(SDL_Window* modal_window, SDL_Window* parent_window);

    // Function @ SDL_video.h:1356:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetWindowOpacity(SDL_Window* window, float* out_opacity);

    // Function @ SDL_video.h:1335:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowOpacity(SDL_Window* window, float opacity);

    // Function @ SDL_video.h:1316:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern float SDL_GetWindowBrightness(SDL_Window* window);

    // Function @ SDL_video.h:1299:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowBrightness(SDL_Window* window, float brightness);

    // Function @ SDL_video.h:1273:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_GetGrabbedWindow();

    // Function @ SDL_video.h:1261:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GetWindowMouseGrab(SDL_Window* window);

    // Function @ SDL_video.h:1250:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GetWindowKeyboardGrab(SDL_Window* window);

    // Function @ SDL_video.h:1239:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_GetWindowGrab(SDL_Window* window);

    // Function @ SDL_video.h:1228:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowMouseGrab(SDL_Window* window, CBool grabbed);

    // Function @ SDL_video.h:1216:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowKeyboardGrab(SDL_Window* window, CBool grabbed);

    // Function @ SDL_video.h:1200:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowGrab(SDL_Window* window, CBool grabbed);

    // Function @ SDL_video.h:1182:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpdateWindowSurfaceRects(SDL_Window* window, SDL_Rect* rects, int numrects);

    // Function @ SDL_video.h:1162:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpdateWindowSurface(SDL_Window* window);

    // Function @ SDL_video.h:1145:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_GetWindowSurface(SDL_Window* window);

    // Function @ SDL_video.h:1121:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowFullscreen(SDL_Window* window, uint flags);

    // Function @ SDL_video.h:1102:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RestoreWindow(SDL_Window* window);

    // Function @ SDL_video.h:1092:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_MinimizeWindow(SDL_Window* window);

    // Function @ SDL_video.h:1082:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_MaximizeWindow(SDL_Window* window);

    // Function @ SDL_video.h:1072:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_RaiseWindow(SDL_Window* window);

    // Function @ SDL_video.h:1065:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_HideWindow(SDL_Window* window);

    // Function @ SDL_video.h:1056:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_ShowWindow(SDL_Window* window);

    // Function @ SDL_video.h:1046:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowAlwaysOnTop(SDL_Window* window, CBool on_top);

    // Function @ SDL_video.h:1030:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowResizable(SDL_Window* window, CBool resizable);

    // Function @ SDL_video.h:1011:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowBordered(SDL_Window* window, CBool bordered);

    // Function @ SDL_video.h:992:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetWindowMaximumSize(SDL_Window* window, long* w, long* h);

    // Function @ SDL_video.h:977:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h);

    // Function @ SDL_video.h:964:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetWindowMinimumSize(SDL_Window* window, long* w, long* h);

    // Function @ SDL_video.h:949:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h);

    // Function @ SDL_video.h:935:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetWindowBordersSize(SDL_Window* window, long* top, long* left, long* bottom, long* right);

    // Function @ SDL_video.h:900:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetWindowSize(SDL_Window* window, long* w, long* h);

    // Function @ SDL_video.h:875:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowSize(SDL_Window* window, int w, int h);

    // Function @ SDL_video.h:852:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetWindowPosition(SDL_Window* window, long* x, long* y);

    // Function @ SDL_video.h:835:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowPosition(SDL_Window* window, int x, int y);

    // Function @ SDL_video.h:819:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_GetWindowData(SDL_Window* window, CString name);

    // Function @ SDL_video.h:806:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_SetWindowData(SDL_Window* window, CString name, void* userdata);

    // Function @ SDL_video.h:791:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowIcon(SDL_Window* window, SDL_Surface* icon);

    // Function @ SDL_video.h:783:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetWindowTitle(SDL_Window* window);

    // Function @ SDL_video.h:771:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetWindowTitle(SDL_Window* window, CString title);

    // Function @ SDL_video.h:759:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetWindowFlags(SDL_Window* window);

    // Function @ SDL_video.h:743:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_GetWindowFromID(uint id);

    // Function @ SDL_video.h:729:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetWindowID(SDL_Window* window);

    // Function @ SDL_video.h:713:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_CreateWindowFrom(void* data);

    // Function @ SDL_video.h:694:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_Window* SDL_CreateWindow(CString title, int x, int y, int w, int h, uint flags);

    // Function @ SDL_video.h:624:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetWindowPixelFormat(SDL_Window* window);

    // Function @ SDL_video.h:613:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetWindowDisplayMode(SDL_Window* window, SDL_DisplayMode* mode);

    // Function @ SDL_video.h:598:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetWindowDisplayMode(SDL_Window* window, SDL_DisplayMode* mode);

    // Function @ SDL_video.h:579:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetWindowDisplayIndex(SDL_Window* window);

    // Function @ SDL_video.h:566:43 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_DisplayMode* SDL_GetClosestDisplayMode(int displayIndex, SDL_DisplayMode* mode, SDL_DisplayMode* closest);

    // Function @ SDL_video.h:542:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode* mode);

    // Function @ SDL_video.h:521:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode* mode);

    // Function @ SDL_video.h:500:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetDisplayMode(int displayIndex, int modeIndex, SDL_DisplayMode* mode);

    // Function @ SDL_video.h:478:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumDisplayModes(int displayIndex);

    // Function @ SDL_video.h:461:48 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern SDL_DisplayOrientation SDL_GetDisplayOrientation(int displayIndex);

    // Function @ SDL_video.h:450:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetDisplayDPI(int displayIndex, float* ddpi, float* hdpi, float* vdpi);

    // Function @ SDL_video.h:424:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetDisplayUsableBounds(int displayIndex, SDL_Rect* rect);

    // Function @ SDL_video.h:393:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetDisplayBounds(int displayIndex, SDL_Rect* rect);

    // Function @ SDL_video.h:379:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetDisplayName(int displayIndex);

    // Function @ SDL_video.h:365:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumVideoDisplays();

    // Function @ SDL_video.h:353:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetCurrentVideoDriver();

    // Function @ SDL_video.h:340:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern void SDL_VideoQuit();

    // Function @ SDL_video.h:331:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_VideoInit(CString driver_name);

    // Function @ SDL_video.h:302:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetVideoDriver(int index);

    // Function @ SDL_video.h:289:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumVideoDrivers();

    // Function @ SDL_surface.h:877:49 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionModeForResolution(int width, int height);

    // Function @ SDL_surface.h:871:49 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionMode();

    // Function @ SDL_surface.h:866:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetYUVConversionMode(SDL_YUV_CONVERSION_MODE mode);

    // Function @ SDL_surface.h:859:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LowerBlitScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    // Function @ SDL_surface.h:838:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpperBlitScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    // Function @ SDL_surface.h:822:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SoftStretchLinear(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    // Function @ SDL_surface.h:814:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SoftStretch(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    // Function @ SDL_surface.h:803:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LowerBlit(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    // Function @ SDL_surface.h:779:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UpperBlit(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    // Function @ SDL_surface.h:708:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_FillRects(SDL_Surface* dst, SDL_Rect* rects, int count, uint color);

    // Function @ SDL_surface.h:684:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_FillRect(SDL_Surface* dst, SDL_Rect* rect, uint color);

    // Function @ SDL_surface.h:657:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_ConvertPixels(int width, int height, uint src_format, void* src, int src_pitch, uint dst_format, void* dst, int dst_pitch);

    // Function @ SDL_surface.h:640:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_ConvertSurfaceFormat(SDL_Surface* src, uint pixel_format, uint flags);

    // Function @ SDL_surface.h:617:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_ConvertSurface(SDL_Surface* src, SDL_PixelFormat* fmt, uint flags);

    // Function @ SDL_surface.h:595:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_DuplicateSurface(SDL_Surface* surface);

    // Function @ SDL_surface.h:583:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetClipRect(SDL_Surface* surface, SDL_Rect* rect);

    // Function @ SDL_surface.h:566:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_SetClipRect(SDL_Surface* surface, SDL_Rect* rect);

    // Function @ SDL_surface.h:545:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode);

    // Function @ SDL_surface.h:532:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode);

    // Function @ SDL_surface.h:515:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetSurfaceAlphaMod(SDL_Surface* surface, byte* alpha);

    // Function @ SDL_surface.h:501:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetSurfaceAlphaMod(SDL_Surface* surface, byte alpha);

    // Function @ SDL_surface.h:481:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetSurfaceColorMod(SDL_Surface* surface, byte* r, byte* g, byte* b);

    // Function @ SDL_surface.h:464:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetSurfaceColorMod(SDL_Surface* surface, byte r, byte g, byte b);

    // Function @ SDL_surface.h:442:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetColorKey(SDL_Surface* surface, uint* key);

    // Function @ SDL_surface.h:424:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasColorKey(SDL_Surface* surface);

    // Function @ SDL_surface.h:410:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetColorKey(SDL_Surface* surface, int flag, uint key);

    // Function @ SDL_surface.h:386:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSurfaceRLE(SDL_Surface* surface);

    // Function @ SDL_surface.h:373:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetSurfaceRLE(SDL_Surface* surface, int flag);

    // Function @ SDL_surface.h:347:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SaveBMP_RW(SDL_Surface* surface, SDL_RWops* dst, int freedst);

    // Function @ SDL_surface.h:319:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_LoadBMP_RW(SDL_RWops* src, int freesrc);

    // Function @ SDL_surface.h:303:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockSurface(SDL_Surface* surface);

    // Function @ SDL_surface.h:294:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LockSurface(SDL_Surface* surface);

    // Function @ SDL_surface.h:272:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetSurfacePalette(SDL_Surface* surface, SDL_Palette* palette);

    // Function @ SDL_surface.h:260:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeSurface(SDL_Surface* surface);

    // Function @ SDL_surface.h:245:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_CreateRGBSurfaceWithFormatFrom(void* pixels, int width, int height, int depth, int pitch, uint format);

    // Function @ SDL_surface.h:210:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_CreateRGBSurfaceFrom(void* pixels, int width, int height, int depth, int pitch, uint Rmask, uint Gmask, uint Bmask, uint Amask);

    // Function @ SDL_surface.h:181:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_CreateRGBSurfaceWithFormat(uint flags, int width, int height, int depth, uint format);

    // Function @ SDL_surface.h:156:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [DllImport(LibraryName)]
    public static extern SDL_Surface* SDL_CreateRGBSurface(uint flags, int width, int height, int depth, uint Rmask, uint Gmask, uint Bmask, uint Amask);

    // Function @ SDL_blendmode.h:185:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_blendmode.h)
    [DllImport(LibraryName)]
    public static extern SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);

    // Function @ SDL_rect.h:205:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IntersectRectAndLine(SDL_Rect* rect, long* X1, long* Y1, long* X2, long* Y2);

    // Function @ SDL_rect.h:184:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_EnclosePoints(SDL_Point* points, int count, SDL_Rect* clip, SDL_Rect* result);

    // Function @ SDL_rect.h:165:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnionRect(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

    // Function @ SDL_rect.h:153:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_IntersectRect(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

    // Function @ SDL_rect.h:135:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasIntersection(SDL_Rect* A, SDL_Rect* B);

    // Function @ SDL_pixels.h:602:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern void SDL_CalculateGammaRamp(float gamma, ushort* ramp);

    // Function @ SDL_pixels.h:589:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetRGBA(uint pixel, SDL_PixelFormat* format, byte* r, byte* g, byte* b, byte* a);

    // Function @ SDL_pixels.h:562:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetRGB(uint pixel, SDL_PixelFormat* format, byte* r, byte* g, byte* b);

    // Function @ SDL_pixels.h:539:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_MapRGBA(SDL_PixelFormat* format, byte r, byte g, byte b, byte a);

    // Function @ SDL_pixels.h:506:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_MapRGB(SDL_PixelFormat* format, byte r, byte g, byte b);

    // Function @ SDL_pixels.h:476:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreePalette(SDL_Palette* palette);

    // Function @ SDL_pixels.h:465:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetPaletteColors(SDL_Palette* palette, SDL_Color* colors, int firstcolor, int ncolors);

    // Function @ SDL_pixels.h:449:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetPixelFormatPalette(SDL_PixelFormat* format, SDL_Palette* palette);

    // Function @ SDL_pixels.h:436:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern SDL_Palette* SDL_AllocPalette(int ncolors);

    // Function @ SDL_pixels.h:422:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeFormat(SDL_PixelFormat* format);

    // Function @ SDL_pixels.h:413:43 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern SDL_PixelFormat* SDL_AllocFormat(uint pixel_format);

    // Function @ SDL_pixels.h:394:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_MasksToPixelFormatEnum(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask);

    // Function @ SDL_pixels.h:372:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_PixelFormatEnumToMasks(uint format, long* bpp, uint* Rmask, uint* Gmask, uint* Bmask, uint* Amask);

    // Function @ SDL_pixels.h:356:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetPixelFormatName(uint format);

    // Function @ SDL_cpuinfo.h:514:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SIMDFree(void* ptr);

    // Function @ SDL_cpuinfo.h:492:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_SIMDRealloc(void* mem, ulong len);

    // Function @ SDL_cpuinfo.h:470:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_SIMDAlloc(ulong len);

    // Function @ SDL_cpuinfo.h:433:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_SIMDGetAlignment();

    // Function @ SDL_cpuinfo.h:416:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetSystemRAM();

    // Function @ SDL_cpuinfo.h:407:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasNEON();

    // Function @ SDL_cpuinfo.h:398:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasARMSIMD();

    // Function @ SDL_cpuinfo.h:385:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasAVX512F();

    // Function @ SDL_cpuinfo.h:374:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasAVX2();

    // Function @ SDL_cpuinfo.h:352:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasAVX();

    // Function @ SDL_cpuinfo.h:330:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSSE42();

    // Function @ SDL_cpuinfo.h:310:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSSE41();

    // Function @ SDL_cpuinfo.h:290:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSSE3();

    // Function @ SDL_cpuinfo.h:270:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSSE2();

    // Function @ SDL_cpuinfo.h:250:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasSSE();

    // Function @ SDL_cpuinfo.h:230:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_Has3DNow();

    // Function @ SDL_cpuinfo.h:210:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasMMX();

    // Function @ SDL_cpuinfo.h:190:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasAltiVec();

    // Function @ SDL_cpuinfo.h:169:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasRDTSC();

    // Function @ SDL_cpuinfo.h:149:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetCPUCacheLineSize();

    // Function @ SDL_cpuinfo.h:137:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_cpuinfo.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetCPUCount();

    // Function @ SDL_clipboard.h:78:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_clipboard.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_HasClipboardText();

    // Function @ SDL_clipboard.h:66:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_clipboard.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetClipboardText();

    // Function @ SDL_clipboard.h:51:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_clipboard.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetClipboardText(CString text);

    // Function @ SDL_audio.h:1151:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_CloseAudioDevice(SDL_AudioDeviceID dev);

    // Function @ SDL_audio.h:1150:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_CloseAudio();

    // Function @ SDL_audio.h:1134:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);

    // Function @ SDL_audio.h:1133:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_UnlockAudio();

    // Function @ SDL_audio.h:1132:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LockAudioDevice(SDL_AudioDeviceID dev);

    // Function @ SDL_audio.h:1131:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_LockAudio();

    // Function @ SDL_audio.h:1119:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_ClearQueuedAudio(SDL_AudioDeviceID dev);

    // Function @ SDL_audio.h:1085:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_GetQueuedAudioSize(SDL_AudioDeviceID dev);

    // Function @ SDL_audio.h:1051:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_DequeueAudio(SDL_AudioDeviceID dev, void* data, uint len);

    // Function @ SDL_audio.h:1003:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_QueueAudio(SDL_AudioDeviceID dev, void* data, uint len);

    // Function @ SDL_audio.h:951:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_MixAudioFormat(byte* dst, byte* src, SDL_AudioFormat format, uint len, int volume);

    // Function @ SDL_audio.h:920:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_MixAudio(byte* dst, byte* src, uint len, int volume);

    // Function @ SDL_audio.h:897:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeAudioStream(SDL_AudioStream* stream);

    // Function @ SDL_audio.h:885:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_AudioStreamClear(SDL_AudioStream* stream);

    // Function @ SDL_audio.h:873:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AudioStreamFlush(SDL_AudioStream* stream);

    // Function @ SDL_audio.h:856:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AudioStreamAvailable(SDL_AudioStream* stream);

    // Function @ SDL_audio.h:840:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AudioStreamGet(SDL_AudioStream* stream, void* buf, int len);

    // Function @ SDL_audio.h:823:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AudioStreamPut(SDL_AudioStream* stream, void* buf, int len);

    // Function @ SDL_audio.h:801:43 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern SDL_AudioStream* SDL_NewAudioStream(SDL_AudioFormat src_format, byte src_channels, int src_rate, SDL_AudioFormat dst_format, byte dst_channels, int dst_rate);

    // Function @ SDL_audio.h:770:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_ConvertAudio(SDL_AudioCVT* cvt);

    // Function @ SDL_audio.h:726:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_BuildAudioCVT(SDL_AudioCVT* cvt, SDL_AudioFormat src_format, byte src_channels, int src_rate, SDL_AudioFormat dst_format, byte dst_channels, int dst_rate);

    // Function @ SDL_audio.h:694:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeWAV(byte* audio_buf);

    // Function @ SDL_audio.h:668:40 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern SDL_AudioSpec* SDL_LoadWAV_RW(SDL_RWops* src, int freesrc, SDL_AudioSpec* spec, byte** audio_buf, uint* audio_len);

    // Function @ SDL_audio.h:585:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_PauseAudioDevice(SDL_AudioDeviceID dev, int pause_on);

    // Function @ SDL_audio.h:584:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_PauseAudio(int pause_on);

    // Function @ SDL_audio.h:571:41 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern SDL_AudioStatus SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev);

    // Function @ SDL_audio.h:570:41 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern SDL_AudioStatus SDL_GetAudioStatus();

    // Function @ SDL_audio.h:549:43 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern SDL_AudioDeviceID SDL_OpenAudioDevice(CString device, int iscapture, SDL_AudioSpec* desired, SDL_AudioSpec* obtained, int allowed_changes);

    // Function @ SDL_audio.h:439:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetAudioDeviceSpec(int index, int iscapture, SDL_AudioSpec* spec);

    // Function @ SDL_audio.h:414:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetAudioDeviceName(int index, int iscapture);

    // Function @ SDL_audio.h:390:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumAudioDevices(int iscapture);

    // Function @ SDL_audio.h:332:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_OpenAudio(SDL_AudioSpec* desired, SDL_AudioSpec* obtained);

    // Function @ SDL_audio.h:285:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetCurrentAudioDriver();

    // Function @ SDL_audio.h:266:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern void SDL_AudioQuit();

    // Function @ SDL_audio.h:265:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AudioInit(CString driver_name);

    // Function @ SDL_audio.h:254:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetAudioDriver(int index);

    // Function @ SDL_audio.h:253:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumAudioDrivers();

    // Function @ SDL_rwops.h:401:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteBE64(SDL_RWops* dst, ulong value);

    // Function @ SDL_rwops.h:400:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteLE64(SDL_RWops* dst, ulong value);

    // Function @ SDL_rwops.h:399:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteBE32(SDL_RWops* dst, uint value);

    // Function @ SDL_rwops.h:398:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteLE32(SDL_RWops* dst, uint value);

    // Function @ SDL_rwops.h:397:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteBE16(SDL_RWops* dst, ushort value);

    // Function @ SDL_rwops.h:396:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteLE16(SDL_RWops* dst, ushort value);

    // Function @ SDL_rwops.h:395:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_WriteU8(SDL_RWops* dst, byte value);

    // Function @ SDL_rwops.h:386:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_ReadBE64(SDL_RWops* src);

    // Function @ SDL_rwops.h:385:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_ReadLE64(SDL_RWops* src);

    // Function @ SDL_rwops.h:384:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_ReadBE32(SDL_RWops* src);

    // Function @ SDL_rwops.h:383:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_ReadLE32(SDL_RWops* src);

    // Function @ SDL_rwops.h:382:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_ReadBE16(SDL_RWops* src);

    // Function @ SDL_rwops.h:381:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ushort SDL_ReadLE16(SDL_RWops* src);

    // Function @ SDL_rwops.h:380:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern byte SDL_ReadU8(SDL_RWops* src);

    // Function @ SDL_rwops.h:372:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_LoadFile(CString file, ulong* datasize);

    // Function @ SDL_rwops.h:355:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_LoadFile_RW(SDL_RWops* src, ulong* datasize, int freesrc);

    // Function @ SDL_rwops.h:339:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern int SDL_RWclose(SDL_RWops* context);

    // Function @ SDL_rwops.h:309:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_RWwrite(SDL_RWops* context, void* ptr, ulong size, ulong num);

    // Function @ SDL_rwops.h:279:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_RWread(SDL_RWops* context, void* ptr, ulong size, ulong maxnum);

    // Function @ SDL_rwops.h:251:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern long SDL_RWtell(SDL_RWops* context);

    // Function @ SDL_rwops.h:227:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern long SDL_RWseek(SDL_RWops* context, long offset, int whence);

    // Function @ SDL_rwops.h:194:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern long SDL_RWsize(SDL_RWops* context);

    // Function @ SDL_rwops.h:178:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern void SDL_FreeRW(SDL_RWops* area);

    // Function @ SDL_rwops.h:177:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern SDL_RWops* SDL_AllocRW();

    // Function @ SDL_rwops.h:171:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern SDL_RWops* SDL_RWFromConstMem(void* mem, int size);

    // Function @ SDL_rwops.h:170:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern SDL_RWops* SDL_RWFromMem(void* mem, int size);

    // Function @ SDL_rwops.h:166:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern SDL_RWops* SDL_RWFromFP(void* fp, CBool autoclose);

    // Function @ SDL_rwops.h:159:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [DllImport(LibraryName)]
    public static extern SDL_RWops* SDL_RWFromFile(CString file, CString mode);

    // Function @ SDL_thread.h:444:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern void SDL_TLSCleanup();

    // Function @ SDL_thread.h:439:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern int SDL_TLSSet(SDL_TLSID id, void* value, FnPtr_SDL_VoidPtr_Void destructor);

    // Function @ SDL_thread.h:414:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_TLSGet(SDL_TLSID id);

    // Function @ SDL_thread.h:400:35 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern SDL_TLSID SDL_TLSCreate();

    // Function @ SDL_thread.h:385:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DetachThread(SDL_Thread* thread);

    // Function @ SDL_thread.h:349:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern void SDL_WaitThread(SDL_Thread* thread, long* status);

    // Function @ SDL_thread.h:316:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetThreadPriority(SDL_ThreadPriority priority);

    // Function @ SDL_thread.h:303:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern SDL_threadID SDL_GetThreadID(SDL_Thread* thread);

    // Function @ SDL_thread.h:288:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern SDL_threadID SDL_ThreadID();

    // Function @ SDL_thread.h:272:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetThreadName(SDL_Thread* thread);

    // Function @ SDL_thread.h:256:1 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern SDL_Thread* SDL_CreateThreadWithStackSize(SDL_ThreadFunction fn, CString name, ulong stacksize, void* data);

    // Function @ SDL_thread.h:212:1 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [DllImport(LibraryName)]
    public static extern SDL_Thread* SDL_CreateThread(SDL_ThreadFunction fn, CString name, void* data);

    // Function @ SDL_mutex.h:421:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern int SDL_CondWaitTimeout(SDL_cond* cond, SDL_mutex* mutex, uint ms);

    // Function @ SDL_mutex.h:394:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern int SDL_CondWait(SDL_cond* cond, SDL_mutex* mutex);

    // Function @ SDL_mutex.h:368:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern int SDL_CondBroadcast(SDL_cond* cond);

    // Function @ SDL_mutex.h:353:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern int SDL_CondSignal(SDL_cond* cond);

    // Function @ SDL_mutex.h:338:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DestroyCond(SDL_cond* cond);

    // Function @ SDL_mutex.h:325:35 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern SDL_cond* SDL_CreateCond();

    // Function @ SDL_mutex.h:299:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_SemValue(SDL_sem* sem);

    // Function @ SDL_mutex.h:289:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SemPost(SDL_sem* sem);

    // Function @ SDL_mutex.h:273:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SemWaitTimeout(SDL_sem* sem, uint ms);

    // Function @ SDL_mutex.h:250:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SemTryWait(SDL_sem* sem);

    // Function @ SDL_mutex.h:228:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SemWait(SDL_sem* sem);

    // Function @ SDL_mutex.h:203:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DestroySemaphore(SDL_sem* sem);

    // Function @ SDL_mutex.h:186:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern SDL_sem* SDL_CreateSemaphore(uint initial_value);

    // Function @ SDL_mutex.h:152:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern void SDL_DestroyMutex(SDL_mutex* mutex);

    // Function @ SDL_mutex.h:133:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern int SDL_UnlockMutex(SDL_mutex* mutex);

    // Function @ SDL_mutex.h:116:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern int SDL_TryLockMutex(SDL_mutex* mutex);

    // Function @ SDL_mutex.h:95:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern int SDL_LockMutex(SDL_mutex* mutex);

    // Function @ SDL_mutex.h:79:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [DllImport(LibraryName)]
    public static extern SDL_mutex* SDL_CreateMutex();

    // Function @ SDL_error.h:144:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_error.h)
    [DllImport(LibraryName)]
    public static extern int SDL_Error(SDL_errorcode code);

    // Function @ SDL_error.h:122:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_error.h)
    [DllImport(LibraryName)]
    public static extern void SDL_ClearError();

    // Function @ SDL_error.h:114:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_error.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetErrorMsg(CString errstr, int maxlen);

    // Function @ SDL_error.h:99:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_error.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetError();

    // Function @ SDL_error.h:64:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_error.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetError(CString fmt);

    // Function @ SDL_atomic.h:368:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_AtomicGetPtr(void** a);

    // Function @ SDL_atomic.h:354:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_AtomicSetPtr(void** a, void* v);

    // Function @ SDL_atomic.h:339:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_AtomicCASPtr(void** a, void* oldval, void* newval);

    // Function @ SDL_atomic.h:303:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AtomicAdd(SDL_atomic_t* a, int v);

    // Function @ SDL_atomic.h:286:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AtomicGet(SDL_atomic_t* a);

    // Function @ SDL_atomic.h:273:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern int SDL_AtomicSet(SDL_atomic_t* a, int v);

    // Function @ SDL_atomic.h:257:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_AtomicCAS(SDL_atomic_t* a, int oldval, int newval);

    // Function @ SDL_atomic.h:178:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern void SDL_MemoryBarrierAcquireFunction();

    // Function @ SDL_atomic.h:177:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern void SDL_MemoryBarrierReleaseFunction();

    // Function @ SDL_atomic.h:134:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern void SDL_AtomicUnlock(SDL_SpinLock* @lock);

    // Function @ SDL_atomic.h:117:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern void SDL_AtomicLock(SDL_SpinLock* @lock);

    // Function @ SDL_atomic.h:104:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [DllImport(LibraryName)]
    public static extern CBool SDL_AtomicTryLock(SDL_SpinLock* @lock);

    // Function @ SDL_assert.h:302:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_assert.h)
    [DllImport(LibraryName)]
    public static extern void SDL_ResetAssertionReport();

    // Function @ SDL_assert.h:290:48 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_assert.h)
    [DllImport(LibraryName)]
    public static extern SDL_AssertData* SDL_GetAssertionReport();

    // Function @ SDL_assert.h:264:46 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_assert.h)
    [DllImport(LibraryName)]
    public static extern SDL_AssertionHandler SDL_GetAssertionHandler(void** puserdata);

    // Function @ SDL_assert.h:241:46 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_assert.h)
    [DllImport(LibraryName)]
    public static extern SDL_AssertionHandler SDL_GetDefaultAssertionHandler();

    // Function @ SDL_assert.h:222:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_assert.h)
    [DllImport(LibraryName)]
    public static extern void SDL_SetAssertionHandler(SDL_AssertionHandler handler, void* userdata);

    // Function @ SDL_assert.h:129:41 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_assert.h)
    [DllImport(LibraryName)]
    public static extern SDL_AssertState SDL_ReportAssertion(SDL_AssertData* param, CString param2, CString param3, int param4);

    // Function @ SDL_stdinc.h:626:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_iconv_string(CString tocode, CString fromcode, CString inbuf, ulong inbytesleft);

    // Function @ SDL_stdinc.h:619:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_iconv(SDL_iconv_t cd, CString* inbuf, ulong* inbytesleft, CString* outbuf, ulong* outbytesleft);

    // Function @ SDL_stdinc.h:618:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_iconv_close(SDL_iconv_t cd);

    // Function @ SDL_stdinc.h:616:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern SDL_iconv_t SDL_iconv_open(CString tocode, CString fromcode);

    // Function @ SDL_stdinc.h:606:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_tanf(float x);

    // Function @ SDL_stdinc.h:605:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_tan(double x);

    // Function @ SDL_stdinc.h:604:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_sqrtf(float x);

    // Function @ SDL_stdinc.h:603:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_sqrt(double x);

    // Function @ SDL_stdinc.h:602:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_sinf(float x);

    // Function @ SDL_stdinc.h:601:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_sin(double x);

    // Function @ SDL_stdinc.h:600:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_scalbnf(float x, int n);

    // Function @ SDL_stdinc.h:599:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_scalbn(double x, int n);

    // Function @ SDL_stdinc.h:598:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern long SDL_lroundf(float x);

    // Function @ SDL_stdinc.h:597:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern long SDL_lround(double x);

    // Function @ SDL_stdinc.h:596:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_roundf(float x);

    // Function @ SDL_stdinc.h:595:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_round(double x);

    // Function @ SDL_stdinc.h:594:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_powf(float x, float y);

    // Function @ SDL_stdinc.h:593:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_pow(double x, double y);

    // Function @ SDL_stdinc.h:592:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_log10f(float x);

    // Function @ SDL_stdinc.h:591:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_log10(double x);

    // Function @ SDL_stdinc.h:590:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_logf(float x);

    // Function @ SDL_stdinc.h:589:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_log(double x);

    // Function @ SDL_stdinc.h:588:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_fmodf(float x, float y);

    // Function @ SDL_stdinc.h:587:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_fmod(double x, double y);

    // Function @ SDL_stdinc.h:586:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_truncf(float x);

    // Function @ SDL_stdinc.h:585:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_trunc(double x);

    // Function @ SDL_stdinc.h:584:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_floorf(float x);

    // Function @ SDL_stdinc.h:583:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_floor(double x);

    // Function @ SDL_stdinc.h:582:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_fabsf(float x);

    // Function @ SDL_stdinc.h:581:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_fabs(double x);

    // Function @ SDL_stdinc.h:580:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_expf(float x);

    // Function @ SDL_stdinc.h:579:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_exp(double x);

    // Function @ SDL_stdinc.h:578:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_cosf(float x);

    // Function @ SDL_stdinc.h:577:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_cos(double x);

    // Function @ SDL_stdinc.h:576:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_copysignf(float x, float y);

    // Function @ SDL_stdinc.h:575:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_copysign(double x, double y);

    // Function @ SDL_stdinc.h:574:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_ceilf(float x);

    // Function @ SDL_stdinc.h:573:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_ceil(double x);

    // Function @ SDL_stdinc.h:572:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_atan2f(float x, float y);

    // Function @ SDL_stdinc.h:571:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_atan2(double x, double y);

    // Function @ SDL_stdinc.h:570:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_atanf(float x);

    // Function @ SDL_stdinc.h:569:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_atan(double x);

    // Function @ SDL_stdinc.h:568:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_asinf(float x);

    // Function @ SDL_stdinc.h:567:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_asin(double x);

    // Function @ SDL_stdinc.h:566:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern float SDL_acosf(float x);

    // Function @ SDL_stdinc.h:565:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_acos(double x);

    // Function @ SDL_stdinc.h:557:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_vsnprintf(CString text, ulong maxlen, CString fmt, IntPtr ap);

    // Function @ SDL_stdinc.h:556:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_snprintf(CString text, ulong maxlen, CString fmt);

    // Function @ SDL_stdinc.h:555:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_vsscanf(CString text, CString fmt, IntPtr ap);

    // Function @ SDL_stdinc.h:554:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_sscanf(CString text, CString fmt);

    // Function @ SDL_stdinc.h:552:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_strncasecmp(CString str1, CString str2, ulong len);

    // Function @ SDL_stdinc.h:551:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_strcasecmp(CString str1, CString str2);

    // Function @ SDL_stdinc.h:550:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_strncmp(CString str1, CString str2, ulong maxlen);

    // Function @ SDL_stdinc.h:549:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_strcmp(CString str1, CString str2);

    // Function @ SDL_stdinc.h:547:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_strtod(CString str, CString* endp);

    // Function @ SDL_stdinc.h:546:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_strtoull(CString str, CString* endp, int @base);

    // Function @ SDL_stdinc.h:545:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern long SDL_strtoll(CString str, CString* endp, int @base);

    // Function @ SDL_stdinc.h:544:39 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_strtoul(CString str, CString* endp, int @base);

    // Function @ SDL_stdinc.h:543:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern long SDL_strtol(CString str, CString* endp, int @base);

    // Function @ SDL_stdinc.h:542:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern double SDL_atof(CString str);

    // Function @ SDL_stdinc.h:541:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_atoi(CString str);

    // Function @ SDL_stdinc.h:539:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_ulltoa(ulong value, CString str, int radix);

    // Function @ SDL_stdinc.h:538:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_lltoa(long value, CString str, int radix);

    // Function @ SDL_stdinc.h:537:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_ultoa(ulong value, CString str, int radix);

    // Function @ SDL_stdinc.h:536:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_ltoa(long value, CString str, int radix);

    // Function @ SDL_stdinc.h:535:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_uitoa(uint value, CString str, int radix);

    // Function @ SDL_stdinc.h:534:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_itoa(int value, CString str, int radix);

    // Function @ SDL_stdinc.h:532:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_utf8strlen(CString str);

    // Function @ SDL_stdinc.h:531:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_strtokr(CString s1, CString s2, CString* saveptr);

    // Function @ SDL_stdinc.h:530:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_strstr(CString haystack, CString needle);

    // Function @ SDL_stdinc.h:529:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_strrchr(CString str, int c);

    // Function @ SDL_stdinc.h:528:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_strchr(CString str, int c);

    // Function @ SDL_stdinc.h:527:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_strlwr(CString str);

    // Function @ SDL_stdinc.h:526:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_strupr(CString str);

    // Function @ SDL_stdinc.h:525:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_strrev(CString str);

    // Function @ SDL_stdinc.h:524:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_strdup(CString str);

    // Function @ SDL_stdinc.h:523:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_strlcat(CString dst, CString src, ulong maxlen);

    // Function @ SDL_stdinc.h:522:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_utf8strlcpy(CString dst, CString src, ulong dst_bytes);

    // Function @ SDL_stdinc.h:521:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_strlcpy(CString dst, CString src, ulong maxlen);

    // Function @ SDL_stdinc.h:520:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_strlen(CString str);

    // Function @ SDL_stdinc.h:518:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_wcsncasecmp(wchar_t* str1, wchar_t* str2, ulong len);

    // Function @ SDL_stdinc.h:517:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_wcscasecmp(wchar_t* str1, wchar_t* str2);

    // Function @ SDL_stdinc.h:516:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_wcsncmp(wchar_t* str1, wchar_t* str2, ulong maxlen);

    // Function @ SDL_stdinc.h:515:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_wcscmp(wchar_t* str1, wchar_t* str2);

    // Function @ SDL_stdinc.h:513:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern wchar_t* SDL_wcsstr(wchar_t* haystack, wchar_t* needle);

    // Function @ SDL_stdinc.h:512:34 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern wchar_t* SDL_wcsdup(wchar_t* wstr);

    // Function @ SDL_stdinc.h:511:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_wcslcat(wchar_t* dst, wchar_t* src, ulong maxlen);

    // Function @ SDL_stdinc.h:510:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_wcslcpy(wchar_t* dst, wchar_t* src, ulong maxlen);

    // Function @ SDL_stdinc.h:509:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern ulong SDL_wcslen(wchar_t* wstr);

    // Function @ SDL_stdinc.h:507:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_memcmp(void* s1, void* s2, ulong len);

    // Function @ SDL_stdinc.h:506:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_memmove(void* dst, void* src, ulong len);

    // Function @ SDL_stdinc.h:504:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_memcpy(void* dst, void* src, ulong len);

    // Function @ SDL_stdinc.h:455:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_memset(void* dst, int c, ulong len);

    // Function @ SDL_stdinc.h:453:32 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern uint SDL_crc32(uint crc, void* data, ulong len);

    // Function @ SDL_stdinc.h:451:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_tolower(int x);

    // Function @ SDL_stdinc.h:450:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_toupper(int x);

    // Function @ SDL_stdinc.h:449:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_isgraph(int x);

    // Function @ SDL_stdinc.h:448:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_isprint(int x);

    // Function @ SDL_stdinc.h:447:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_islower(int x);

    // Function @ SDL_stdinc.h:446:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_isupper(int x);

    // Function @ SDL_stdinc.h:445:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_isspace(int x);

    // Function @ SDL_stdinc.h:444:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_ispunct(int x);

    // Function @ SDL_stdinc.h:443:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_isxdigit(int x);

    // Function @ SDL_stdinc.h:442:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_isdigit(int x);

    // Function @ SDL_stdinc.h:441:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_iscntrl(int x);

    // Function @ SDL_stdinc.h:440:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_isblank(int x);

    // Function @ SDL_stdinc.h:439:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_isalnum(int x);

    // Function @ SDL_stdinc.h:438:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_isalpha(int x);

    // Function @ SDL_stdinc.h:431:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_abs(int x);

    // Function @ SDL_stdinc.h:429:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void SDL_qsort(void* @base, ulong nmemb, ulong size, FnPtr_SDL_VoidPtr_VoidPtr_Int compare);

    // Function @ SDL_stdinc.h:427:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_setenv(CString name, CString value, int overwrite);

    // Function @ SDL_stdinc.h:426:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_getenv(CString name);

    // Function @ SDL_stdinc.h:424:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_GetNumAllocations();

    // Function @ SDL_stdinc.h:416:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern int SDL_SetMemoryFunctions(SDL_malloc_func malloc_func, SDL_calloc_func calloc_func, SDL_realloc_func realloc_func, SDL_free_func free_func);

    // Function @ SDL_stdinc.h:408:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void SDL_GetMemoryFunctions(SDL_malloc_func* malloc_func, SDL_calloc_func* calloc_func, SDL_realloc_func* realloc_func, SDL_free_func* free_func);

    // Function @ SDL_stdinc.h:398:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void SDL_free(void* mem);

    // Function @ SDL_stdinc.h:397:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_realloc(void* mem, ulong size);

    // Function @ SDL_stdinc.h:396:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_calloc(ulong nmemb, ulong size);

    // Function @ SDL_stdinc.h:395:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [DllImport(LibraryName)]
    public static extern void* SDL_malloc(ulong size);

    // Function @ SDL_platform.h:223:38 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_platform.h)
    [DllImport(LibraryName)]
    public static extern CString SDL_GetPlatform();

    // FunctionPointer @ SDL_timer.h:111:27 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_TimerCallback
    {
        public delegate* unmanaged<uint, void*, uint> Pointer;
    }

    // FunctionPointer @ SDL_log.h:343:24 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_LogOutputFunction
    {
        public delegate* unmanaged<void*, int, SDL_LogPriority, CString, void> Pointer;
    }

    // FunctionPointer @ SDL_hints.h:1779:24 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_HintCallback
    {
        public delegate* unmanaged<void*, CString, CString, CString, void> Pointer;
    }

    // FunctionPointer @ SDL_events.h:918:24 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_EventFilter
    {
        public delegate* unmanaged<void*, SDL_Event*, int> Pointer;
    }

    // FunctionPointer @ SDL_rwops.h:94:20 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDL_SDL_RWopsPtr_Int
    {
        public delegate* unmanaged<SDL_RWops*, int> Pointer;
    }

    // FunctionPointer @ SDL_rwops.h:77:23 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDL_SDL_RWopsPtr_VoidPtr_Ulong_Ulong_Ulong
    {
        public delegate* unmanaged<SDL_RWops*, void*, ulong, ulong, ulong> Pointer;
    }

    // FunctionPointer @ SDL_rwops.h:68:23 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDL_SDL_RWopsPtr_Long_Int_Long
    {
        public delegate* unmanaged<SDL_RWops*, long, int, long> Pointer;
    }

    // FunctionPointer @ SDL_rwops.h:60:23 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDL_SDL_RWopsPtr_Long
    {
        public delegate* unmanaged<SDL_RWops*, long> Pointer;
    }

    // FunctionPointer @ SDL_video.h:1475:37 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_HitTest
    {
        public delegate* unmanaged<SDL_Window*, SDL_Point*, void*, SDL_HitTestResult> Pointer;
    }

    // FunctionPointer @ SDL_audio.h:195:25 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AudioFilter
    {
        public delegate* unmanaged<SDL_AudioCVT*, SDL_AudioFormat, void> Pointer;
    }

    // FunctionPointer @ SDL_audio.h:165:25 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AudioCallback
    {
        public delegate* unmanaged<void*, byte*, int, void> Pointer;
    }

    // FunctionPointer @ SDL_thread.h:439:88 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDL_VoidPtr_Void
    {
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ SDL_thread.h:88:24 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_ThreadFunction
    {
        public delegate* unmanaged<void*, int> Pointer;
    }

    // FunctionPointer @ SDL_assert.h:200:35 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_assert.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AssertionHandler
    {
        public delegate* unmanaged<SDL_AssertData*, void*, SDL_AssertState> Pointer;
    }

    // FunctionPointer @ SDL_stdinc.h:429:85 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDL_VoidPtr_VoidPtr_Int
    {
        public delegate* unmanaged<void*, void*, int> Pointer;
    }

    // FunctionPointer @ SDL_stdinc.h:403:24 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_free_func
    {
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ SDL_stdinc.h:402:25 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_realloc_func
    {
        public delegate* unmanaged<void*, ulong, void*> Pointer;
    }

    // FunctionPointer @ SDL_stdinc.h:401:25 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_calloc_func
    {
        public delegate* unmanaged<ulong, ulong, void*> Pointer;
    }

    // FunctionPointer @ SDL_stdinc.h:400:25 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_malloc_func
    {
        public delegate* unmanaged<ulong, void*> Pointer;
    }

    // Struct @ SDL_locale.h:47:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_locale.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_Locale
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString language;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString country;
    }

    // Struct @ SDL_version.h:56:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_version.h)
    [StructLayout(LayoutKind.Explicit, Size = 3, Pack = 1)]
    public struct SDL_version
    {
        [FieldOffset(0)] // size = 1, padding = 0
        public byte major;

        [FieldOffset(1)] // size = 1, padding = 0
        public byte minor;

        [FieldOffset(2)] // size = 1, padding = 0
        public byte patch;
    }

    // Struct @ SDL_shape.h:107:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_shape.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_WindowShapeMode
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public WindowShapeMode mode;

        [FieldOffset(4)] // size = 4, padding = 0
        public SDL_WindowShapeParams parameters;
    }

    // Struct @ SDL_shape.h:99:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_shape.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
    public struct SDL_WindowShapeParams
    {
        [FieldOffset(0)] // size = 1, padding = 0
        public byte binarizationCutoff;

        [FieldOffset(0)] // size = 4, padding = 0
        public SDL_Color colorKey;
    }

    // Struct @ SDL_pixels.h:310:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
    public struct SDL_Color
    {
        [FieldOffset(0)] // size = 1, padding = 0
        public byte r;

        [FieldOffset(1)] // size = 1, padding = 0
        public byte g;

        [FieldOffset(2)] // size = 1, padding = 0
        public byte b;

        [FieldOffset(3)] // size = 1, padding = 0
        public byte a;
    }

    // Struct @ SDL_surface.h:95:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [StructLayout(LayoutKind.Explicit, Size = 96, Pack = 8)]
    public struct SDL_Surface
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint flags;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_PixelFormat* format;

        [FieldOffset(16)] // size = 4, padding = 0
        public int w;

        [FieldOffset(20)] // size = 4, padding = 0
        public int h;

        [FieldOffset(24)] // size = 4, padding = 4
        public int pitch;

        [FieldOffset(32)] // size = 8, padding = 0
        public void* pixels;

        [FieldOffset(40)] // size = 8, padding = 0
        public void* userdata;

        [FieldOffset(48)] // size = 4, padding = 4
        public int locked;

        [FieldOffset(56)] // size = 8, padding = 0
        public void* list_blitmap;

        [FieldOffset(64)] // size = 16, padding = 0
        public SDL_Rect clip_rect;

        [FieldOffset(80)] // size = 8, padding = 0
        public SDL_BlitMap* map;

        [FieldOffset(88)] // size = 4, padding = 4
        public int refcount;
    }

    // Struct @ SDL_rect.h:81:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_Rect
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int x;

        [FieldOffset(4)] // size = 4, padding = 0
        public int y;

        [FieldOffset(8)] // size = 4, padding = 0
        public int w;

        [FieldOffset(12)] // size = 4, padding = 0
        public int h;
    }

    // Struct @ SDL_pixels.h:345:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_PixelFormat
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint format;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_Palette* palette;

        [FieldOffset(16)] // size = 1, padding = 0
        public byte BitsPerPixel;

        [FieldOffset(17)] // size = 1, padding = 0
        public byte BytesPerPixel;

        [FieldOffset(18)] // size = 2, padding = 0
        public fixed byte _padding[2 / 1]; // Uint8[2]

        public Span<byte> padding
        {
            get
            {
                fixed (SDL_PixelFormat* @this = &this)
                {
                    var pointer = &@this->_padding[0];
                    var span = new Span<byte>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(20)] // size = 4, padding = 0
        public uint Rmask;

        [FieldOffset(24)] // size = 4, padding = 0
        public uint Gmask;

        [FieldOffset(28)] // size = 4, padding = 0
        public uint Bmask;

        [FieldOffset(32)] // size = 4, padding = 0
        public uint Amask;

        [FieldOffset(36)] // size = 1, padding = 0
        public byte Rloss;

        [FieldOffset(37)] // size = 1, padding = 0
        public byte Gloss;

        [FieldOffset(38)] // size = 1, padding = 0
        public byte Bloss;

        [FieldOffset(39)] // size = 1, padding = 0
        public byte Aloss;

        [FieldOffset(40)] // size = 1, padding = 0
        public byte Rshift;

        [FieldOffset(41)] // size = 1, padding = 0
        public byte Gshift;

        [FieldOffset(42)] // size = 1, padding = 0
        public byte Bshift;

        [FieldOffset(43)] // size = 1, padding = 0
        public byte Ashift;

        [FieldOffset(44)] // size = 4, padding = 0
        public int refcount;

        [FieldOffset(48)] // size = 8, padding = 0
        public SDL_PixelFormat* next;
    }

    // Struct @ SDL_pixels.h:319:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_pixels.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_Palette
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int ncolors;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_Color* colors;

        [FieldOffset(16)] // size = 4, padding = 0
        public uint version;

        [FieldOffset(20)] // size = 4, padding = 0
        public int refcount;
    }

    // Struct @ SDL_rect.h:64:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_FPoint
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public float x;

        [FieldOffset(4)] // size = 4, padding = 0
        public float y;
    }

    // Struct @ SDL_rect.h:93:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_FRect
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public float x;

        [FieldOffset(4)] // size = 4, padding = 0
        public float y;

        [FieldOffset(8)] // size = 4, padding = 0
        public float w;

        [FieldOffset(12)] // size = 4, padding = 0
        public float h;
    }

    // Struct @ SDL_rect.h:52:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rect.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_Point
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int x;

        [FieldOffset(4)] // size = 4, padding = 0
        public int y;
    }

    // Struct @ SDL_render.h:86:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
    public struct SDL_RendererInfo
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString name;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint flags;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint num_texture_formats;

        [FieldOffset(16)] // size = 64, padding = 0
        public fixed uint _texture_formats[64 / 4]; // Uint32[16]

        public Span<uint> texture_formats
        {
            get
            {
                fixed (SDL_RendererInfo* @this = &this)
                {
                    var pointer = &@this->_texture_formats[0];
                    var span = new Span<uint>(pointer, 16);
                    return span;
                }
            }
        }

        [FieldOffset(80)] // size = 4, padding = 0
        public int max_texture_width;

        [FieldOffset(84)] // size = 4, padding = 0
        public int max_texture_height;
    }

    // Struct @ SDL_messagebox.h:105:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_MessageBoxData
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public uint flags;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_Window* window;

        [FieldOffset(16)] // size = 8, padding = 0
        public CString title;

        [FieldOffset(24)] // size = 8, padding = 0
        public CString message;

        [FieldOffset(32)] // size = 4, padding = 4
        public int numbuttons;

        [FieldOffset(40)] // size = 8, padding = 0
        public SDL_MessageBoxButtonData* buttons;

        [FieldOffset(48)] // size = 8, padding = 0
        public SDL_MessageBoxColorScheme* colorScheme;
    }

    // Struct @ SDL_messagebox.h:89:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [StructLayout(LayoutKind.Explicit, Size = 15, Pack = 1)]
    public struct SDL_MessageBoxColorScheme
    {
        [FieldOffset(0)] // size = 15, padding = 0
        public fixed byte _colors[15 / 1]; // SDL_MessageBoxColor[5]

        public Span<SDL_MessageBoxColor> colors
        {
            get
            {
                fixed (SDL_MessageBoxColorScheme* @this = &this)
                {
                    var pointer = &@this->_colors[0];
                    var span = new Span<SDL_MessageBoxColor>(pointer, 5);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_messagebox.h:71:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [StructLayout(LayoutKind.Explicit, Size = 3, Pack = 1)]
    public struct SDL_MessageBoxColor
    {
        [FieldOffset(0)] // size = 1, padding = 0
        public byte r;

        [FieldOffset(1)] // size = 1, padding = 0
        public byte g;

        [FieldOffset(2)] // size = 1, padding = 0
        public byte b;
    }

    // Struct @ SDL_messagebox.h:63:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_messagebox.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_MessageBoxButtonData
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint flags;

        [FieldOffset(4)] // size = 4, padding = 0
        public int buttonid;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString text;
    }

    // Struct @ SDL_haptic.h:819:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
    public struct SDL_HapticEffect
    {
        [FieldOffset(0)] // size = 2, padding = 0
        public ushort type;

        [FieldOffset(0)] // size = 40, padding = 0
        public SDL_HapticConstant constant;

        [FieldOffset(0)] // size = 48, padding = 0
        public SDL_HapticPeriodic periodic;

        [FieldOffset(0)] // size = 68, padding = 0
        public SDL_HapticCondition condition;

        [FieldOffset(0)] // size = 44, padding = 0
        public SDL_HapticRamp ramp;

        [FieldOffset(0)] // size = 12, padding = 0
        public SDL_HapticLeftRight leftright;

        [FieldOffset(0)] // size = 56, padding = 16
        public SDL_HapticCustom custom;
    }

    // Struct @ SDL_haptic.h:738:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_HapticCustom
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 16, padding = 0
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(24)] // size = 2, padding = 0
        public ushort delay;

        [FieldOffset(26)] // size = 2, padding = 0
        public ushort button;

        [FieldOffset(28)] // size = 2, padding = 0
        public ushort interval;

        [FieldOffset(30)] // size = 1, padding = 1
        public byte channels;

        [FieldOffset(32)] // size = 2, padding = 0
        public ushort period;

        [FieldOffset(34)] // size = 2, padding = 4
        public ushort samples;

        [FieldOffset(40)] // size = 8, padding = 0
        public ushort* data;

        [FieldOffset(48)] // size = 2, padding = 0
        public ushort attack_length;

        [FieldOffset(50)] // size = 2, padding = 0
        public ushort attack_level;

        [FieldOffset(52)] // size = 2, padding = 0
        public ushort fade_length;

        [FieldOffset(54)] // size = 2, padding = 0
        public ushort fade_level;
    }

    // Struct @ SDL_haptic.h:463:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_HapticDirection
    {
        [FieldOffset(0)] // size = 1, padding = 3
        public byte type;

        [FieldOffset(4)] // size = 12, padding = 0
        public fixed uint _dir[12 / 4]; // Sint32[3]

        public Span<int> dir
        {
            get
            {
                fixed (SDL_HapticDirection* @this = &this)
                {
                    var pointer = &@this->_dir[0];
                    var span = new Span<int>(pointer, 3);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_haptic.h:696:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_HapticLeftRight
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(8)] // size = 2, padding = 0
        public ushort large_magnitude;

        [FieldOffset(10)] // size = 2, padding = 0
        public ushort small_magnitude;
    }

    // Struct @ SDL_haptic.h:671:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 44, Pack = 4)]
    public struct SDL_HapticRamp
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 16, padding = 0
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(24)] // size = 2, padding = 0
        public ushort delay;

        [FieldOffset(26)] // size = 2, padding = 0
        public ushort button;

        [FieldOffset(28)] // size = 2, padding = 0
        public ushort interval;

        [FieldOffset(30)] // size = 2, padding = 0
        public short start;

        [FieldOffset(32)] // size = 2, padding = 0
        public short end;

        [FieldOffset(34)] // size = 2, padding = 0
        public ushort attack_length;

        [FieldOffset(36)] // size = 2, padding = 0
        public ushort attack_level;

        [FieldOffset(38)] // size = 2, padding = 0
        public ushort fade_length;

        [FieldOffset(40)] // size = 2, padding = 2
        public ushort fade_level;
    }

    // Struct @ SDL_haptic.h:633:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 68, Pack = 4)]
    public struct SDL_HapticCondition
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 16, padding = 0
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(24)] // size = 2, padding = 0
        public ushort delay;

        [FieldOffset(26)] // size = 2, padding = 0
        public ushort button;

        [FieldOffset(28)] // size = 2, padding = 0
        public ushort interval;

        [FieldOffset(30)] // size = 6, padding = 0
        public fixed ushort _right_sat[6 / 2]; // Uint16[3]

        public Span<ushort> right_sat
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_right_sat[0];
                    var span = new Span<ushort>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(36)] // size = 6, padding = 0
        public fixed ushort _left_sat[6 / 2]; // Uint16[3]

        public Span<ushort> left_sat
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_left_sat[0];
                    var span = new Span<ushort>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(42)] // size = 6, padding = 0
        public fixed ushort _right_coeff[6 / 2]; // Sint16[3]

        public Span<short> right_coeff
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_right_coeff[0];
                    var span = new Span<short>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(48)] // size = 6, padding = 0
        public fixed ushort _left_coeff[6 / 2]; // Sint16[3]

        public Span<short> left_coeff
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_left_coeff[0];
                    var span = new Span<short>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(54)] // size = 6, padding = 0
        public fixed ushort _deadband[6 / 2]; // Uint16[3]

        public Span<ushort> deadband
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_deadband[0];
                    var span = new Span<ushort>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(60)] // size = 6, padding = 2
        public fixed ushort _center[6 / 2]; // Sint16[3]

        public Span<short> center
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_center[0];
                    var span = new Span<short>(pointer, 3);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_haptic.h:585:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 4)]
    public struct SDL_HapticPeriodic
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 16, padding = 0
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(24)] // size = 2, padding = 0
        public ushort delay;

        [FieldOffset(26)] // size = 2, padding = 0
        public ushort button;

        [FieldOffset(28)] // size = 2, padding = 0
        public ushort interval;

        [FieldOffset(30)] // size = 2, padding = 0
        public ushort period;

        [FieldOffset(32)] // size = 2, padding = 0
        public short magnitude;

        [FieldOffset(34)] // size = 2, padding = 0
        public short offset;

        [FieldOffset(36)] // size = 2, padding = 0
        public ushort phase;

        [FieldOffset(38)] // size = 2, padding = 0
        public ushort attack_length;

        [FieldOffset(40)] // size = 2, padding = 0
        public ushort attack_level;

        [FieldOffset(42)] // size = 2, padding = 0
        public ushort fade_length;

        [FieldOffset(44)] // size = 2, padding = 2
        public ushort fade_level;
    }

    // Struct @ SDL_haptic.h:499:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
    public struct SDL_HapticConstant
    {
        [FieldOffset(0)] // size = 2, padding = 2
        public ushort type;

        [FieldOffset(4)] // size = 16, padding = 0
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4, padding = 0
        public uint length;

        [FieldOffset(24)] // size = 2, padding = 0
        public ushort delay;

        [FieldOffset(26)] // size = 2, padding = 0
        public ushort button;

        [FieldOffset(28)] // size = 2, padding = 0
        public ushort interval;

        [FieldOffset(30)] // size = 2, padding = 0
        public short level;

        [FieldOffset(32)] // size = 2, padding = 0
        public ushort attack_length;

        [FieldOffset(34)] // size = 2, padding = 0
        public ushort attack_level;

        [FieldOffset(36)] // size = 2, padding = 0
        public ushort fade_length;

        [FieldOffset(38)] // size = 2, padding = 0
        public ushort fade_level;
    }

    // Struct @ SDL_events.h:631:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_Event
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(0)] // size = 8, padding = 0
        public SDL_CommonEvent common;

        [FieldOffset(0)] // size = 20, padding = 0
        public SDL_DisplayEvent display;

        [FieldOffset(0)] // size = 24, padding = 0
        public SDL_WindowEvent window;

        [FieldOffset(0)] // size = 32, padding = 0
        public SDL_KeyboardEvent key;

        [FieldOffset(0)] // size = 52, padding = 0
        public SDL_TextEditingEvent edit;

        [FieldOffset(0)] // size = 44, padding = 0
        public SDL_TextInputEvent text;

        [FieldOffset(0)] // size = 36, padding = 0
        public SDL_MouseMotionEvent motion;

        [FieldOffset(0)] // size = 28, padding = 0
        public SDL_MouseButtonEvent button;

        [FieldOffset(0)] // size = 28, padding = 0
        public SDL_MouseWheelEvent wheel;

        [FieldOffset(0)] // size = 20, padding = 0
        public SDL_JoyAxisEvent jaxis;

        [FieldOffset(0)] // size = 20, padding = 0
        public SDL_JoyBallEvent jball;

        [FieldOffset(0)] // size = 16, padding = 0
        public SDL_JoyHatEvent jhat;

        [FieldOffset(0)] // size = 16, padding = 0
        public SDL_JoyButtonEvent jbutton;

        [FieldOffset(0)] // size = 12, padding = 0
        public SDL_JoyDeviceEvent jdevice;

        [FieldOffset(0)] // size = 20, padding = 0
        public SDL_ControllerAxisEvent caxis;

        [FieldOffset(0)] // size = 16, padding = 0
        public SDL_ControllerButtonEvent cbutton;

        [FieldOffset(0)] // size = 12, padding = 0
        public SDL_ControllerDeviceEvent cdevice;

        [FieldOffset(0)] // size = 32, padding = 0
        public SDL_ControllerTouchpadEvent ctouchpad;

        [FieldOffset(0)] // size = 28, padding = 0
        public SDL_ControllerSensorEvent csensor;

        [FieldOffset(0)] // size = 16, padding = 0
        public SDL_AudioDeviceEvent adevice;

        [FieldOffset(0)] // size = 36, padding = 0
        public SDL_SensorEvent sensor;

        [FieldOffset(0)] // size = 8, padding = 0
        public SDL_QuitEvent quit;

        [FieldOffset(0)] // size = 32, padding = 0
        public SDL_UserEvent user;

        [FieldOffset(0)] // size = 16, padding = 0
        public SDL_SysWMEvent syswm;

        [FieldOffset(0)] // size = 48, padding = 0
        public SDL_TouchFingerEvent tfinger;

        [FieldOffset(0)] // size = 40, padding = 0
        public SDL_MultiGestureEvent mgesture;

        [FieldOffset(0)] // size = 40, padding = 0
        public SDL_DollarGestureEvent dgesture;

        [FieldOffset(0)] // size = 24, padding = 0
        public SDL_DropEvent drop;

        [FieldOffset(0)] // size = 56, padding = 0
        public fixed byte _padding[56 / 1]; // Uint8[56]

        public Span<byte> padding
        {
            get
            {
                fixed (SDL_Event* @this = &this)
                {
                    var pointer = &@this->_padding[0];
                    var span = new Span<byte>(pointer, 56);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_events.h:526:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_DropEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString file;

        [FieldOffset(16)] // size = 4, padding = 4
        public uint windowID;
    }

    // Struct @ SDL_events.h:512:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_DollarGestureEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_TouchID touchId;

        [FieldOffset(16)] // size = 8, padding = 0
        public SDL_GestureID gestureId;

        [FieldOffset(24)] // size = 4, padding = 0
        public uint numFingers;

        [FieldOffset(28)] // size = 4, padding = 0
        public float error;

        [FieldOffset(32)] // size = 4, padding = 0
        public float x;

        [FieldOffset(36)] // size = 4, padding = 0
        public float y;
    }

    // Struct @ SDL_events.h:496:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_MultiGestureEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_TouchID touchId;

        [FieldOffset(16)] // size = 4, padding = 0
        public float dTheta;

        [FieldOffset(20)] // size = 4, padding = 0
        public float dDist;

        [FieldOffset(24)] // size = 4, padding = 0
        public float x;

        [FieldOffset(28)] // size = 4, padding = 0
        public float y;

        [FieldOffset(32)] // size = 2, padding = 0
        public ushort numFingers;

        [FieldOffset(34)] // size = 2, padding = 4
        public ushort padding;
    }

    // Struct @ SDL_events.h:479:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_TouchFingerEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_TouchID touchId;

        [FieldOffset(16)] // size = 8, padding = 0
        public SDL_FingerID fingerId;

        [FieldOffset(24)] // size = 4, padding = 0
        public float x;

        [FieldOffset(28)] // size = 4, padding = 0
        public float y;

        [FieldOffset(32)] // size = 4, padding = 0
        public float dx;

        [FieldOffset(36)] // size = 4, padding = 0
        public float dy;

        [FieldOffset(40)] // size = 4, padding = 0
        public float pressure;

        [FieldOffset(44)] // size = 4, padding = 0
        public uint windowID;
    }

    // Struct @ SDL_events.h:586:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_SysWMEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 8, padding = 0
        public SDL_SysWMmsg* msg;
    }

    // Struct @ SDL_events.h:569:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_UserEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 4, padding = 0
        public int code;

        [FieldOffset(16)] // size = 8, padding = 0
        public void* data1;

        [FieldOffset(24)] // size = 8, padding = 0
        public void* data2;
    }

    // Struct @ SDL_events.h:547:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_QuitEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;
    }

    // Struct @ SDL_events.h:538:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public struct SDL_SensorEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public int which;

        [FieldOffset(12)] // size = 24, padding = 0
        public fixed uint _data[24 / 4]; // float[6]

        public Span<float> data
        {
            get
            {
                fixed (SDL_SensorEvent* @this = &this)
                {
                    var pointer = &@this->_data[0];
                    var span = new Span<float>(pointer, 6);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_events.h:461:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_AudioDeviceEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte iscapture;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;
    }

    // Struct @ SDL_events.h:447:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct SDL_ControllerSensorEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 4, padding = 0
        public int sensor;

        [FieldOffset(16)] // size = 12, padding = 0
        public fixed uint _data[12 / 4]; // float[3]

        public Span<float> data
        {
            get
            {
                fixed (SDL_ControllerSensorEvent* @this = &this)
                {
                    var pointer = &@this->_data[0];
                    var span = new Span<float>(pointer, 3);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_events.h:435:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public struct SDL_ControllerTouchpadEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 4, padding = 0
        public int touchpad;

        [FieldOffset(16)] // size = 4, padding = 0
        public int finger;

        [FieldOffset(20)] // size = 4, padding = 0
        public float x;

        [FieldOffset(24)] // size = 4, padding = 0
        public float y;

        [FieldOffset(28)] // size = 4, padding = 0
        public float pressure;
    }

    // Struct @ SDL_events.h:420:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_ControllerDeviceEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public int which;
    }

    // Struct @ SDL_events.h:409:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_ControllerButtonEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte button;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte state;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding2;
    }

    // Struct @ SDL_events.h:394:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct SDL_ControllerAxisEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte axis;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 2, padding = 0
        public short value;

        [FieldOffset(18)] // size = 2, padding = 0
        public ushort padding4;
    }

    // Struct @ SDL_events.h:377:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_JoyDeviceEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public int which;
    }

    // Struct @ SDL_events.h:367:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_JoyButtonEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte button;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte state;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding2;
    }

    // Struct @ SDL_events.h:353:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_JoyHatEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte hat;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte value;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding2;
    }

    // Struct @ SDL_events.h:333:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct SDL_JoyBallEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte ball;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 2, padding = 0
        public short xrel;

        [FieldOffset(18)] // size = 2, padding = 0
        public short yrel;
    }

    // Struct @ SDL_events.h:317:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct SDL_JoyAxisEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public SDL_JoystickID which;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte axis;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 2, padding = 0
        public short value;

        [FieldOffset(18)] // size = 2, padding = 0
        public ushort padding4;
    }

    // Struct @ SDL_events.h:301:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct SDL_MouseWheelEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint which;

        [FieldOffset(16)] // size = 4, padding = 0
        public int x;

        [FieldOffset(20)] // size = 4, padding = 0
        public int y;

        [FieldOffset(24)] // size = 4, padding = 0
        public uint direction;
    }

    // Struct @ SDL_events.h:287:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct SDL_MouseButtonEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint which;

        [FieldOffset(16)] // size = 1, padding = 0
        public byte button;

        [FieldOffset(17)] // size = 1, padding = 0
        public byte state;

        [FieldOffset(18)] // size = 1, padding = 0
        public byte clicks;

        [FieldOffset(19)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(20)] // size = 4, padding = 0
        public int x;

        [FieldOffset(24)] // size = 4, padding = 0
        public int y;
    }

    // Struct @ SDL_events.h:270:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public struct SDL_MouseMotionEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint which;

        [FieldOffset(16)] // size = 4, padding = 0
        public uint state;

        [FieldOffset(20)] // size = 4, padding = 0
        public int x;

        [FieldOffset(24)] // size = 4, padding = 0
        public int y;

        [FieldOffset(28)] // size = 4, padding = 0
        public int xrel;

        [FieldOffset(32)] // size = 4, padding = 0
        public int yrel;
    }

    // Struct @ SDL_events.h:254:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 44, Pack = 4)]
    public struct SDL_TextInputEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 32, padding = 0
        public fixed byte _text[32 / 1]; // char[32]

        public string text
        {
            get
            {
                fixed (SDL_TextInputEvent* @this = &this)
                {
                    var pointer = &@this->_text[0];
                    var cString = new CString(pointer);
                    return Runtime.String(cString);
                }
            }
        }
    }

    // Struct @ SDL_events.h:241:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 52, Pack = 4)]
    public struct SDL_TextEditingEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 32, padding = 0
        public fixed byte _text[32 / 1]; // char[32]

        public string text
        {
            get
            {
                fixed (SDL_TextEditingEvent* @this = &this)
                {
                    var pointer = &@this->_text[0];
                    var cString = new CString(pointer);
                    return Runtime.String(cString);
                }
            }
        }

        [FieldOffset(44)] // size = 4, padding = 0
        public int start;

        [FieldOffset(48)] // size = 4, padding = 0
        public int length;
    }

    // Struct @ SDL_events.h:227:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public struct SDL_KeyboardEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte state;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte repeat;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 16, padding = 0
        public SDL_Keysym keysym;
    }

    // Struct @ SDL_keyboard.h:53:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keyboard.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_Keysym
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public SDL_Scancode scancode;

        [FieldOffset(4)] // size = 4, padding = 0
        public SDL_Keycode sym;

        [FieldOffset(8)] // size = 2, padding = 2
        public ushort mod;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint unused;
    }

    // Struct @ SDL_events.h:212:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
    public struct SDL_WindowEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint windowID;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte @event;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 4, padding = 0
        public int data1;

        [FieldOffset(20)] // size = 4, padding = 0
        public int data2;
    }

    // Struct @ SDL_events.h:196:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 20, Pack = 4)]
    public struct SDL_DisplayEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;

        [FieldOffset(8)] // size = 4, padding = 0
        public uint display;

        [FieldOffset(12)] // size = 1, padding = 0
        public byte @event;

        [FieldOffset(13)] // size = 1, padding = 0
        public byte padding1;

        [FieldOffset(14)] // size = 1, padding = 0
        public byte padding2;

        [FieldOffset(15)] // size = 1, padding = 0
        public byte padding3;

        [FieldOffset(16)] // size = 4, padding = 0
        public int data1;
    }

    // Struct @ SDL_events.h:181:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_CommonEvent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint type;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint timestamp;
    }

    // Struct @ SDL_rwops.h:149:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
    [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
    public struct SDL_RWops
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public FnPtr_SDL_SDL_RWopsPtr_Long size;

        [FieldOffset(8)] // size = 8, padding = 0
        public FnPtr_SDL_SDL_RWopsPtr_Long_Int_Long seek;

        [FieldOffset(16)] // size = 8, padding = 0
        public FnPtr_SDL_SDL_RWopsPtr_VoidPtr_Ulong_Ulong_Ulong read;

        [FieldOffset(24)] // size = 8, padding = 0
        public FnPtr_SDL_SDL_RWopsPtr_VoidPtr_Ulong_Ulong_Ulong write;

        [FieldOffset(32)] // size = 8, padding = 0
        public FnPtr_SDL_SDL_RWopsPtr_Int close;

        [FieldOffset(40)] // size = 4, padding = 4
        public uint type;

        [FieldOffset(48)] // size = 24, padding = 0
        public SDL_RWops_hidden hidden;

        // Union @ SDL_rwops.h:97:5 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct SDL_RWops_hidden
        {
            [FieldOffset(0)] // size = 24, padding = 0
            public SDL_RWops_hidden_mem mem;

            [FieldOffset(0)] // size = 16, padding = 8
            public SDL_RWops_hidden_unknown unknown;

            // Struct @ SDL_rwops.h:136:9 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
            [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
            public struct SDL_RWops_hidden_mem
            {
                [FieldOffset(0)] // size = 8, padding = 0
                public byte* @base;

                [FieldOffset(8)] // size = 8, padding = 0
                public byte* here;

                [FieldOffset(16)] // size = 8, padding = 0
                public byte* stop;
            }

            // Struct @ SDL_rwops.h:142:9 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_rwops.h)
            [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
            public struct SDL_RWops_hidden_unknown
            {
                [FieldOffset(0)] // size = 8, padding = 0
                public void* data1;

                [FieldOffset(8)] // size = 8, padding = 0
                public void* data2;
            }
        }
    }

    // Struct @ SDL_touch.h:58:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_Finger
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public SDL_FingerID id;

        [FieldOffset(8)] // size = 4, padding = 0
        public float x;

        [FieldOffset(12)] // size = 4, padding = 0
        public float y;

        [FieldOffset(16)] // size = 4, padding = 4
        public float pressure;
    }

    // Struct @ SDL_gamecontroller.h:99:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_GameControllerButtonBind
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public SDL_GameControllerBindType bindType;

        [FieldOffset(4)] // size = 8, padding = 0
        public SDL_GameControllerButtonBind_value value;

        // Union @ SDL_gamecontroller.h:89:5 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct SDL_GameControllerButtonBind_value
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int button;

            [FieldOffset(0)] // size = 4, padding = 0
            public int axis;

            [FieldOffset(0)] // size = 8, padding = 0
            public SDL_GameControllerButtonBind_value_hat hat;

            // Struct @ SDL_gamecontroller.h:93:9 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
            [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
            public struct SDL_GameControllerButtonBind_value_hat
            {
                [FieldOffset(0)] // size = 4, padding = 0
                public int hat;

                [FieldOffset(4)] // size = 4, padding = 0
                public int hat_mask;
            }
        }
    }

    // Struct @ SDL_joystick.h:74:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
    public struct SDL_JoystickGUID
    {
        [FieldOffset(0)] // size = 16, padding = 0
        public fixed byte _data[16 / 1]; // Uint8[16]

        public Span<byte> data
        {
            get
            {
                fixed (SDL_JoystickGUID* @this = &this)
                {
                    var pointer = &@this->_data[0];
                    var span = new Span<byte>(pointer, 16);
                    return span;
                }
            }
        }
    }

    // Struct @ SDL_video.h:60:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_DisplayMode
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint format;

        [FieldOffset(4)] // size = 4, padding = 0
        public int w;

        [FieldOffset(8)] // size = 4, padding = 0
        public int h;

        [FieldOffset(12)] // size = 4, padding = 0
        public int refresh_rate;

        [FieldOffset(16)] // size = 8, padding = 0
        public void* driverdata;
    }

    // Struct @ SDL_audio.h:241:23 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Explicit, Size = 128, Pack = 1)]
    public struct SDL_AudioCVT
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int needed;

        [FieldOffset(4)] // size = 2, padding = 0
        public SDL_AudioFormat src_format;

        [FieldOffset(6)] // size = 2, padding = 0
        public SDL_AudioFormat dst_format;

        [FieldOffset(8)] // size = 8, padding = 0
        public double rate_incr;

        [FieldOffset(16)] // size = 8, padding = 0
        public byte* buf;

        [FieldOffset(24)] // size = 4, padding = 0
        public int len;

        [FieldOffset(28)] // size = 4, padding = 0
        public int len_cvt;

        [FieldOffset(32)] // size = 4, padding = 0
        public int len_mult;

        [FieldOffset(36)] // size = 8, padding = 0
        public double len_ratio;

        [FieldOffset(44)] // size = 80, padding = 0
        public fixed ulong _filters[80 / 8]; // SDL_AudioFilter[10]

        public Span<SDL_AudioFilter> filters
        {
            get
            {
                fixed (SDL_AudioCVT* @this = &this)
                {
                    var pointer = &@this->_filters[0];
                    var span = new Span<SDL_AudioFilter>(pointer, 10);
                    return span;
                }
            }
        }

        [FieldOffset(124)] // size = 4, padding = 0
        public int filter_index;
    }

    // Struct @ SDL_audio.h:191:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_AudioSpec
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int freq;

        [FieldOffset(4)] // size = 2, padding = 0
        public SDL_AudioFormat format;

        [FieldOffset(6)] // size = 1, padding = 0
        public byte channels;

        [FieldOffset(7)] // size = 1, padding = 0
        public byte silence;

        [FieldOffset(8)] // size = 2, padding = 0
        public ushort samples;

        [FieldOffset(10)] // size = 2, padding = 0
        public ushort padding;

        [FieldOffset(12)] // size = 4, padding = 0
        public uint size;

        [FieldOffset(16)] // size = 8, padding = 0
        public SDL_AudioCallback callback;

        [FieldOffset(24)] // size = 8, padding = 0
        public void* userdata;
    }

    // Struct @ SDL_atomic.h:238:31 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_atomic_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int value;
    }

    // Struct @ SDL_assert.h:124:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_assert.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_AssertData
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int always_ignore;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint trigger_count;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString condition;

        [FieldOffset(16)] // size = 8, padding = 0
        public CString filename;

        [FieldOffset(24)] // size = 4, padding = 4
        public int linenum;

        [FieldOffset(32)] // size = 8, padding = 0
        public CString function;

        [FieldOffset(40)] // size = 8, padding = 0
        public SDL_AssertData* next;
    }

    // OpaqueType @ SDL_video.h:95:27 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Window
    {
    }

    // OpaqueType @ SDL_surface.h:91:12 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_BlitMap
    {
    }

    // OpaqueType @ SDL_render.h:132:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Renderer
    {
    }

    // OpaqueType @ SDL_render.h:138:28 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Texture
    {
    }

    // OpaqueType @ SDL_haptic.h:141:28 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_haptic.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Haptic
    {
    }

    // OpaqueType @ SDL_joystick.h:69:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Joystick
    {
    }

    // OpaqueType @ SDL_events.h:573:29 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_SysWMmsg
    {
    }

    // OpaqueType @ SDL_gamecontroller.h:59:36 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GameController
    {
    }

    // OpaqueType @ SDL_sensor.h:52:28 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Sensor
    {
    }

    // OpaqueType @ SDL_mouse.h:41:27 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Cursor
    {
    }

    // OpaqueType @ SDL_audio.h:781:33 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AudioStream
    {
    }

    // OpaqueType @ SDL_thread.h:57:27 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Thread
    {
    }

    // OpaqueType @ SDL_mutex.h:59:26 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_mutex
    {
    }

    // OpaqueType @ SDL_mutex.h:311:25 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_cond
    {
    }

    // OpaqueType @ SDL_mutex.h:164:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mutex.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_sem
    {
    }

    // OpaqueType @ SDL_stdinc.h:615:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct _SDL_iconv_t
    {
    }

    // Typedef @ SDL_timer.h:116:13 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_timer.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_TimerID
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(SDL_TimerID data) => data.Data;
        public static implicit operator SDL_TimerID(int data) => new() { Data = data };
    }

    // Typedef @ SDL_metal.h:44:15 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_metal.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_MetalView
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public void* Data;

        public static implicit operator void*(SDL_MetalView data) => data.Data;
        public static implicit operator SDL_MetalView(void* data) => new() { Data = data };
    }

    // Typedef @ SDL_gesture.h:44:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gesture.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_GestureID
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public long Data;

        public static implicit operator long(SDL_GestureID data) => data.Data;
        public static implicit operator SDL_GestureID(long data) => new() { Data = data };
    }

    // Typedef @ SDL_touch.h:41:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_TouchID
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public long Data;

        public static implicit operator long(SDL_TouchID data) => data.Data;
        public static implicit operator SDL_TouchID(long data) => new() { Data = data };
    }

    // Typedef @ SDL_touch.h:42:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_FingerID
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public long Data;

        public static implicit operator long(SDL_FingerID data) => data.Data;
        public static implicit operator SDL_FingerID(long data) => new() { Data = data };
    }

    // Typedef @ SDL_joystick.h:83:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_JoystickID
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(SDL_JoystickID data) => data.Data;
        public static implicit operator SDL_JoystickID(int data) => new() { Data = data };
    }

    // Typedef @ SDL_keycode.h:45:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keycode.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_Keycode
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(SDL_Keycode data) => data.Data;
        public static implicit operator SDL_Keycode(int data) => new() { Data = data };
    }

    // Typedef @ SDL_sensor.h:60:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_SensorID
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(SDL_SensorID data) => data.Data;
        public static implicit operator SDL_SensorID(int data) => new() { Data = data };
    }

    // Typedef @ SDL_video.h:216:15 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_GLContext
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public void* Data;

        public static implicit operator void*(SDL_GLContext data) => data.Data;
        public static implicit operator SDL_GLContext(void* data) => new() { Data = data };
    }

    // Typedef @ SDL_audio.h:344:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_AudioDeviceID
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint Data;

        public static implicit operator uint(SDL_AudioDeviceID data) => data.Data;
        public static implicit operator SDL_AudioDeviceID(uint data) => new() { Data = data };
    }

    // Typedef @ SDL_audio.h:66:16 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 2)]
    public struct SDL_AudioFormat
    {
        [FieldOffset(0)] // size = 2, padding = 0
        public ushort Data;

        public static implicit operator ushort(SDL_AudioFormat data) => data.Data;
        public static implicit operator SDL_AudioFormat(ushort data) => new() { Data = data };
    }

    // Typedef @ SDL_thread.h:63:22 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_TLSID
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint Data;

        public static implicit operator uint(SDL_TLSID data) => data.Data;
        public static implicit operator SDL_TLSID(uint data) => new() { Data = data };
    }

    // Typedef @ SDL_thread.h:60:23 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_threadID
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Data;

        public static implicit operator ulong(SDL_threadID data) => data.Data;
        public static implicit operator SDL_threadID(ulong data) => new() { Data = data };
    }

    // Typedef @ SDL_atomic.h:89:13 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_atomic.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_SpinLock
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(SDL_SpinLock data) => data.Data;
        public static implicit operator SDL_SpinLock(int data) => new() { Data = data };
    }

    // Typedef @ SDL_stdinc.h:615:30 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_stdinc.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_iconv_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public _SDL_iconv_t* Data;

        public static implicit operator _SDL_iconv_t*(SDL_iconv_t data) => data.Data;
        public static implicit operator SDL_iconv_t(_SDL_iconv_t* data) => new() { Data = data };
    }

    // Typedef @ stddef.h:321:24 (/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct wchar_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(wchar_t data) => data.Data;
        public static implicit operator wchar_t(int data) => new() { Data = data };
    }

    // Enum @ SDL_shape.h:90:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_shape.h)
    public enum WindowShapeMode : uint
    {
        ShapeModeDefault = 0U,
        ShapeModeBinarizeAlpha = 1U,
        ShapeModeReverseBinarizeAlpha = 2U,
        ShapeModeColorKey = 3U
    }

    // Enum @ SDL_render.h:126:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    public enum SDL_RendererFlip : uint
    {
        SDL_FLIP_NONE = 0U,
        SDL_FLIP_HORIZONTAL = 1U,
        SDL_FLIP_VERTICAL = 2U
    }

    // Enum @ SDL_blendmode.h:60:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_blendmode.h)
    public enum SDL_BlendMode : uint
    {
        SDL_BLENDMODE_NONE = 0U,
        SDL_BLENDMODE_BLEND = 1U,
        SDL_BLENDMODE_ADD = 2U,
        SDL_BLENDMODE_MOD = 4U,
        SDL_BLENDMODE_MUL = 8U,
        SDL_BLENDMODE_INVALID = 2147483647U
    }

    // Enum @ SDL_render.h:96:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_render.h)
    public enum SDL_ScaleMode : uint
    {
        SDL_ScaleModeNearest = 0U,
        SDL_ScaleModeLinear = 1U,
        SDL_ScaleModeBest = 2U
    }

    // Enum @ SDL_power.h:49:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_power.h)
    public enum SDL_PowerState : uint
    {
        SDL_POWERSTATE_UNKNOWN = 0U,
        SDL_POWERSTATE_ON_BATTERY = 1U,
        SDL_POWERSTATE_NO_BATTERY = 2U,
        SDL_POWERSTATE_CHARGING = 3U,
        SDL_POWERSTATE_CHARGED = 4U
    }

    // Enum @ SDL_log.h:111:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_log.h)
    public enum SDL_LogPriority : uint
    {
        SDL_LOG_PRIORITY_VERBOSE = 1U,
        SDL_LOG_PRIORITY_DEBUG = 2U,
        SDL_LOG_PRIORITY_INFO = 3U,
        SDL_LOG_PRIORITY_WARN = 4U,
        SDL_LOG_PRIORITY_ERROR = 5U,
        SDL_LOG_PRIORITY_CRITICAL = 6U,
        SDL_NUM_LOG_PRIORITIES = 7U
    }

    // Enum @ SDL_hints.h:1706:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_hints.h)
    public enum SDL_HintPriority : uint
    {
        SDL_HINT_DEFAULT = 0U,
        SDL_HINT_NORMAL = 1U,
        SDL_HINT_OVERRIDE = 2U
    }

    // Enum @ SDL_scancode.h:409:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_scancode.h)
    public enum SDL_Scancode : uint
    {
        SDL_SCANCODE_UNKNOWN = 0U,
        SDL_SCANCODE_A = 4U,
        SDL_SCANCODE_B = 5U,
        SDL_SCANCODE_C = 6U,
        SDL_SCANCODE_D = 7U,
        SDL_SCANCODE_E = 8U,
        SDL_SCANCODE_F = 9U,
        SDL_SCANCODE_G = 10U,
        SDL_SCANCODE_H = 11U,
        SDL_SCANCODE_I = 12U,
        SDL_SCANCODE_J = 13U,
        SDL_SCANCODE_K = 14U,
        SDL_SCANCODE_L = 15U,
        SDL_SCANCODE_M = 16U,
        SDL_SCANCODE_N = 17U,
        SDL_SCANCODE_O = 18U,
        SDL_SCANCODE_P = 19U,
        SDL_SCANCODE_Q = 20U,
        SDL_SCANCODE_R = 21U,
        SDL_SCANCODE_S = 22U,
        SDL_SCANCODE_T = 23U,
        SDL_SCANCODE_U = 24U,
        SDL_SCANCODE_V = 25U,
        SDL_SCANCODE_W = 26U,
        SDL_SCANCODE_X = 27U,
        SDL_SCANCODE_Y = 28U,
        SDL_SCANCODE_Z = 29U,
        SDL_SCANCODE_1 = 30U,
        SDL_SCANCODE_2 = 31U,
        SDL_SCANCODE_3 = 32U,
        SDL_SCANCODE_4 = 33U,
        SDL_SCANCODE_5 = 34U,
        SDL_SCANCODE_6 = 35U,
        SDL_SCANCODE_7 = 36U,
        SDL_SCANCODE_8 = 37U,
        SDL_SCANCODE_9 = 38U,
        SDL_SCANCODE_0 = 39U,
        SDL_SCANCODE_RETURN = 40U,
        SDL_SCANCODE_ESCAPE = 41U,
        SDL_SCANCODE_BACKSPACE = 42U,
        SDL_SCANCODE_TAB = 43U,
        SDL_SCANCODE_SPACE = 44U,
        SDL_SCANCODE_MINUS = 45U,
        SDL_SCANCODE_EQUALS = 46U,
        SDL_SCANCODE_LEFTBRACKET = 47U,
        SDL_SCANCODE_RIGHTBRACKET = 48U,
        SDL_SCANCODE_BACKSLASH = 49U,
        SDL_SCANCODE_NONUSHASH = 50U,
        SDL_SCANCODE_SEMICOLON = 51U,
        SDL_SCANCODE_APOSTROPHE = 52U,
        SDL_SCANCODE_GRAVE = 53U,
        SDL_SCANCODE_COMMA = 54U,
        SDL_SCANCODE_PERIOD = 55U,
        SDL_SCANCODE_SLASH = 56U,
        SDL_SCANCODE_CAPSLOCK = 57U,
        SDL_SCANCODE_F1 = 58U,
        SDL_SCANCODE_F2 = 59U,
        SDL_SCANCODE_F3 = 60U,
        SDL_SCANCODE_F4 = 61U,
        SDL_SCANCODE_F5 = 62U,
        SDL_SCANCODE_F6 = 63U,
        SDL_SCANCODE_F7 = 64U,
        SDL_SCANCODE_F8 = 65U,
        SDL_SCANCODE_F9 = 66U,
        SDL_SCANCODE_F10 = 67U,
        SDL_SCANCODE_F11 = 68U,
        SDL_SCANCODE_F12 = 69U,
        SDL_SCANCODE_PRINTSCREEN = 70U,
        SDL_SCANCODE_SCROLLLOCK = 71U,
        SDL_SCANCODE_PAUSE = 72U,
        SDL_SCANCODE_INSERT = 73U,
        SDL_SCANCODE_HOME = 74U,
        SDL_SCANCODE_PAGEUP = 75U,
        SDL_SCANCODE_DELETE = 76U,
        SDL_SCANCODE_END = 77U,
        SDL_SCANCODE_PAGEDOWN = 78U,
        SDL_SCANCODE_RIGHT = 79U,
        SDL_SCANCODE_LEFT = 80U,
        SDL_SCANCODE_DOWN = 81U,
        SDL_SCANCODE_UP = 82U,
        SDL_SCANCODE_NUMLOCKCLEAR = 83U,
        SDL_SCANCODE_KP_DIVIDE = 84U,
        SDL_SCANCODE_KP_MULTIPLY = 85U,
        SDL_SCANCODE_KP_MINUS = 86U,
        SDL_SCANCODE_KP_PLUS = 87U,
        SDL_SCANCODE_KP_ENTER = 88U,
        SDL_SCANCODE_KP_1 = 89U,
        SDL_SCANCODE_KP_2 = 90U,
        SDL_SCANCODE_KP_3 = 91U,
        SDL_SCANCODE_KP_4 = 92U,
        SDL_SCANCODE_KP_5 = 93U,
        SDL_SCANCODE_KP_6 = 94U,
        SDL_SCANCODE_KP_7 = 95U,
        SDL_SCANCODE_KP_8 = 96U,
        SDL_SCANCODE_KP_9 = 97U,
        SDL_SCANCODE_KP_0 = 98U,
        SDL_SCANCODE_KP_PERIOD = 99U,
        SDL_SCANCODE_NONUSBACKSLASH = 100U,
        SDL_SCANCODE_APPLICATION = 101U,
        SDL_SCANCODE_POWER = 102U,
        SDL_SCANCODE_KP_EQUALS = 103U,
        SDL_SCANCODE_F13 = 104U,
        SDL_SCANCODE_F14 = 105U,
        SDL_SCANCODE_F15 = 106U,
        SDL_SCANCODE_F16 = 107U,
        SDL_SCANCODE_F17 = 108U,
        SDL_SCANCODE_F18 = 109U,
        SDL_SCANCODE_F19 = 110U,
        SDL_SCANCODE_F20 = 111U,
        SDL_SCANCODE_F21 = 112U,
        SDL_SCANCODE_F22 = 113U,
        SDL_SCANCODE_F23 = 114U,
        SDL_SCANCODE_F24 = 115U,
        SDL_SCANCODE_EXECUTE = 116U,
        SDL_SCANCODE_HELP = 117U,
        SDL_SCANCODE_MENU = 118U,
        SDL_SCANCODE_SELECT = 119U,
        SDL_SCANCODE_STOP = 120U,
        SDL_SCANCODE_AGAIN = 121U,
        SDL_SCANCODE_UNDO = 122U,
        SDL_SCANCODE_CUT = 123U,
        SDL_SCANCODE_COPY = 124U,
        SDL_SCANCODE_PASTE = 125U,
        SDL_SCANCODE_FIND = 126U,
        SDL_SCANCODE_MUTE = 127U,
        SDL_SCANCODE_VOLUMEUP = 128U,
        SDL_SCANCODE_VOLUMEDOWN = 129U,
        SDL_SCANCODE_KP_COMMA = 133U,
        SDL_SCANCODE_KP_EQUALSAS400 = 134U,
        SDL_SCANCODE_INTERNATIONAL1 = 135U,
        SDL_SCANCODE_INTERNATIONAL2 = 136U,
        SDL_SCANCODE_INTERNATIONAL3 = 137U,
        SDL_SCANCODE_INTERNATIONAL4 = 138U,
        SDL_SCANCODE_INTERNATIONAL5 = 139U,
        SDL_SCANCODE_INTERNATIONAL6 = 140U,
        SDL_SCANCODE_INTERNATIONAL7 = 141U,
        SDL_SCANCODE_INTERNATIONAL8 = 142U,
        SDL_SCANCODE_INTERNATIONAL9 = 143U,
        SDL_SCANCODE_LANG1 = 144U,
        SDL_SCANCODE_LANG2 = 145U,
        SDL_SCANCODE_LANG3 = 146U,
        SDL_SCANCODE_LANG4 = 147U,
        SDL_SCANCODE_LANG5 = 148U,
        SDL_SCANCODE_LANG6 = 149U,
        SDL_SCANCODE_LANG7 = 150U,
        SDL_SCANCODE_LANG8 = 151U,
        SDL_SCANCODE_LANG9 = 152U,
        SDL_SCANCODE_ALTERASE = 153U,
        SDL_SCANCODE_SYSREQ = 154U,
        SDL_SCANCODE_CANCEL = 155U,
        SDL_SCANCODE_CLEAR = 156U,
        SDL_SCANCODE_PRIOR = 157U,
        SDL_SCANCODE_RETURN2 = 158U,
        SDL_SCANCODE_SEPARATOR = 159U,
        SDL_SCANCODE_OUT = 160U,
        SDL_SCANCODE_OPER = 161U,
        SDL_SCANCODE_CLEARAGAIN = 162U,
        SDL_SCANCODE_CRSEL = 163U,
        SDL_SCANCODE_EXSEL = 164U,
        SDL_SCANCODE_KP_00 = 176U,
        SDL_SCANCODE_KP_000 = 177U,
        SDL_SCANCODE_THOUSANDSSEPARATOR = 178U,
        SDL_SCANCODE_DECIMALSEPARATOR = 179U,
        SDL_SCANCODE_CURRENCYUNIT = 180U,
        SDL_SCANCODE_CURRENCYSUBUNIT = 181U,
        SDL_SCANCODE_KP_LEFTPAREN = 182U,
        SDL_SCANCODE_KP_RIGHTPAREN = 183U,
        SDL_SCANCODE_KP_LEFTBRACE = 184U,
        SDL_SCANCODE_KP_RIGHTBRACE = 185U,
        SDL_SCANCODE_KP_TAB = 186U,
        SDL_SCANCODE_KP_BACKSPACE = 187U,
        SDL_SCANCODE_KP_A = 188U,
        SDL_SCANCODE_KP_B = 189U,
        SDL_SCANCODE_KP_C = 190U,
        SDL_SCANCODE_KP_D = 191U,
        SDL_SCANCODE_KP_E = 192U,
        SDL_SCANCODE_KP_F = 193U,
        SDL_SCANCODE_KP_XOR = 194U,
        SDL_SCANCODE_KP_POWER = 195U,
        SDL_SCANCODE_KP_PERCENT = 196U,
        SDL_SCANCODE_KP_LESS = 197U,
        SDL_SCANCODE_KP_GREATER = 198U,
        SDL_SCANCODE_KP_AMPERSAND = 199U,
        SDL_SCANCODE_KP_DBLAMPERSAND = 200U,
        SDL_SCANCODE_KP_VERTICALBAR = 201U,
        SDL_SCANCODE_KP_DBLVERTICALBAR = 202U,
        SDL_SCANCODE_KP_COLON = 203U,
        SDL_SCANCODE_KP_HASH = 204U,
        SDL_SCANCODE_KP_SPACE = 205U,
        SDL_SCANCODE_KP_AT = 206U,
        SDL_SCANCODE_KP_EXCLAM = 207U,
        SDL_SCANCODE_KP_MEMSTORE = 208U,
        SDL_SCANCODE_KP_MEMRECALL = 209U,
        SDL_SCANCODE_KP_MEMCLEAR = 210U,
        SDL_SCANCODE_KP_MEMADD = 211U,
        SDL_SCANCODE_KP_MEMSUBTRACT = 212U,
        SDL_SCANCODE_KP_MEMMULTIPLY = 213U,
        SDL_SCANCODE_KP_MEMDIVIDE = 214U,
        SDL_SCANCODE_KP_PLUSMINUS = 215U,
        SDL_SCANCODE_KP_CLEAR = 216U,
        SDL_SCANCODE_KP_CLEARENTRY = 217U,
        SDL_SCANCODE_KP_BINARY = 218U,
        SDL_SCANCODE_KP_OCTAL = 219U,
        SDL_SCANCODE_KP_DECIMAL = 220U,
        SDL_SCANCODE_KP_HEXADECIMAL = 221U,
        SDL_SCANCODE_LCTRL = 224U,
        SDL_SCANCODE_LSHIFT = 225U,
        SDL_SCANCODE_LALT = 226U,
        SDL_SCANCODE_LGUI = 227U,
        SDL_SCANCODE_RCTRL = 228U,
        SDL_SCANCODE_RSHIFT = 229U,
        SDL_SCANCODE_RALT = 230U,
        SDL_SCANCODE_RGUI = 231U,
        SDL_SCANCODE_MODE = 257U,
        SDL_SCANCODE_AUDIONEXT = 258U,
        SDL_SCANCODE_AUDIOPREV = 259U,
        SDL_SCANCODE_AUDIOSTOP = 260U,
        SDL_SCANCODE_AUDIOPLAY = 261U,
        SDL_SCANCODE_AUDIOMUTE = 262U,
        SDL_SCANCODE_MEDIASELECT = 263U,
        SDL_SCANCODE_WWW = 264U,
        SDL_SCANCODE_MAIL = 265U,
        SDL_SCANCODE_CALCULATOR = 266U,
        SDL_SCANCODE_COMPUTER = 267U,
        SDL_SCANCODE_AC_SEARCH = 268U,
        SDL_SCANCODE_AC_HOME = 269U,
        SDL_SCANCODE_AC_BACK = 270U,
        SDL_SCANCODE_AC_FORWARD = 271U,
        SDL_SCANCODE_AC_STOP = 272U,
        SDL_SCANCODE_AC_REFRESH = 273U,
        SDL_SCANCODE_AC_BOOKMARKS = 274U,
        SDL_SCANCODE_BRIGHTNESSDOWN = 275U,
        SDL_SCANCODE_BRIGHTNESSUP = 276U,
        SDL_SCANCODE_DISPLAYSWITCH = 277U,
        SDL_SCANCODE_KBDILLUMTOGGLE = 278U,
        SDL_SCANCODE_KBDILLUMDOWN = 279U,
        SDL_SCANCODE_KBDILLUMUP = 280U,
        SDL_SCANCODE_EJECT = 281U,
        SDL_SCANCODE_SLEEP = 282U,
        SDL_SCANCODE_APP1 = 283U,
        SDL_SCANCODE_APP2 = 284U,
        SDL_SCANCODE_AUDIOREWIND = 285U,
        SDL_SCANCODE_AUDIOFASTFORWARD = 286U,
        SDL_NUM_SCANCODES = 512U
    }

    // Enum @ SDL_events.h:667:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_events.h)
    public enum SDL_eventaction : uint
    {
        SDL_ADDEVENT = 0U,
        SDL_PEEKEVENT = 1U,
        SDL_GETEVENT = 2U
    }

    // Enum @ SDL_touch.h:50:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_touch.h)
    public enum SDL_TouchDeviceType : uint
    {
        SDL_TOUCH_DEVICE_INVALID = 4294967295U,
        SDL_TOUCH_DEVICE_DIRECT = 0U,
        SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1U,
        SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2U
    }

    // Enum @ SDL_sensor.h:75:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_sensor.h)
    public enum SDL_SensorType : uint
    {
        SDL_SENSOR_INVALID = 4294967295U,
        SDL_SENSOR_UNKNOWN = 0U,
        SDL_SENSOR_ACCEL = 1U,
        SDL_SENSOR_GYRO = 2U
    }

    // Enum @ SDL_gamecontroller.h:640:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    public enum SDL_GameControllerButton : uint
    {
        SDL_CONTROLLER_BUTTON_INVALID = 4294967295U,
        SDL_CONTROLLER_BUTTON_A = 0U,
        SDL_CONTROLLER_BUTTON_B = 1U,
        SDL_CONTROLLER_BUTTON_X = 2U,
        SDL_CONTROLLER_BUTTON_Y = 3U,
        SDL_CONTROLLER_BUTTON_BACK = 4U,
        SDL_CONTROLLER_BUTTON_GUIDE = 5U,
        SDL_CONTROLLER_BUTTON_START = 6U,
        SDL_CONTROLLER_BUTTON_LEFTSTICK = 7U,
        SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8U,
        SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9U,
        SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10U,
        SDL_CONTROLLER_BUTTON_DPAD_UP = 11U,
        SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12U,
        SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13U,
        SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14U,
        SDL_CONTROLLER_BUTTON_MISC1 = 15U,
        SDL_CONTROLLER_BUTTON_PADDLE1 = 16U,
        SDL_CONTROLLER_BUTTON_PADDLE2 = 17U,
        SDL_CONTROLLER_BUTTON_PADDLE3 = 18U,
        SDL_CONTROLLER_BUTTON_PADDLE4 = 19U,
        SDL_CONTROLLER_BUTTON_TOUCHPAD = 20U,
        SDL_CONTROLLER_BUTTON_MAX = 21U
    }

    // Enum @ SDL_gamecontroller.h:81:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    public enum SDL_GameControllerBindType : uint
    {
        SDL_CONTROLLER_BINDTYPE_NONE = 0U,
        SDL_CONTROLLER_BINDTYPE_BUTTON = 1U,
        SDL_CONTROLLER_BINDTYPE_AXIS = 2U,
        SDL_CONTROLLER_BINDTYPE_HAT = 3U
    }

    // Enum @ SDL_gamecontroller.h:526:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    public enum SDL_GameControllerAxis : uint
    {
        SDL_CONTROLLER_AXIS_INVALID = 4294967295U,
        SDL_CONTROLLER_AXIS_LEFTX = 0U,
        SDL_CONTROLLER_AXIS_LEFTY = 1U,
        SDL_CONTROLLER_AXIS_RIGHTX = 2U,
        SDL_CONTROLLER_AXIS_RIGHTY = 3U,
        SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4U,
        SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5U,
        SDL_CONTROLLER_AXIS_MAX = 6U
    }

    // Enum @ SDL_gamecontroller.h:73:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_gamecontroller.h)
    public enum SDL_GameControllerType : uint
    {
        SDL_CONTROLLER_TYPE_UNKNOWN = 0U,
        SDL_CONTROLLER_TYPE_XBOX360 = 1U,
        SDL_CONTROLLER_TYPE_XBOXONE = 2U,
        SDL_CONTROLLER_TYPE_PS3 = 3U,
        SDL_CONTROLLER_TYPE_PS4 = 4U,
        SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5U,
        SDL_CONTROLLER_TYPE_VIRTUAL = 6U,
        SDL_CONTROLLER_TYPE_PS5 = 7U,
        SDL_CONTROLLER_TYPE_AMAZON_LUNA = 8U,
        SDL_CONTROLLER_TYPE_GOOGLE_STADIA = 9U
    }

    // Enum @ SDL_joystick.h:108:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    public enum SDL_JoystickPowerLevel : uint
    {
        SDL_JOYSTICK_POWER_UNKNOWN = 4294967295U,
        SDL_JOYSTICK_POWER_EMPTY = 0U,
        SDL_JOYSTICK_POWER_LOW = 1U,
        SDL_JOYSTICK_POWER_MEDIUM = 2U,
        SDL_JOYSTICK_POWER_FULL = 3U,
        SDL_JOYSTICK_POWER_WIRED = 4U,
        SDL_JOYSTICK_POWER_MAX = 5U
    }

    // Enum @ SDL_joystick.h:97:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_joystick.h)
    public enum SDL_JoystickType : uint
    {
        SDL_JOYSTICK_TYPE_UNKNOWN = 0U,
        SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1U,
        SDL_JOYSTICK_TYPE_WHEEL = 2U,
        SDL_JOYSTICK_TYPE_ARCADE_STICK = 3U,
        SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4U,
        SDL_JOYSTICK_TYPE_DANCE_PAD = 5U,
        SDL_JOYSTICK_TYPE_GUITAR = 6U,
        SDL_JOYSTICK_TYPE_DRUM_KIT = 7U,
        SDL_JOYSTICK_TYPE_ARCADE_PAD = 8U,
        SDL_JOYSTICK_TYPE_THROTTLE = 9U
    }

    // Enum @ SDL_mouse.h:61:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_mouse.h)
    public enum SDL_SystemCursor : uint
    {
        SDL_SYSTEM_CURSOR_ARROW = 0U,
        SDL_SYSTEM_CURSOR_IBEAM = 1U,
        SDL_SYSTEM_CURSOR_WAIT = 2U,
        SDL_SYSTEM_CURSOR_CROSSHAIR = 3U,
        SDL_SYSTEM_CURSOR_WAITARROW = 4U,
        SDL_SYSTEM_CURSOR_SIZENWSE = 5U,
        SDL_SYSTEM_CURSOR_SIZENESW = 6U,
        SDL_SYSTEM_CURSOR_SIZEWE = 7U,
        SDL_SYSTEM_CURSOR_SIZENS = 8U,
        SDL_SYSTEM_CURSOR_SIZEALL = 9U,
        SDL_SYSTEM_CURSOR_NO = 10U,
        SDL_SYSTEM_CURSOR_HAND = 11U,
        SDL_NUM_SYSTEM_CURSORS = 12U
    }

    // Enum @ SDL_keycode.h:347:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_keycode.h)
    public enum SDL_Keymod : uint
    {
        KMOD_NONE = 0U,
        KMOD_LSHIFT = 1U,
        KMOD_RSHIFT = 2U,
        KMOD_LCTRL = 64U,
        KMOD_RCTRL = 128U,
        KMOD_LALT = 256U,
        KMOD_RALT = 512U,
        KMOD_LGUI = 1024U,
        KMOD_RGUI = 2048U,
        KMOD_NUM = 4096U,
        KMOD_CAPS = 8192U,
        KMOD_MODE = 16384U,
        KMOD_RESERVED = 32768U,
        KMOD_CTRL = 192U,
        KMOD_SHIFT = 3U,
        KMOD_ALT = 768U,
        KMOD_GUI = 3072U
    }

    // Enum @ SDL_video.h:250:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    public enum SDL_GLattr : uint
    {
        SDL_GL_RED_SIZE = 0U,
        SDL_GL_GREEN_SIZE = 1U,
        SDL_GL_BLUE_SIZE = 2U,
        SDL_GL_ALPHA_SIZE = 3U,
        SDL_GL_BUFFER_SIZE = 4U,
        SDL_GL_DOUBLEBUFFER = 5U,
        SDL_GL_DEPTH_SIZE = 6U,
        SDL_GL_STENCIL_SIZE = 7U,
        SDL_GL_ACCUM_RED_SIZE = 8U,
        SDL_GL_ACCUM_GREEN_SIZE = 9U,
        SDL_GL_ACCUM_BLUE_SIZE = 10U,
        SDL_GL_ACCUM_ALPHA_SIZE = 11U,
        SDL_GL_STEREO = 12U,
        SDL_GL_MULTISAMPLEBUFFERS = 13U,
        SDL_GL_MULTISAMPLESAMPLES = 14U,
        SDL_GL_ACCELERATED_VISUAL = 15U,
        SDL_GL_RETAINED_BACKING = 16U,
        SDL_GL_CONTEXT_MAJOR_VERSION = 17U,
        SDL_GL_CONTEXT_MINOR_VERSION = 18U,
        SDL_GL_CONTEXT_EGL = 19U,
        SDL_GL_CONTEXT_FLAGS = 20U,
        SDL_GL_CONTEXT_PROFILE_MASK = 21U,
        SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22U,
        SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23U,
        SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24U,
        SDL_GL_CONTEXT_RESET_NOTIFICATION = 25U,
        SDL_GL_CONTEXT_NO_ERROR = 26U
    }

    // Enum @ SDL_video.h:211:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    public enum SDL_FlashOperation : uint
    {
        SDL_FLASH_CANCEL = 0U,
        SDL_FLASH_BRIEFLY = 1U,
        SDL_FLASH_UNTIL_FOCUSED = 2U
    }

    // Enum @ SDL_video.h:1463:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    public enum SDL_HitTestResult : uint
    {
        SDL_HITTEST_NORMAL = 0U,
        SDL_HITTEST_DRAGGABLE = 1U,
        SDL_HITTEST_RESIZE_TOPLEFT = 2U,
        SDL_HITTEST_RESIZE_TOP = 3U,
        SDL_HITTEST_RESIZE_TOPRIGHT = 4U,
        SDL_HITTEST_RESIZE_RIGHT = 5U,
        SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6U,
        SDL_HITTEST_RESIZE_BOTTOM = 7U,
        SDL_HITTEST_RESIZE_BOTTOMLEFT = 8U,
        SDL_HITTEST_RESIZE_LEFT = 9U
    }

    // Enum @ SDL_video.h:201:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_video.h)
    public enum SDL_DisplayOrientation : uint
    {
        SDL_ORIENTATION_UNKNOWN = 0U,
        SDL_ORIENTATION_LANDSCAPE = 1U,
        SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2U,
        SDL_ORIENTATION_PORTRAIT = 3U,
        SDL_ORIENTATION_PORTRAIT_FLIPPED = 4U
    }

    // Enum @ SDL_surface.h:112:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_surface.h)
    public enum SDL_YUV_CONVERSION_MODE : uint
    {
        SDL_YUV_CONVERSION_JPEG = 0U,
        SDL_YUV_CONVERSION_BT601 = 1U,
        SDL_YUV_CONVERSION_BT709 = 2U,
        SDL_YUV_CONVERSION_AUTOMATIC = 3U
    }

    // Enum @ SDL_blendmode.h:73:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_blendmode.h)
    public enum SDL_BlendOperation : uint
    {
        SDL_BLENDOPERATION_ADD = 1U,
        SDL_BLENDOPERATION_SUBTRACT = 2U,
        SDL_BLENDOPERATION_REV_SUBTRACT = 3U,
        SDL_BLENDOPERATION_MINIMUM = 4U,
        SDL_BLENDOPERATION_MAXIMUM = 5U
    }

    // Enum @ SDL_blendmode.h:91:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_blendmode.h)
    public enum SDL_BlendFactor : uint
    {
        SDL_BLENDFACTOR_ZERO = 1U,
        SDL_BLENDFACTOR_ONE = 2U,
        SDL_BLENDFACTOR_SRC_COLOR = 3U,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4U,
        SDL_BLENDFACTOR_SRC_ALPHA = 5U,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6U,
        SDL_BLENDFACTOR_DST_COLOR = 7U,
        SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8U,
        SDL_BLENDFACTOR_DST_ALPHA = 9U,
        SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10U
    }

    // Enum @ SDL_audio.h:569:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_audio.h)
    public enum SDL_AudioStatus : uint
    {
        SDL_AUDIO_STOPPED = 0U,
        SDL_AUDIO_PLAYING = 1U,
        SDL_AUDIO_PAUSED = 2U
    }

    // Enum @ SDL_thread.h:80:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_thread.h)
    public enum SDL_ThreadPriority : uint
    {
        SDL_THREAD_PRIORITY_LOW = 0U,
        SDL_THREAD_PRIORITY_NORMAL = 1U,
        SDL_THREAD_PRIORITY_HIGH = 2U,
        SDL_THREAD_PRIORITY_TIME_CRITICAL = 3U
    }

    // Enum @ SDL_error.h:142:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_error.h)
    public enum SDL_errorcode : uint
    {
        SDL_ENOMEM = 0U,
        SDL_EFREAD = 1U,
        SDL_EFWRITE = 2U,
        SDL_EFSEEK = 3U,
        SDL_UNSUPPORTED = 4U,
        SDL_LASTERROR = 5U
    }

    // Enum @ SDL_assert.h:113:3 (/home/runner/work/sdl-cs/sdl-cs/ext/SDL/include/SDL_assert.h)
    public enum SDL_AssertState : uint
    {
        SDL_ASSERTION_RETRY = 0U,
        SDL_ASSERTION_BREAK = 1U,
        SDL_ASSERTION_ABORT = 2U,
        SDL_ASSERTION_IGNORE = 3U,
        SDL_ASSERTION_ALWAYS_IGNORE = 4U
    }
}
